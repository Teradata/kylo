###
# #%L
# thinkbig-ui-app
# %%
# Copyright (C) 2017 ThinkBig Analytics
# %%
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# #L%
###
###
# Other properties are in the ui-app/application.properties
#

spring.profiles.active=native,auth-kylo

###
# Authentication settings:
#
# Currently available athentication/authorization Spring profiles: 
#   *  auth-ldap   - authenticates users using LDAP and optionally loads any associated 
#                    user groups
#   *  auth-ad     - authenticates users using Active Directory and loads any associated 
#                    user groups
#   *  auth-simple - Uses authenticationService.username and authenticationService.password 
#                    for authentication (development only)
#   *  auth-file   - Uses users.properties and roles.properties files for authentication 
#                    and role assignment (generally for development only)

## auth-file: If this profile is active then these optional properties may be used:

#security.auth.file.users=file:///opt/kylo/users.properties
#security.auth.file.groups=file:///opt/kylo/groups.properties
#security.auth.file.password.hash.enabled=false
#security.auth.file.password.hash.algorithm=MD5
#security.auth.file.password.hash.encoding=base64

## auth-simple: If this profile is active these authenticationService properties are used:

#authenticationService.username=
#authenticationService.password={cipher}
#authenticationService.password=

## auth-ldap: If this profile is active then these properties should uncommented and updated appropriately

#security.auth.ldap.server.uri=ldap://localhost:52389/dc=example,dc=com
#security.auth.ldap.server.authDn=
## These remaining properties are optional
#security.auth.ldap.server.password=
#security.auth.ldap.authenticator.userDnPatterns=uid={0},ou=people
#security.auth.ldap.user.enableGroups=true
### user DN patterns are separated by '|'
#security.auth.ldap.user.groupsBase=ou=groups
#security.auth.ldap.user.groupNameAttr=ou

## auth-ad: If this profile is active then these properties should uncommented and updated appropriately

#security.auth.ad.server.uri=ldap://example.com/
#security.auth.ad.server.domain=test.example.com
## These remaining properties are optional
#security.auth.ad.user.enableGroups=true
## group attributes are separated by '|'
#security.auth.ad.user.groupAttributes=


#
# Server port
#
server.port=8400
server.ssl.enabled=false

zuul.prefix=/proxy
zuul.routes.api.path=/**
zuul.routes.api.url=http://localhost:8420/api
zuul.routes.api.sensitiveHeaders
ribbon.eureka.enabled=false
zuul.debug.request=false
###Up the timeout so the UI doenst come back with Read Socket Timeout for longer running transactions
zuul.host.socket-timeout-millis=3600000
##zuul.host.connect-timeout-millis

### allow large file uploads
spring.http.multipart.maxFileSize=10MB
spring.http.multipart.maxRequestSize=-1

# Login form authentication
#security.jwt.algorithm=HS256
security.jwt.key=<insert-256-bit-secret-key-here>
security.rememberme.alwaysRemember=true
#security.rememberme.cookieDomain=localhost
#security.rememberme.cookieName=remember-me
#security.rememberme.parameter=remember-me
#security.rememberme.tokenValiditySeconds=1209600
#security.rememberme.useSecureCookie=

loginRestClientConfig.https=${server.ssl.enabled}
loginRestClientConfig.host=localhost
loginRestClientConfig.port=${server.port}
loginRestClientConfig.path=${zuul.prefix}
loginRestClientConfig.keystorePath=${server.ssl.key-store}
loginRestClientConfig.keystorePassword=${server.ssl.key-store-password}
