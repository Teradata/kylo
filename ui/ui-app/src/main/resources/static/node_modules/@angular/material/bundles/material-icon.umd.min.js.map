{"version":3,"file":"material-icon.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) private _document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      // Note: 1 corresponds to `Node.ELEMENT_NODE` which we can't use in Universal.\n      if (element.childNodes[i].nodeType === 1) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeError","url","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","document","MatIconRegistry","cloneSvg","svg","cloneNode","iconKey","namespace","name","setPrototypeOf","__proto__","Array","p","hasOwnProperty","SvgIconConfig","svgElement","_httpClient","_sanitizer","_document","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","key","set","addSvgIconSet","addSvgIconSetInNamespace","config","configNamespace","get","push","registerFontClassAlias","alias","className","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","_this","sanitize","SecurityContext","RESOURCE_URL","cachedIcon","observableOf","_loadSvgIconFromConfig","pipe","tap","map","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","console","log","forkJoin","foundIcon","i","length","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","id","nodeName","toLowerCase","_toSvgElement","appendChild","str","div","createElement","innerHTML","element","childNodes","nodeType","getAttribute","setAttribute","inProgressFetch","req","responseType","finalize","delete","share","type","Injectable","HttpClient","decorators","Optional","DomSanitizer","undefined","Inject","args","DOCUMENT","ICON_REGISTRY_PROVIDER","provide","deps","SkipSelf","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","mixinColor","MatIcon","elementRef","_iconRegistry","ariaHidden","_super","call","nativeElement","tslib_1.__extends","defineProperty","_fontSet","value","_cleanupFontValue","_fontIcon","_splitIconName","parts","split","ngOnChanges","changes","svgIcon","_a","take","subscribe","_setSvgElement","message","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngOnInit","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","classList","remove","add","fontIcon","_previousFontIconClass","trim","Component","template","selector","exportAs","styles","inputs","host","role","class","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","Attribute","propDecorators","Input","MatIconModule","NgModule","imports","MatCommonModule","exports","declarations","providers"],"mappings":"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"}