{"version":3,"sources":["common-http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","common","http","core","Rx","Observable","prototype","tslib","this","_angular_core","rxjs_observable_of","rxjs_operator_concatMap","rxjs_operator_filter","rxjs_operator_map","_angular_common","rxjs_Observable","paramParser","rawParams","codec","map$$1","Map","length","split","forEach","param","eqIdx","indexOf","_a","decodeKey","slice","decodeValue","key","val","list","get","push","set","standardEncoding","v","encodeURIComponent","replace","mightHaveBody","method","isArrayBuffer","value","ArrayBuffer","isBlob","Blob","isFormData","FormData","addBody","options","body","headers","observe","params","reportProgress","responseType","withCredentials","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","interceptingHandler","backend","interceptors","reduceRight","next","interceptor","HttpInterceptorHandler","jsonpCallbackContext","window","HttpHandler","HttpBackend","HttpHeaders","_this","normalizedNames","lazyUpdate","lazyInit","line","index","name_1","toLowerCase","trim","maybeSetNormalizedName","has","Object","keys","name","values","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","apply","toDelete_1","existing","filter","fn","HttpUrlEncodingCodec","encodeKey","k","encodeValue","decodeURIComponent","HttpParams","updates","cloneFrom","encoder","fromString","fromObject","Error","map","isArray","res","toString","eKey","join","base_1","idx","splice","HttpRequest","url","third","fourth","toUpperCase","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","_super","call","__extends","HttpResponse","HttpErrorResponse","message","error","HttpClient","handler","request","first","req","events$","concatMap","of","handle","res$","event","head","jsonp","callbackParam","patch","post","put","decorators","Injectable","ctorParameters","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","removeEventListener","Inject","args","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","NgModule","useExisting","multi","HttpClientModule","imports","useFactory","deps","Optional","HttpClientJsonpModule","ɵinterceptingHandler","ɵa","ɵb","ɵc","ɵd","ɵg","ɵh","ɵe","ɵf","defineProperty"],"mappings":"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","file":"common-http.umd.min.js","sourcesContent":["/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/observable/of'), require('rxjs/operator/concatMap'), require('rxjs/operator/filter'), require('rxjs/operator/map'), require('tslib'), require('@angular/common'), require('rxjs/Observable')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/common/http', ['exports', '@angular/core', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/filter', 'rxjs/operator/map', 'tslib', '@angular/common', 'rxjs/Observable'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}, global.ng.common.http = {}),global.ng.core,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.tslib,global.ng.common,global.Rx));\n}(this, (function (exports,_angular_core,rxjs_observable_of,rxjs_operator_concatMap,rxjs_operator_filter,rxjs_operator_map,tslib,_angular_common,rxjs_Observable) { 'use strict';\n\n/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var /** @type {?} */ index = line.indexOf(':');\n                    if (index > 0) {\n                        var /** @type {?} */ name_1 = line.slice(0, index);\n                        var /** @type {?} */ key = name_1.toLowerCase();\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            /** @type {?} */ ((_this.headers.get(key))).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var /** @type {?} */ values = headers[name];\n                    var /** @type {?} */ key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    HttpHeaders.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.append = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.set = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.delete = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    HttpHeaders.prototype.maybeSetNormalizedName = /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HttpHeaders.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    HttpHeaders.prototype.copyFrom = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\n        });\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.applyUpdate = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var /** @type {?} */ value = /** @type {?} */ ((update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var /** @type {?} */ existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    HttpHeaders.prototype.forEach = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@stable\n *\n * @record\n */\n\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return decodeURIComponent(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    var /** @type {?} */ map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Options used to construct an `HttpParams` instance.\n * @record\n */\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = /** @type {?} */ ({}); }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\n                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.has = /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.get = /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.getAll = /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    HttpParams.prototype.keys = /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(/** @type {?} */ ((this.map)).keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.append = /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.set = /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpParams.prototype.delete = /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    HttpParams.prototype.toString = /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\n            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');\n        })\n            .join('&');\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpParams.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @return {?}\n     */\n    HttpParams.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\n            ((this.updates)).forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\n                        ((_this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                /** @type {?} */ ((_this.map)).set(update.param, base_1);\n                            }\n                            else {\n                                /** @type {?} */ ((_this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            /** @type {?} */ ((_this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var /** @type {?} */ options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? /** @type {?} */ (third) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = /** @type {?} */ (third);\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var /** @type {?} */ params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var /** @type {?} */ qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    HttpRequest.prototype.serializeBody = /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return (/** @type {?} */ (this.body)).toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    HttpRequest.prototype.detectContentTypeHeader = /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpRequest.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var /** @type {?} */ method = update.method || this.method;\n        var /** @type {?} */ url = update.url || this.url;\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var /** @type {?} */ headers = update.headers || this.headers;\n        var /** @type {?} */ params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar HttpEventType = {\n    /**\n       * The request was sent out over the wire.\n       */\n    Sent: 0,\n    /**\n       * An upload progress event was received.\n       */\n    UploadProgress: 1,\n    /**\n       * The response status code and headers were received.\n       */\n    ResponseHeader: 2,\n    /**\n       * A download progress event was received.\n       */\n    DownloadProgress: 3,\n    /**\n       * The full response including the body was received.\n       */\n    Response: 4,\n    /**\n       * A custom event from an interceptor or a backend.\n       */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n/**\n * Base interface for progress events.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A download progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An upload progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    tslib.__extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpHeaderResponse.prototype.clone = /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    tslib.__extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpResponse.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    tslib.__extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * \\@stable\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.request = /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var /** @type {?} */ req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = /** @type {?} */ (first);\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var /** @type {?} */ headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var /** @type {?} */ params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, /** @type {?} */ ((url)), (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var /** @type {?} */ events$ = rxjs_operator_concatMap.concatMap.call(rxjs_observable_of.of(req), function (req) { return _this.handler.handle(req); });\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var /** @type {?} */ res$ = rxjs_operator_filter.filter.call(events$, function (event) { return event instanceof HttpResponse; });\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return rxjs_operator_map.map.call(res$, function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        });\n                    case 'blob':\n                        return rxjs_operator_map.map.call(res$, function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        });\n                    case 'text':\n                        return rxjs_operator_map.map.call(res$, function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        });\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return rxjs_operator_map.map.call(res$, function (res) { return res.body; });\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.delete = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.get = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.head = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    HttpClient.prototype.jsonp = /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.options = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.patch = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.post = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.put = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler, },\n    ]; };\n    return HttpClient;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * \\@stable\n * @record\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptorHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@stable\n */\nvar HTTP_INTERCEPTORS = new _angular_core.InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NoopInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    NoopInterceptor.ctorParameters = function () { return []; };\n    return NoopInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@stable\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.nextCallback = /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.handle = /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new rxjs_Observable.Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var /** @type {?} */ callback = _this.nextCallback();\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var /** @type {?} */ node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var /** @type {?} */ body = null;\n            // Whether the response callback has been called.\n            var /** @type {?} */ finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var /** @type {?} */ cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var /** @type {?} */ cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var /** @type {?} */ onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the resposne is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var /** @type {?} */ onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext, },\n        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_common.DOCUMENT,] },] },\n    ]; };\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@stable\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    JsonpInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(/** @type {?} */ (req));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: JsonpClientBackend, },\n    ]; };\n    return JsonpInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * \\@stable\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@stable\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpXhrBackend.prototype.handle = /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new rxjs_Observable.Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var /** @type {?} */ responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var /** @type {?} */ reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var /** @type {?} */ headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var /** @type {?} */ partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var /** @type {?} */ onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var /** @type {?} */ body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var /** @type {?} */ ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var /** @type {?} */ originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = /** @type {?} */ ({ error: error, text: body });\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var /** @type {?} */ onError = function (error) {\n                var /** @type {?} */ res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var /** @type {?} */ sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var /** @type {?} */ progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var /** @type {?} */ progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory, },\n    ]; };\n    return HttpXhrBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new _angular_core.InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new _angular_core.InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    HttpXsrfCookieExtractor.prototype.getToken = /**\n     * @return {?}\n     */\n    function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = _angular_common.ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_common.DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PLATFORM_ID,] },] },\n        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [XSRF_COOKIE_NAME,] },] },\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    HttpXsrfInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var /** @type {?} */ token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor, },\n        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [XSRF_HEADER_NAME,] },] },\n    ]; };\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * \\@stable\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * \\@stable\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * \\@stable\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    HttpClientXsrfModule.disable = /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClientXsrfModule.withOptions = /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: _angular_core.NgModule, args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\n    return HttpClientXsrfModule;\n}());\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * \\@stable\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: _angular_core.NgModule, args: [{\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        HttpClient,\n                        // HttpHandler is the backend + interceptors and is constructed\n                        // using the interceptingHandler factory function.\n                        {\n                            provide: HttpHandler,\n                            useFactory: interceptingHandler,\n                            deps: [HttpBackend, [new _angular_core.Optional(), new _angular_core.Inject(HTTP_INTERCEPTORS)]],\n                        },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                        BrowserXhr,\n                        { provide: XhrFactory, useExisting: BrowserXhr },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientModule.ctorParameters = function () { return []; };\n    return HttpClientModule;\n}());\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * \\@stable\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: _angular_core.NgModule, args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\n    return HttpClientJsonpModule;\n}());\n\nexports.HttpBackend = HttpBackend;\nexports.HttpHandler = HttpHandler;\nexports.HttpClient = HttpClient;\nexports.HttpHeaders = HttpHeaders;\nexports.HTTP_INTERCEPTORS = HTTP_INTERCEPTORS;\nexports.JsonpClientBackend = JsonpClientBackend;\nexports.JsonpInterceptor = JsonpInterceptor;\nexports.HttpClientJsonpModule = HttpClientJsonpModule;\nexports.HttpClientModule = HttpClientModule;\nexports.HttpClientXsrfModule = HttpClientXsrfModule;\nexports.ɵinterceptingHandler = interceptingHandler;\nexports.HttpParams = HttpParams;\nexports.HttpUrlEncodingCodec = HttpUrlEncodingCodec;\nexports.HttpRequest = HttpRequest;\nexports.HttpErrorResponse = HttpErrorResponse;\nexports.HttpEventType = HttpEventType;\nexports.HttpHeaderResponse = HttpHeaderResponse;\nexports.HttpResponse = HttpResponse;\nexports.HttpResponseBase = HttpResponseBase;\nexports.HttpXhrBackend = HttpXhrBackend;\nexports.XhrFactory = XhrFactory;\nexports.HttpXsrfTokenExtractor = HttpXsrfTokenExtractor;\nexports.ɵa = NoopInterceptor;\nexports.ɵb = JsonpCallbackContext;\nexports.ɵc = jsonpCallbackContext;\nexports.ɵd = BrowserXhr;\nexports.ɵg = HttpXsrfCookieExtractor;\nexports.ɵh = HttpXsrfInterceptor;\nexports.ɵe = XSRF_COOKIE_NAME;\nexports.ɵf = XSRF_HEADER_NAME;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=common-http.umd.js.map\n"]}