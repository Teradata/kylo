{"version":3,"file":"material-radio.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatRadioGroup","multi","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","mixinDisabled","_changeDetector","_this","_super","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","EventEmitter","tslib_1.__extends","defineProperty","value","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","coerceBooleanProperty","ngAfterContentInit","_touch","_radios","forEach","radio","name","isAlreadySelected","_emitChangeEvent","event_1","source","emit","_markForCheck","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","type","Directive","args","selector","exportAs","providers","host","role","class","inputs","ChangeDetectorRef","Output","ContentChildren","MatRadioButton","descendants","Input","align","required","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","mixinColor","mixinDisableRipple","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_uniqueId","id","_checked","_rippleConfig","centered","radius","speedFactor","_removeUniqueSelectionListener","listen","newCheckedState","notify","focus","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","_onInputFocusChange","ngOnDestroy","stopMonitoring","event","_isRippleDisabled","disableRipple","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","changeDetection","ChangeDetectionStrategy","OnPush","FocusMonitor","UniqueSelectionDispatcher","propDecorators","ariaLabel","ariaLabelledby","ViewChild","MatRipple","MatRadioModule","NgModule","imports","CommonModule","MatRippleModule","MatCommonModule","A11yModule","exports","UNIQUE_SELECTION_DISPATCHER_PROVIDER","declarations"],"mappings":";;;;;;;ouBAoBA,SAAgBA,GAAUC,EAAGC,GAEzB,QAASC,KAAOC,KAAKC,YAAcJ,EADnCK,EAAcL,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAPnF,GAAIG,GAAgBE,OAAOE,iBACpBC,uBAA2BC,QAAS,SAAUX,EAAGC,GAAKD,EAAEU,UAAYT,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIW,KAAKX,GAAOA,EAAEY,eAAeD,KAAIZ,EAAEY,GAAKX,EAAEW,KAQ9DE,EAAWP,OAAOQ,QAAU,SAAkBC,GACrD,IAAK,GAAIC,GAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAAK,CACjDD,EAAIG,UAAUF,EACd,KAAK,GAAIN,KAAKK,GAAOV,OAAOD,UAAUO,eAAeS,KAAKL,EAAGL,KAAII,EAAEJ,GAAKK,EAAEL,IAE9E,MAAOI,ICcPO,EAAe,EAONC,GACXC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAC,KAC9BC,OAAO,GAITC,EAAA,yBA3DA,MAAAA,MAqEAC,EAAA,yBArEA,MAAAA,MAsEaC,EAA0BC,EAAAA,cAAcF,iBA8InD,QAAFH,GAAsBM,GAApB,GAAFC,GACIC,EADJf,KAAAnB,OAAAA,WAAsBiC,GAAtBD,gBAAsBA,EAvHtBC,EAAAE,OAAwB,KAGxBF,EAAAG,MAA0B,mBAAmBhB,IAG7Ca,EAAAI,UAA6C,KAG7CJ,EAAAK,gBAAoC,EAGpCL,EAAAM,eAA+C,QAG/CN,EAAAO,WAA+B,EAG/BP,EAAAQ,WAA+B,EAG/BR,EAAAS,8BAAwD,aAMxDT,EAAAU,UAAyB,aAOzBV,EAAAW,OAAmD,GAAIC,GAAAA,eA/HvD,MAqFmCC,GAAnCpB,EAAAQ,GAkDA9B,OAAA2C,eAAMrB,EAANvB,UAAA,YAAA,WAAuB,MAAOH,MAAKoC,WACjC,SAASY,GACPhD,KAAKoC,MAAQY,EACbhD,KAAKiD,2DAQT7C,OAAA2C,eAAMrB,EAANvB,UAAA,wBAGI,MAA6B,SAAtBH,KAAKkD,cAA2B,QAAU,WAGnD,SAAUC,GACRnD,KAAKkD,cAAsB,SAALC,EAAgB,QAAU,0CAMpD/C,OAAA2C,eAAMrB,EAANvB,UAAA,gCACI,MAAOH,MAAKuC,oBAGd,SAAkBY,GAChBnD,KAAKuC,eAAuB,UAALY,EAAiB,SAAW,QACnDnD,KAAKoD,uDAKThD,OAAA2C,eAAMrB,EAANvB,UAAA,aAAA,WAAqB,MAAOH,MAAKmC,YAC/B,SAAUkB,GACJrD,KAAKmC,QAAUkB,IAEjBrD,KAAKmC,OAASkB,EAEdrD,KAAKsD,gCACLtD,KAAKuD,8DAIT7B,EAAFvB,UAAAoD,0BAAE,WACMvD,KAAKqC,YAAcrC,KAAKqC,UAAUmB,UACpCxD,KAAKqC,UAAUmB,SAAU,IAM/BpD,OAAA2C,eAAMrB,EAANvB,UAAA,gBAAA,WAAmB,MAAOH,MAAKqC,eAC7B,SAAaoB,GACXzD,KAAKqC,UAAYoB,EACjBzD,KAAKgD,MAAQS,EAAWA,EAAST,MAAQ,KACzChD,KAAKuD,6DAKTnD,OAAA2C,eAAMrB,EAANvB,UAAA,gBAAA,WAA4B,MAAOH,MAAKwC,eACtC,SAAaQ,GACXhD,KAAKwC,UAAYkB,EAAAA,sBAAsBV,GACvChD,KAAKoD,uDAKThD,OAAA2C,eAAMrB,EAANvB,UAAA,gBAAA,WAA4B,MAAOH,MAAKyC,eACtC,SAAaO,GACXhD,KAAKyC,UAAYiB,EAAAA,sBAAsBV,GACvChD,KAAKoD,uDAWP1B,EAAFvB,UAAAwD,mBAAE,WAIE3D,KAAKsC,gBAAiB,GAOxBZ,EAAFvB,UAAAyD,OAAE,WACM5D,KAAK2C,WACP3C,KAAK2C,aAIDjB,EAAVvB,UAAA8C,6CACQjD,MAAK6D,SACP7D,KAAK6D,QAAQC,QAAQ,SAAAC,GACnBA,EAAMC,KAAO/B,EAAK+B,QAMhBtC,EAAVvB,UAAAmD,oDAEUW,EAAsC,MAAlBjE,KAAKqC,WAAqBrC,KAAKqC,UAAUW,OAAShD,KAAKmC,MAE7D,OAAhBnC,KAAK6D,SAAoBI,IAC3BjE,KAAKqC,UAAY,KACjBrC,KAAK6D,QAAQC,QAAQ,SAAAC,GACnBA,EAAMP,QAAUvB,EAAKe,OAASe,EAAMf,MAChCe,EAAMP,UACRvB,EAAKI,UAAY0B,OAOzBrC,EAAFvB,UAAA+D,iBAAE,WACE,GAAIlE,KAAKsC,eAAgB,CACvB,GAAM6B,GAAQ,GAAIvC,EAClBuC,GAAMC,OAASpE,KAAKqC,UACpB8B,EAAMnB,MAAQhD,KAAKmC,OACnBnC,KAAK4C,OAAOyB,KAAKF,KAIrBzC,EAAFvB,UAAAiD,oBAAE,WACMpD,KAAK6D,SACP7D,KAAK6D,QAAQC,QAAQ,SAAAC,GAAS,MAAAA,GAAMO,mBAQxC5C,EAAFvB,UAAAoE,WAAE,SAAWvB,GACThD,KAAKgD,MAAQA,EACbhD,KAAKgC,gBAAgBwC,gBAQvB9C,EAAFvB,UAAAsE,iBAAE,SAAiBC,GACf1E,KAAK0C,8BAAgCgC,GAQvChD,EAAFvB,UAAAwE,kBAAE,SAAkBD,GAChB1E,KAAK2C,UAAY+B,GAOnBhD,EAAFvB,UAAAyE,iBAAE,SAAiBC,GACf7E,KAAK8E,SAAWD,EAChB7E,KAAKgC,gBAAgBwC,+BA3OzBO,KAACC,EAAAA,UAADC,OACEC,SAAU,kBACVC,SAAU,gBACVC,WAAY/D,GACZgE,MACEC,KAAQ,aACRC,MAAS,mBAEXC,QAAS,oDApEXT,KAAEU,EAAAA,uCAgHF7C,SAAAmC,KAAGW,EAAAA,SAGH7B,UAAAkB,KAAGY,EAAAA,gBAAHV,MAAmBxD,EAAAA,WAAW,WAAM,MAAAmE,MAAmBC,aAAa,MAIpE7B,OAAAe,KAAGe,EAAAA,QAWHC,QAAAhB,KAAGe,EAAAA,QAaH5C,gBAAA6B,KAAGe,EAAAA,QAWH9C,QAAA+B,KAAGe,EAAAA,QAmBHrC,WAAAsB,KAAGe,EAAAA,QASHhB,WAAAC,KAAGe,EAAAA,QAQHE,WAAAjB,KAAGe,EAAAA,SA7MHpE,GAqFmCI,GAuOnCmE,EAAA,WACE,QAAFA,GAAqBC,GAAAlG,KAArBkG,YAAqBA,EA7TrB,MAAAD,MAiUaE,EACTC,EAAAA,WAAWC,EAAAA,mBAAmBJ,GAAqB,wBA8KrD,QAAFL,GAA0BU,EACZC,EACQvE,EACAwE,EACAC,GAJpB,GAAFxE,GAKIC,EALJf,KAAAnB,KAKUuG,IALVvG,WAEsBiC,GAAtBD,gBAAsBA,EACAC,EAAtBuE,cAAsBA,EACAvE,EAAtBwE,iBAAsBA,EArJtBxE,EAAAyE,UAA8B,gBAAetF,EAG7Ca,EAAA0E,GAAwB1E,EAAKyE,UA2G7BzE,EAAAW,OAAmD,GAAIC,GAAAA,aASvDZ,EAAA2E,UAA8B,EAS9B3E,EAAAE,OAAwB,KAMxBF,EAAA4E,eAAiCC,UAAU,EAAMC,OAAQ,GAAIC,YAAa,KAM1E/E,EAAAgF,+BAAuD,aAcnDhF,EAAKqE,WAAaA,EAElBrE,EAAKgF,+BACHR,EAAiBS,OAAO,SAACP,EAAY3C,GAC/B2C,GAAM1E,EAAK0E,IAAM3C,GAAQ/B,EAAK+B,OAChC/B,EAAKuB,SAAU,OAhBzB,MAlJoCV,GAApC8C,EAAA1D,GAmBA9B,OAAA2C,eAAM6C,EAANzF,UAAA,eAAA,WAA2B,MAAOH,MAAK4G,cACrC,SAAY5D,GACV,GAAMmE,GAAkBzD,EAAAA,sBAAsBV,EAE1ChD,MAAK4G,UAAYO,IACnBnH,KAAK4G,SAAWO,EAEZA,GAAmBnH,KAAKsG,YAActG,KAAKsG,WAAWtD,OAAShD,KAAKgD,MACtEhD,KAAKsG,WAAW7C,SAAWzD,MACjBmH,GAAmBnH,KAAKsG,YAActG,KAAKsG,WAAWtD,OAAShD,KAAKgD,QAG9EhD,KAAKsG,WAAW7C,SAAW,MAGzB0D,GAEFnH,KAAKyG,iBAAiBW,OAAOpH,KAAK2G,GAAI3G,KAAKgE,MAE7ChE,KAAKgC,gBAAgBwC,iDAM3BpE,OAAA2C,eAAM6C,EAANzF,UAAA,wBACI,MAAOH,MAAKmC,YAGd,SAAUa,GACJhD,KAAKmC,QAAUa,IACjBhD,KAAKmC,OAASa,EACS,MAAnBhD,KAAKsG,aACFtG,KAAKwD,UAERxD,KAAKwD,QAAUxD,KAAKsG,WAAWtD,OAASA,GAEtChD,KAAKwD,UACPxD,KAAKsG,WAAW7C,SAAWzD,yCAWrCI,OAAA2C,eAAM6C,EAANzF,UAAA,wBAGI,MAA6B,SAAtBH,KAAKkD,cAA2B,QAAU,WAGnD,SAAUC,GACRnD,KAAKkD,cAAsB,SAALC,EAAgB,QAAU,0CAOpD/C,OAAA2C,eAAM6C,EAANzF,UAAA,gCACI,MAAOH,MAAKuC,gBAAmBvC,KAAKsG,YAActG,KAAKsG,WAAWpD,eAAkB,aAGtF,SAAkBF,GAChBhD,KAAKuC,eAAiBS,mCAK1B5C,OAAA2C,eAAM6C,EAANzF,UAAA,2BACI,MAAOH,MAAKwC,WAAiC,MAAnBxC,KAAKsG,YAAsBtG,KAAKsG,WAAWxB,cAEvE,SAAa9B,GACXhD,KAAKwC,UAAYkB,EAAAA,sBAAsBV,oCAK3C5C,OAAA2C,eAAM6C,EAANzF,UAAA,2BACI,MAAOH,MAAKyC,WAAczC,KAAKsG,YAActG,KAAKsG,WAAWN,cAE/D,SAAahD,GACXhD,KAAKyC,UAAYiB,EAAAA,sBAAsBV,oCAczC5C,OAAF2C,eAAM6C,EAANzF,UAAA,eAAE,WAAwB,OAAUH,KAAK2G,IAAM3G,KAAK0G,WAApD,0CAiDEd,EAAFzF,UAAAkH,MAAE,WACErH,KAAKwG,cAAcc,SAAStH,KAAKuH,cAAcC,cAAe,aAQhE5B,EAAFzF,UAAAmE,cAAE,WAGEtE,KAAKgC,gBAAgBwC,gBAGvBoB,EAAFzF,UAAAsH,SAAE,WACMzH,KAAKsG,aAEPtG,KAAKwD,QAAUxD,KAAKsG,WAAWtD,QAAUhD,KAAKmC,OAE9CnC,KAAKgE,KAAOhE,KAAKsG,WAAWtC,OAIhC4B,EAAFzF,UAAAuH,gBAAE,WAAA,GAAFzF,GAAAjC,IACIA,MAAKwG,cACFmB,QAAQ3H,KAAKuH,cAAcC,eAC3BI,UAAU,SAAAC,GAAe,MAAA5F,GAAK6F,oBAAoBD,MAGvDjC,EAAFzF,UAAA4H,YAAE,WACE/H,KAAKwG,cAAcwB,eAAehI,KAAKuH,cAAcC,eACrDxH,KAAKiH,kCAICrB,EAAVzF,UAAA+D,4BACI,GAAM+D,GAAQ,GAAIrG,EAClBqG,GAAM7D,OAASpE,KACfiI,EAAMjF,MAAQhD,KAAKmC,OACnBnC,KAAK4C,OAAOyB,KAAK4D,IAGnBrC,EAAFzF,UAAA+H,kBAAE,WACE,MAAOlI,MAAKmI,eAAiBnI,KAAK8E,UAGpCc,EAAFzF,UAAAiI,cAAE,SAAcH,GAQZA,EAAMI,mBAORzC,EAAFzF,UAAAmI,eAAE,SAAeL,GAIbA,EAAMI,iBAEN,IAAME,GAAoBvI,KAAKsG,YAActG,KAAKgD,OAAShD,KAAKsG,WAAWtD,KAC3EhD,MAAKwD,SAAU,EACfxD,KAAKkE,mBAEDlE,KAAKsG,aACPtG,KAAKsG,WAAW5D,8BAA8B1C,KAAKgD,OACnDhD,KAAKsG,WAAW1C,SACZ2E,GACFvI,KAAKsG,WAAWpC,qBAMd0B,EAAVzF,UAAA2H,oBAAA,SAA8BD,GACrB7H,KAAKwI,cAAgC,aAAhBX,EAEdA,IACN7H,KAAKsG,YACPtG,KAAKsG,WAAW1C,SAGd5D,KAAKwI,eACPxI,KAAKwI,aAAaC,UAClBzI,KAAKwI,aAAe,OARtBxI,KAAKwI,aAAexI,KAAK0I,QAAQC,OAAO,EAAG,EAAjDC,GAAqDC,YAAY,GAAS7I,KAAK6G,gCAjR/E9B,KAAC+D,EAAAA,UAAD7D,OAAAC,SAAA,mBACE6D,SAAU,w5BACVC,QAAF,gvCACExD,QAAF,QAAA,iBACEyD,cAAFC,EAAAA,kBAAAC,KACEC,qBAAF,EACEjE,SAAF,iBACEE,MACFE,MAAA,mBACM8D,4BAAN,UACIC,6BAAJ,WACIC,YAAJ,sDAMAC,gBAAAC,EAAAA,wBAAAC,2GAnQA3E,KAAaU,EAAAA,oBAlEbV,KAAE4E,EAAAA,eAJF5E,KAAE6E,EAAAA,6BALFhE,EAAAiE,0DAwVAC,YAAA/E,KAAAe,EAAAA,MAAAb,MAAA,gBAGA8E,iBAAAhF,KAAAe,EAAAA,MAAAb,MAAA,qBAGAzB,UAAAuB,KAAAe,EAAAA,QAGA9C,QAAA+B,KAAAe,EAAAA,QAGAC,QAAAhB,KAAAe,EAAAA,QAyBA5C,gBAAA6B,KAAAe,EAAAA,QAwBAhB,WAAAC,KAAAe,EAAAA,QAcAE,WAAAjB,KAAAe,EAAAA,QAUAlD,SAAAmC,KAAAW,EAAAA,SASAgD,UAAA3D,KAAAiF,EAAAA,UAAA/E,MAAAgF,EAAAA,aAaA1C,gBAAAxC,KAAAiF,EAAAA,UAAA/E,MAAA,YAiCAW,GA9eAO,GCQA+D,EAAA,yBARA,sBAeAnF,KAACoF,EAAAA,SAADlF,OACEmF,SAAUC,EAAAA,aAAcC,EAAAA,gBAAiBC,EAAAA,gBAAiBC,EAAAA,YAC1DC,SAAU/I,EAAekE,EAAgB2E,EAAAA,iBACzCnF,WAAYsF,EAAAA,sCACZC,cAAejJ,EAAekE,6CAnBhCsE"}