{"version":3,"file":"material-snack-bar.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","_applyConfigDefaults","config","tslib_1.__assign","MatSnackBarConfig","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","MatSnackBarRef","containerInstance","_overlayRef","_this","_afterClosed","Subject","_afterOpened","_onAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","closeWithAction","next","complete","_dismissAfter","duration","setTimeout","_open","dispose","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","politeness","announcementMessage","direction","data","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","trigger","transition","style","opacity","animate","COMPLEX","STANDARD_CURVE","snackBarState","state","transform","SimpleSnackBar","snackBarRef","action","defineProperty","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","host","[@contentFade]","class","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_super","_destroyed","_animationState","tslib_1.__extends","attachComponentPortal","portal","_portalOutlet","hasAttached","Error","element","nativeElement","snackBarConfig","panelClass","extraClasses","_setCssClasses","classList","add","attachTemplatePortal","onAnimationEnd","event","fromState","toState","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","take","isArray","forEach","cssClass","role","[@state]","(@state.done)","ChangeDetectorRef","propDecorators","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","value","openFromComponent","component","_config","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","viewContainerRef","containerRef","attach","instance","_createOverlay","container","injector","_createInjector","undefined","contentRef","observe","Breakpoints","Handset","takeUntil","detachments","matches","overlayElement","remove","overlayConfig","OverlayConfig","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","decorators","Optional","SkipSelf","MatSnackBarModule","NgModule","imports","OverlayModule","PortalModule","CommonModule","MatCommonModule","LayoutModule","exports","declarations","entryComponents","providers","LIVE_ANNOUNCER_PROVIDER"],"mappings":"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"}