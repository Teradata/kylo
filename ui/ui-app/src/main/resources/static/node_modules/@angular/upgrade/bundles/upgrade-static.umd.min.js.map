{"version":3,"sources":["upgrade-static.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","static","core","_angular_platformBrowser","this","_angular_core","noNg","Error","setAngularLib","setAngularJSGlobal","getAngularLib","getAngularJSGlobal","angular","controllerKey","name","directiveNormalize","replace","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","_","letter","toUpperCase","getComponentName","component","overriddenName","toString","split","isFunction","value","supportsNgModel","writeValue","registerOnChange","hookupNgModel","ngModel","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","strictEquals","val1","val2","groupNodesBySelector","ngContentSelectors","nodes","projectableNodes","i","ii","length","j","jj","node","ngContentIndex","findMatchingNgContentIndex","push","element","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","_matches","elProto","Element","prototype","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","downgradeComponent","info","directiveFactory","$compile","$injector","$parse","ngZone","needsNgZone","wrapCallback","cb","restrict","terminal","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","link","scope","attrs","required","parentInjector","ranAsync","lazyModuleRef","get","LAZY_MODULE_REF","injector","promise","doDowngrade","componentFactoryResolver","ComponentFactoryResolver","componentFactory","resolveComponentFactory","injectorPromise","ParentInjectorPromise","facade","DowngradeComponentAdapter","compileContents","createComponent","setupInputs","propagateDigest","setupOutputs","registerCleanup","resolve","getInjector","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","isThenable","then","$COMPILE","$INJECTOR","$PARSE","obj","downgradeInjectable","token","INJECTOR_KEY","setTempInjectorRef","tempInjectorRef","injectorFactory","rootScopeFactory","compileFactory","parseFactory","downgradeModule","moduleFactoryOrBootstrapFn","LAZY_MODULE_NAME","UPGRADE_MODULE_NAME","bootstrapFn","extraProviders","platformBrowser","bootstrapModuleFactory","module$1","result","angular1Providers","ref","NgAdapterInjector","getOrCall","property","isMap","Array","isArray","notSupported","feature","bootstrap","version","resumeBootstrap","getTestability","window","hasOwnProperty","e","modules","config","prefix","dependencies","$CONTROLLER","$SCOPE","PropertyBinding","prop","attr","parseBinding","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","substr","onAttr","bindAttr","bindonAttr","INITIAL_VALUE","__UNINITIALIZED__","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","_this","compiledProjectableNodes","groupProjectableNodes","linkFns","map","empty","forEach","linkFn","clone","append","childInjector","Injector","create","provide","useValue","componentRef","changeDetector","changeDetectorRef","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","inputs","this_1","input","propName","templateName","expr","observeFn_1","prevValue","currValue","updateInput","$observe","unwatch_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","unwatch_2","ApplicationRef","attachView","hostView","outputs","this_2","output","assignExpr","substring","getter_1","setter_1","assign","emitter","subscribe","next","v","$event","destroyComponentRef","destroy","on","$destroy","unregisterApplication","SimpleChange","contents","injectorKey","callbacks","data","callback","VERSION","Version","useFactory","deps","modInjector","notFoundValue","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","getTemplate","fetchRemoteTemplate","undefined","template","templateUrl","$templateCache_1","url_1","Promise","reject","status","response","put","buildController","controllerType","$scope","locals","controller","controllerAs","compileTemplate","compileHtml","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","$template","attachChildrenFn","cloneAttach","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","nodeName","toLowerCase","filter","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","parent","inheritedData","INITIAL_VALUE$1","Bindings","twoWayBoundProperties","twoWayBoundLastValues","expressionBoundProperties","propertyToOutputMap","UpgradeComponent","helper","bindings","initializeBindings","$parentScope","$componentScope","initializeOutputs","ngOnInit","attachChildNodes","bindingDestination","bindOutputs","pendingChanges","forwardChanges","$onInit","$doCheck","callDoCheck","unregisterDoCheckWatcher","$parent","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ngDoCheck","idx","newValue","oldValue","ɵlooseIdentical","outputName","emit","ngOnDestroy","$onDestroy","btcIsObject","context","definition","bindingType","json","JSON","stringify","concat","EventEmitter","currentValue","$onChanges","UpgradeModule","element$$1","INIT_MODULE_NAME","upgradeModule","$provide","has","decorator","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","intervalDelegate","wrappedInterval","fn","delay","count","invokeApply","pass","_i","arguments","runOutsideAngular","apply","args","setTimeout","cancel","$rootScope","subscription","onMicrotaskEmpty","$digest","$on","unsubscribe","windowAngular","originalResumeBootstrap_1","ngZone_1","decorators","type","NgModule","providers","ctorParameters","ɵe","ɵc","ɵa","ɵd","ɵb","defineProperty"],"mappings":"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","file":"upgrade-static.umd.min.js","sourcesContent":["/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/upgrade/static', ['exports', '@angular/core', '@angular/platform-browser'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.upgrade = global.ng.upgrade || {}, global.ng.upgrade.static = {}),global.ng.core,global._angular_platformBrowser));\n}(this, (function (exports,_angular_core,_angular_platformBrowser) { 'use strict';\n\n/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar angular = {\n    bootstrap: noNg,\n    module: noNg,\n    element: noNg,\n    version: noNg,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n};\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = window.angular;\n    }\n}\ncatch (e) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use {@link setAngularJSGlobal} instead.\n */\nfunction setAngularLib(ng) {\n    setAngularJSGlobal(ng);\n}\n/**\n * @deprecated Use {@link getAngularJSGlobal} instead.\n */\nfunction getAngularLib() {\n    return getAngularJSGlobal();\n}\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n *\n * @stable\n */\nfunction setAngularJSGlobal(ng) {\n    angular = ng;\n}\n/**\n * Returns the current AngularJS global.\n *\n * @stable\n */\nfunction getAngularJSGlobal() {\n    return angular;\n}\nvar bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\nvar module$1 = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nvar element = function (e) { return angular.element(e); };\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar $COMPILE = '$compile';\nvar $CONTROLLER = '$controller';\nvar $DELEGATE = '$delegate';\nvar $HTTP_BACKEND = '$httpBackend';\nvar $INJECTOR = '$injector';\nvar $INTERVAL = '$interval';\nvar $PARSE = '$parse';\nvar $PROVIDE = '$provide';\n\nvar $SCOPE = '$scope';\nvar $TEMPLATE_CACHE = '$templateCache';\n\nvar $$TESTABILITY = '$$testability';\n\n\nvar INJECTOR_KEY = '$$angularInjector';\nvar LAZY_MODULE_REF = '$$angularLazyModuleRef';\n\nvar REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nvar REQUIRE_NG_MODEL = '?ngModel';\nvar UPGRADE_MODULE_NAME = '$$UpgradeModule';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar PropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    PropertyBinding.prototype.parseBinding = function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n\nfunction controllerKey(name) {\n    return '$' + name + 'Controller';\n}\nfunction directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\n\nfunction getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return component.overriddenName || component.name || component.toString().split('\\n')[0];\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nfunction hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nfunction strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    DowngradeComponentAdapter.prototype.compileContents = function () {\n        var _this = this;\n        var compiledProjectableNodes = [];\n        var projectableNodes = this.groupProjectableNodes();\n        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n        this.element.empty();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone);\n                _this.element.append(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n        var childInjector = _angular_core.Injector.create([{ provide: $SCOPE, useValue: this.componentScope }], this.parentInjector);\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        // testability hook is commonly added during component bootstrap in\n        // packages/core/src/application_ref.bootstrap()\n        // in downgraded application, component creation will take place here as well as adding the\n        // testability hook.\n        var testability = this.componentRef.injector.get(_angular_core.Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(_angular_core.TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var attrs = this.attrs;\n        var inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var observeFn_1 = (function (prop) {\n                    var prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var unwatch_1 = this_1.componentScope.$watch(function () {\n                    unwatch_1();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var watchFn = (function (prop) {\n                    return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    };\n                })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                _this.component.ngOnChanges((inputChanges));\n            }\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (needsNgZone || !propagateDigest) {\n            var unwatch_2 = this.componentScope.$watch(function () {\n                unwatch_2();\n                unwatch_2 = null;\n                var appRef = _this.parentInjector.get(_angular_core.ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    DowngradeComponentAdapter.prototype.setupOutputs = function () {\n        var _this = this;\n        var attrs = this.attrs;\n        var outputs = this.componentFactory.outputs || [];\n        var _loop_2 = function (j) {\n            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var expr = null;\n            var assignExpr = false;\n            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                expr = attrs[output.onAttr];\n            }\n            else if (attrs.hasOwnProperty(output.parenAttr)) {\n                expr = attrs[output.parenAttr];\n            }\n            else if (attrs.hasOwnProperty(bindonAttr)) {\n                expr = attrs[bindonAttr];\n                assignExpr = true;\n            }\n            else if (attrs.hasOwnProperty(bracketParenAttr)) {\n                expr = attrs[bracketParenAttr];\n                assignExpr = true;\n            }\n            if (expr != null && assignExpr != null) {\n                var getter_1 = this_2.$parse(expr);\n                var setter_1 = getter_1.assign;\n                if (assignExpr && !setter_1) {\n                    throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n                }\n                var emitter = this_2.component[output.prop];\n                if (emitter) {\n                    emitter.subscribe({\n                        next: assignExpr ? function (v) { return setter_1(_this.scope, v); } :\n                            function (v) { return getter_1(_this.scope, { '$event': v }); }\n                    });\n                }\n                else {\n                    throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this_2.componentFactory.componentType) + \"'!\");\n                }\n            }\n        };\n        var this_2 = this;\n        for (var j = 0; j < outputs.length; j++) {\n            _loop_2(j);\n        }\n    };\n    DowngradeComponentAdapter.prototype.registerCleanup = function () {\n        var _this = this;\n        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        this.element.on('$destroy', function () {\n            _this.componentScope.$destroy();\n            _this.componentRef.injector.get(_angular_core.TestabilityRegistry)\n                .unregisterApplication(_this.componentRef.location.nativeElement);\n            destroyComponentRef();\n        });\n    };\n    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new _angular_core.SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n        var ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, this.element.contents());\n    };\n    return DowngradeComponentAdapter;\n}());\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nfunction groupNodesBySelector(ngContentSelectors, nodes) {\n    var projectableNodes = [];\n    var wildcardNgContentIndex;\n    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var j = 0, jj = nodes.length; j < jj; ++j) {\n        var node = nodes[j];\n        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var ngContentIndices = [];\n    var wildcardNgContentIndex = -1;\n    for (var i = 0; i < ngContentSelectors.length; i++) {\n        var selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar _matches;\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var elProto = Element.prototype;\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an Angular component to be used from AngularJS.\n *\n * @howToUse\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @description\n *\n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * The parameter contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n *\n * @experimental\n */\nfunction downgradeComponent(info) {\n    var directiveFactory = function ($compile, $injector, $parse) {\n        // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n        // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n        // (except if explicitly escaped, in which case we shouldn't force it back in).\n        // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n        // Angular zone.\n        var needsNgZone = false;\n        var wrapCallback = function (cb) { return cb; };\n        var ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var ngModel = required[1];\n                var parentInjector = required[0];\n                var ranAsync = false;\n                if (!parentInjector) {\n                    var lazyModuleRef = $injector.get(LAZY_MODULE_REF);\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                }\n                var doDowngrade = function (injector) {\n                    var componentFactoryResolver = injector.get(_angular_core.ComponentFactoryResolver);\n                    var componentFactory = (componentFactoryResolver.resolveComponentFactory(info.component));\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    var injectorPromise = new ParentInjectorPromise(element);\n                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(_angular_core.NgZone);\n                        wrapCallback = function (cb) {\n                            return function () {\n                                return _angular_core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                            };\n                        };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar ParentInjectorPromise = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        // Store the promise on the element.\n        // Store the promise on the element.\n        element.data(this.injectorKey, this);\n    }\n    ParentInjectorPromise.prototype.then = function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    ParentInjectorPromise.prototype.resolve = function (injector) {\n        this.injector = injector;\n        // Store the real injector on the element.\n        // Store the real injector on the element.\n        this.element.data(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = (null);\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nfunction isThenable(obj) {\n    return isFunction(obj.then);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allow an Angular service to be accessible from AngularJS.\n *\n * @howToUse\n *\n * First ensure that the service to be downgraded is provided in an {@link NgModule}\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app {@link NgModule}\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/module.ts region=\"example-app\"}\n *\n * @description\n *\n * Takes a `token` that identifies a service provided from Angular.\n *\n * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * The factory function provides access to the Angular service that\n * is identified by the `token` parameter.\n *\n * @experimental\n */\nfunction downgradeInjectable(token) {\n    var factory = function (i) { return i.get(token); };\n    factory['$inject'] = [INJECTOR_KEY];\n    return factory;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * @stable\n */\nvar VERSION = new _angular_core.Version('5.1.3');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// We have to do a little dance to get the ng1 injector into the module injector.\n// We store the ng1 injector so that the provider in the module injector can access it\n// Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n// the stored injector and release the reference to it.\nvar tempInjectorRef;\nfunction setTempInjectorRef(injector) {\n    tempInjectorRef = injector;\n}\nfunction injectorFactory() {\n    if (!tempInjectorRef) {\n        throw new Error('Trying to get the AngularJS injector before it being set.');\n    }\n    var injector = tempInjectorRef;\n    tempInjectorRef = null; // clear the value to prevent memory leaks\n    return injector;\n}\nfunction rootScopeFactory(i) {\n    return i.get('$rootScope');\n}\nfunction compileFactory(i) {\n    return i.get('$compile');\n}\nfunction parseFactory(i) {\n    return i.get('$parse');\n}\nvar angular1Providers = [\n    // We must use exported named functions for the ng2 factories to keep the compiler happy:\n    // > Metadata collected contains an error that will be reported at runtime:\n    // >   Function calls are not supported.\n    // >   Consider replacing the function or lambda with a reference to an exported function\n    { provide: '$injector', useFactory: injectorFactory, deps: [] },\n    { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },\n    { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },\n    { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NgAdapterInjector = /** @class */ (function () {\n    function NgAdapterInjector(modInjector) {\n        this.modInjector = modInjector;\n    }\n    // When Angular locate a service in the component injector tree, the not found value is set to\n    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n    // injector.\n    // AngularJS only supports a single tree and should always check the module injector.\n    // When Angular locate a service in the component injector tree, the not found value is set to\n    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n    // injector.\n    // AngularJS only supports a single tree and should always check the module injector.\n    NgAdapterInjector.prototype.get = \n    // When Angular locate a service in the component injector tree, the not found value is set to\n    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n    // injector.\n    // AngularJS only supports a single tree and should always check the module injector.\n    function (token, notFoundValue) {\n        if (notFoundValue === _angular_core.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            return notFoundValue;\n        }\n        return this.modInjector.get(token, notFoundValue);\n    };\n    return NgAdapterInjector;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @experimental */\nfunction downgradeModule(moduleFactoryOrBootstrapFn) {\n    var LAZY_MODULE_NAME = UPGRADE_MODULE_NAME + '.lazy';\n    var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n        moduleFactoryOrBootstrapFn :\n        function (extraProviders) {\n            return _angular_platformBrowser.platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n        };\n    var injector;\n    // Create an ng1 module to bootstrap.\n    module$1(LAZY_MODULE_NAME, [])\n        .factory(INJECTOR_KEY, function () {\n        if (!injector) {\n            throw new Error('Trying to get the Angular injector before bootstrapping an Angular module.');\n        }\n        return injector;\n    })\n        .factory(LAZY_MODULE_REF, [\n        $INJECTOR,\n        function ($injector) {\n            setTempInjectorRef($injector);\n            var result = {\n                needsNgZone: true,\n                promise: bootstrapFn(angular1Providers).then(function (ref) {\n                    injector = result.injector = new NgAdapterInjector(ref.injector);\n                    injector.get($INJECTOR);\n                    return injector;\n                })\n            };\n            return result;\n        }\n    ]);\n    return LAZY_MODULE_NAME;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Constants\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n// Classes\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    UpgradeHelper.getDirective = function ($injector, name) {\n        var directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n            var url_1 = getOrCall(directive.templateUrl);\n            var template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var $httpBackend = $injector.get($HTTP_BACKEND);\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var locals = { '$scope': $scope, '$element': this.$element };\n        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n        this.$element.data(controllerKey((this.directive.name)), controller);\n        return controller;\n    };\n    UpgradeHelper.prototype.compileTemplate = function (template) {\n        if (template === undefined) {\n            template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n        }\n        return this.compileHtml(template);\n    };\n    UpgradeHelper.prototype.prepareTransclusion = function () {\n        var _this = this;\n        var transclude = this.directive.transclude;\n        var contentChildNodes = this.extractChildNodes();\n        var $template = contentChildNodes;\n        var attachChildrenFn = function (scope, cloneAttach) {\n            return cloneAttach($template, scope);\n        };\n        if (transclude) {\n            var slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var slotMap_1 = Object.create(null);\n                var filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var selector = transclude[slotName];\n                    var optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) {\n                        return cloneAttach(nodes, scope);\n                    };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n        var directiveRequire = this.getDirectiveRequire();\n        var requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var requiredControllersMap_1 = requiredControllers;\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    UpgradeHelper.prototype.compileHtml = function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    UpgradeHelper.prototype.extractChildNodes = function () {\n        var childNodes = [];\n        var childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    UpgradeHelper.prototype.getDirectiveRequire = function () {\n        var require = this.directive.require || ((this.directive.controller && this.directive.name));\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var value = require[key];\n                var match = (value.match(REQUIRE_PREFIX_RE));\n                var name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = (_this.resolveRequire(require[key])); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var match = (require.match(REQUIRE_PREFIX_RE));\n            var inheritType = match[1] || match[3];\n            var name_1 = require.substring(match[0].length);\n            var isOptional = !!match[2];\n            var searchParents = !!inheritType;\n            var startOnParent = inheritType === '^^';\n            var ctrlKey = controllerKey(name_1);\n            var elem = startOnParent ? this.$element.parent() : this.$element;\n            var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar INITIAL_VALUE$1 = {\n    __UNINITIALIZED__: true\n};\nvar Bindings = /** @class */ (function () {\n    function Bindings() {\n        this.twoWayBoundProperties = [];\n        this.twoWayBoundLastValues = [];\n        this.expressionBoundProperties = [];\n        this.propertyToOutputMap = {};\n    }\n    return Bindings;\n}());\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an AngularJS component to be used from Angular.\n *\n * @howToUse\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-hero\"}\n *\n * We must create a {@link Directive} that will make this AngularJS component\n * available inside Angular templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the {@link UpgradeComponent}\n * base class but also provide an {@link Directive `@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the {@link ElementRef} and {@link Injector} for the component wrapper\n *\n * @description\n *\n * A helper class that should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * @experimental\n */\nvar UpgradeComponent = /** @class */ (function () {\n    /**\n     * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n     * Instead you should derive a new class from this one and call the super constructor\n     * from the base class.\n     *\n     * {@example upgrade/static/ts/module.ts region=\"ng1-hero-wrapper\" }\n     *\n     * * The `name` parameter should be the name of the AngularJS directive.\n     * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n     *   injection into the base class constructor.\n     *\n     * Note that we must manually implement lifecycle hooks that call through to the super class.\n     * This is because, at the moment, the AoT compiler is not able to tell that the\n     * `UpgradeComponent`\n     * already implements them and so does not wire up calls to them at runtime.\n     */\n    function UpgradeComponent(name, elementRef, injector) {\n        this.name = name;\n        this.elementRef = elementRef;\n        this.injector = injector;\n        this.helper = new UpgradeHelper(injector, name, elementRef);\n        this.$injector = this.helper.$injector;\n        this.element = this.helper.element;\n        this.$element = this.helper.$element;\n        this.directive = this.helper.directive;\n        this.bindings = this.initializeBindings(this.directive);\n        // We ask for the AngularJS scope from the Angular injector, since\n        // we will put the new component scope onto the new injector for each component\n        var $parentScope = injector.get($SCOPE);\n        // QUESTION 1: Should we create an isolated scope if the scope is only true?\n        // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n        this.$componentScope = $parentScope.$new(!!this.directive.scope);\n        this.initializeOutputs();\n    }\n    UpgradeComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // Collect contents, insert and compile template\n        var attachChildNodes = this.helper.prepareTransclusion();\n        var linkFn = this.helper.compileTemplate();\n        // Instantiate controller\n        var controllerType = this.directive.controller;\n        var bindToController = this.directive.bindToController;\n        if (controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n        }\n        else if (bindToController) {\n            throw new Error(\"Upgraded directive '\" + this.directive.name + \"' specifies 'bindToController' but no controller.\");\n        }\n        // Set up outputs\n        this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n        this.bindOutputs();\n        // Require other controllers\n        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onChanges\n        if (this.pendingChanges) {\n            this.forwardChanges(this.pendingChanges);\n            this.pendingChanges = null;\n        }\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Hook: $doCheck\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };\n            this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n            callDoCheck();\n        }\n        // Linking\n        var link = this.directive.link;\n        var preLink = (typeof link == 'object') && link.pre;\n        var postLink = (typeof link == 'object') ? link.post : link;\n        var attrs = NOT_SUPPORTED;\n        var transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.$componentScope, (null), { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    UpgradeComponent.prototype.ngOnChanges = function (changes) {\n        if (!this.bindingDestination) {\n            this.pendingChanges = changes;\n        }\n        else {\n            this.forwardChanges(changes);\n        }\n    };\n    UpgradeComponent.prototype.ngDoCheck = function () {\n        var _this = this;\n        var twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n        var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n        var propertyToOutputMap = this.bindings.propertyToOutputMap;\n        twoWayBoundProperties.forEach(function (propName, idx) {\n            var newValue = _this.bindingDestination[propName];\n            var oldValue = twoWayBoundLastValues[idx];\n            if (!_angular_core.ɵlooseIdentical(newValue, oldValue)) {\n                var outputName = propertyToOutputMap[propName];\n                var eventEmitter = _this[outputName];\n                eventEmitter.emit(newValue);\n                twoWayBoundLastValues[idx] = newValue;\n            }\n        });\n    };\n    UpgradeComponent.prototype.ngOnDestroy = function () {\n        if (isFunction(this.unregisterDoCheckWatcher)) {\n            this.unregisterDoCheckWatcher();\n        }\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n            this.controllerInstance.$onDestroy();\n        }\n        this.$componentScope.$destroy();\n    };\n    UpgradeComponent.prototype.initializeBindings = function (directive) {\n        var _this = this;\n        var btcIsObject = typeof directive.bindToController === 'object';\n        if (btcIsObject && Object.keys((directive.scope)).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time is not supported.\");\n        }\n        var context = (btcIsObject) ? directive.bindToController : directive.scope;\n        var bindings = new Bindings();\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var definition = context[propName];\n                var bindingType = definition.charAt(0);\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        // We don't need to do anything special. They will be defined as inputs on the\n                        // upgraded component facade and the change propagation will be handled by\n                        // `ngOnChanges()`.\n                        break;\n                    case '=':\n                        bindings.twoWayBoundProperties.push(propName);\n                        bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);\n                        bindings.propertyToOutputMap[propName] = propName + 'Change';\n                        break;\n                    case '&':\n                        bindings.expressionBoundProperties.push(propName);\n                        bindings.propertyToOutputMap[propName] = propName;\n                        break;\n                    default:\n                        var json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n        return bindings;\n    };\n    UpgradeComponent.prototype.initializeOutputs = function () {\n        var _this = this;\n        // Initialize the outputs for `=` and `&` bindings\n        this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n            .forEach(function (propName) {\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            _this[outputName] = new _angular_core.EventEmitter();\n        });\n    };\n    UpgradeComponent.prototype.bindOutputs = function () {\n        var _this = this;\n        // Bind `&` bindings to the corresponding outputs\n        this.bindings.expressionBoundProperties.forEach(function (propName) {\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            var emitter = _this[outputName];\n            _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };\n        });\n    };\n    UpgradeComponent.prototype.forwardChanges = function (changes) {\n        var _this = this;\n        // Forward input changes to `bindingDestination`\n        Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });\n        if (isFunction(this.bindingDestination.$onChanges)) {\n            this.bindingDestination.$onChanges(changes);\n        }\n    };\n    return UpgradeComponent;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows AngularJS and Angular components to be used together inside a hybrid upgrade\n * application, which supports AoT compilation.\n *\n * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n *    that it can be used in an Angular template. See {@link UpgradeComponent}.\n * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n *    that it can be used in an AngularJS template. See {@link downgradeComponent}.\n * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n *    service so that it can be injected into an Angular context. See\n *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n *    so that it can be injected into an AngularJS context. See {@link downgradeInjectable}.\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application. See the\n *    {@link UpgradeModule#example example} below.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside the Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n *    defining an Angular directive, which bootstraps the AngularJS component at its location\n *    in the DOM. See {@link UpgradeComponent}.\n * 6. An Angular component can be \"downgraded\"\" to an AngularJS component. This is achieved by\n *    defining an AngularJS directive, which bootstraps the Angular component at its location\n *    in the DOM. See {@link downgradeComponent}.\n * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n *    the framework doing the instantiation. The other framework then instantiates and owns the\n *    view for that component.\n *    a. This implies that the component bindings will always follow the semantics of the\n *       instantiation framework.\n *    b. The DOM attributes are parsed by the framework that owns the current template. So\n * attributes\n *       in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.\n *    c. However the template binding syntax will always use the Angular style, e.g. square\n *       brackets (`[...]`) for property binding.\n * 8. AngularJS is always bootstrapped first and owns the root component.\n * 9. The new application is running in an Angular zone, and therefore it no longer needs calls\n * to\n *    `$apply()`.\n *\n * @howToUse\n *\n * `import {UpgradeModule} from '@angular/upgrade/static';`\n *\n * ## Example\n * Import the {@link UpgradeModule} into your top level {@link NgModule Angular `NgModule`}.\n *\n * {@example upgrade/static/ts/module.ts region='ng2-module'}\n *\n * Then bootstrap the hybrid upgrade app's module, get hold of the {@link UpgradeModule} instance\n * and use it to bootstrap the top level [AngularJS\n * module](https://docs.angularjs.org/api/ng/type/angular.Module).\n *\n * {@example upgrade/static/ts/module.ts region='bootstrap'}\n *\n * {@a upgrading-an-angular-1-service}\n *\n * ## Upgrading an AngularJS service\n *\n * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n * following recipe:\n *\n * Let's say you have an AngularJS service:\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-title-case-service\"}\n *\n * Then you should define an Angular provider to be included in your {@link NgModule} `providers`\n * property.\n *\n * {@example upgrade/static/ts/module.ts region=\"upgrade-ng1-service\"}\n *\n * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n * or service.\n *\n * {@example upgrade/static/ts/module.ts region=\"use-ng1-upgraded-service\"}\n *\n * @description\n *\n * This class is an `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * ## Core AngularJS services\n * Importing this {@link NgModule} will add providers for the core\n * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n *\n * ## Bootstrap\n * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n * method, which you use to bootstrap the top level AngularJS module onto an element in the\n * DOM for the hybrid upgrade app.\n *\n * It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n * bootstrap {@link NgZone} and the\n * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n *\n * @experimental\n */\nvar UpgradeModule = /** @class */ (function () {\n    function UpgradeModule(/** The root {@link Injector} for the upgrade application. */\n        /** The root {@link Injector} for the upgrade application. */\n        injector, /** The bootstrap zone for the upgrade application */\n        ngZone) {\n        this.ngZone = ngZone;\n        this.injector = new NgAdapterInjector(injector);\n    }\n    /**\n     * Bootstrap an AngularJS application from this NgModule\n     * @param element the element on which to bootstrap the AngularJS application\n     * @param [modules] the AngularJS modules to bootstrap for this application\n     * @param [config] optional extra AngularJS bootstrap configuration\n     */\n    /**\n       * Bootstrap an AngularJS application from this NgModule\n       * @param element the element on which to bootstrap the AngularJS application\n       * @param [modules] the AngularJS modules to bootstrap for this application\n       * @param [config] optional extra AngularJS bootstrap configuration\n       */\n    UpgradeModule.prototype.bootstrap = /**\n       * Bootstrap an AngularJS application from this NgModule\n       * @param element the element on which to bootstrap the AngularJS application\n       * @param [modules] the AngularJS modules to bootstrap for this application\n       * @param [config] optional extra AngularJS bootstrap configuration\n       */\n    function (element$$1, modules, config /*angular.IAngularBootstrapConfig*/) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n        // Create an ng1 module to bootstrap\n        var initModule = module$1(INIT_MODULE_NAME, [])\n            .value(INJECTOR_KEY, this.injector)\n            .factory(LAZY_MODULE_REF, [\n            INJECTOR_KEY,\n            function (injector) { return ({ injector: injector, needsNgZone: false }); }\n        ])\n            .config([\n            $PROVIDE, $INJECTOR,\n            function ($provide, $injector) {\n                if ($injector.has($$TESTABILITY)) {\n                    $provide.decorator($$TESTABILITY, [\n                        $DELEGATE,\n                        function (testabilityDelegate) {\n                            var originalWhenStable = testabilityDelegate.whenStable;\n                            var injector = _this.injector;\n                            // Cannot use arrow function below because we need the context\n                            var newWhenStable = function (callback) {\n                                originalWhenStable.call(testabilityDelegate, function () {\n                                    var ng2Testability = injector.get(_angular_core.Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback();\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n                if ($injector.has($INTERVAL)) {\n                    $provide.decorator($INTERVAL, [\n                        $DELEGATE,\n                        function (intervalDelegate) {\n                            // Wrap the $interval service so that setInterval is called outside NgZone,\n                            // but the callback is still invoked within it. This is so that $interval\n                            // won't block stability, which preserves the behavior from AngularJS.\n                            var wrappedInterval = function (fn, delay, count, invokeApply) {\n                                var pass = [];\n                                for (var _i = 4; _i < arguments.length; _i++) {\n                                    pass[_i - 4] = arguments[_i];\n                                }\n                                return _this.ngZone.runOutsideAngular(function () {\n                                    return intervalDelegate.apply(void 0, [function () {\n                                            var args = [];\n                                            for (var _i = 0; _i < arguments.length; _i++) {\n                                                args[_i] = arguments[_i];\n                                            }\n                                            // Run callback in the next VM turn - $interval calls\n                                            // $rootScope.$apply, and running the callback in NgZone will\n                                            // cause a '$digest already in progress' error if it's in the\n                                            // same vm turn.\n                                            setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, args); }); });\n                                        }, delay, count, invokeApply].concat(pass));\n                                });\n                            };\n                            wrappedInterval['cancel'] = intervalDelegate.cancel;\n                            return wrappedInterval;\n                        }\n                    ]);\n                }\n            }\n        ])\n            .run([\n            $INJECTOR,\n            function ($injector) {\n                _this.$injector = $injector;\n                // Initialize the ng1 $injector provider\n                setTempInjectorRef($injector);\n                _this.injector.get($INJECTOR);\n                // Put the injector on the DOM, so that it can be \"required\"\n                // Put the injector on the DOM, so that it can be \"required\"\n                element(element$$1).data(controllerKey(INJECTOR_KEY), _this.injector);\n                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                // We need to do this in the next tick so that we don't prevent the bootup\n                // stabilizing\n                setTimeout(function () {\n                    var $rootScope = $injector.get('$rootScope');\n                    var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () { return $rootScope.$digest(); });\n                    $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                }, 0);\n            }\n        ]);\n        var upgradeModule = module$1(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var windowAngular = window['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        // Bootstrap the AngularJS application inside our zone\n        this.ngZone.run(function () { bootstrap(element$$1, [upgradeModule.name], config); });\n        // Patch resumeBootstrap() to run inside the ngZone\n        if (windowAngular.resumeBootstrap) {\n            var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n            var ngZone_1 = this.ngZone;\n            windowAngular.resumeBootstrap = function () {\n                var _this = this;\n                var args = arguments;\n                windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                ngZone_1.run(function () { windowAngular.resumeBootstrap.apply(_this, args); });\n            };\n        }\n    };\n    UpgradeModule.decorators = [\n        { type: _angular_core.NgModule, args: [{ providers: [angular1Providers] },] },\n    ];\n    /** @nocollapse */\n    UpgradeModule.ctorParameters = function () { return [\n        { type: _angular_core.Injector, },\n        { type: _angular_core.NgZone, },\n    ]; };\n    return UpgradeModule;\n}());\n\nexports.ɵe = angular1Providers;\nexports.ɵc = compileFactory;\nexports.ɵa = injectorFactory;\nexports.ɵd = parseFactory;\nexports.ɵb = rootScopeFactory;\nexports.getAngularJSGlobal = getAngularJSGlobal;\nexports.getAngularLib = getAngularLib;\nexports.setAngularJSGlobal = setAngularJSGlobal;\nexports.setAngularLib = setAngularLib;\nexports.downgradeComponent = downgradeComponent;\nexports.downgradeInjectable = downgradeInjectable;\nexports.VERSION = VERSION;\nexports.downgradeModule = downgradeModule;\nexports.UpgradeComponent = UpgradeComponent;\nexports.UpgradeModule = UpgradeModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade-static.umd.js.map\n"]}