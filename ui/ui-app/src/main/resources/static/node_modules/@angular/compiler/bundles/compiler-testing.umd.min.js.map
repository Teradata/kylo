{"version":3,"sources":["compiler-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","compiler","testing","this","_angular_compiler","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","remove","list","el","index","indexOf","splice","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MockResourceLoader","_super","_this","apply","arguments","_expectations","_definitions","Map","_requests","get","url","request","_PendingRequest","push","getPromise","hasPendingRequests","length","expect","response","expectation","_Expectation","when","set","flush","Error","_processRequest","shift","verifyNoOutstandingExpectations","urls","i","join","complete","has","ResourceLoader","promise","Promise","res","rej","resolve","reject","MockSchemaRegistry","existingProperties","attrPropMapping","existingElements","invalidProperties","invalidAttributes","hasProperty","tagName","property","schemas","value","hasElement","schemaMetas","toLowerCase","allKnownElementNames","keys","securityContext","selector","isAttribute","core","SecurityContext","NONE","getMappedPropName","attrName","getDefaultComponentElementName","validateProperty","name","error","msg","validateAttribute","normalizeAnimationStyleProperty","propName","normalizeAnimationStyleValue","camelCaseProp","userProvidedProp","val","toString","MockDirectiveResolver","reflector","call","_directives","type","throwIfNotFound","setDirective","metadata","DirectiveResolver","MockNgModuleResolver","_ngModules","setNgModule","NgModuleResolver","MockPipeResolver","refector","_pipes","setPipe","PipeResolver","defineProperty"],"mappings":"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","file":"compiler-testing.umd.min.js","sourcesContent":["/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/compiler/testing', ['exports', '@angular/compiler'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}, global.ng.compiler.testing = {}),global.ng.compiler));\n}(this, (function (exports,_angular_compiler) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock implementation of {\\@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nvar MockResourceLoader = /** @class */ (function (_super) {\n    __extends(MockResourceLoader, _super);\n    function MockResourceLoader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._expectations = [];\n        _this._definitions = new Map();\n        _this._requests = [];\n        return _this;\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    MockResourceLoader.prototype.get = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ request = new _PendingRequest(url);\n        this._requests.push(request);\n        return request.getPromise();\n    };\n    /**\n     * @return {?}\n     */\n    MockResourceLoader.prototype.hasPendingRequests = /**\n     * @return {?}\n     */\n    function () { return !!this._requests.length; };\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     */\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     * @param {?} url\n     * @param {?} response\n     * @return {?}\n     */\n    MockResourceLoader.prototype.expect = /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     * @param {?} url\n     * @param {?} response\n     * @return {?}\n     */\n    function (url, response) {\n        var /** @type {?} */ expectation = new _Expectation(url, response);\n        this._expectations.push(expectation);\n    };\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     */\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     * @param {?} url\n     * @param {?} response\n     * @return {?}\n     */\n    MockResourceLoader.prototype.when = /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     * @param {?} url\n     * @param {?} response\n     * @return {?}\n     */\n    function (url, response) { this._definitions.set(url, response); };\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     */\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     * @return {?}\n     */\n    MockResourceLoader.prototype.flush = /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     * @return {?}\n     */\n    function () {\n        if (this._requests.length === 0) {\n            throw new Error('No pending requests to flush');\n        }\n        do {\n            this._processRequest(/** @type {?} */ ((this._requests.shift())));\n        } while (this._requests.length > 0);\n        this.verifyNoOutstandingExpectations();\n    };\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     */\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     * @return {?}\n     */\n    MockResourceLoader.prototype.verifyNoOutstandingExpectations = /**\n     * Throw an exception if any expectations have not been satisfied.\n     * @return {?}\n     */\n    function () {\n        if (this._expectations.length === 0)\n            return;\n        var /** @type {?} */ urls = [];\n        for (var /** @type {?} */ i = 0; i < this._expectations.length; i++) {\n            var /** @type {?} */ expectation = this._expectations[i];\n            urls.push(expectation.url);\n        }\n        throw new Error(\"Unsatisfied requests: \" + urls.join(', '));\n    };\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    MockResourceLoader.prototype._processRequest = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        var /** @type {?} */ url = request.url;\n        if (this._expectations.length > 0) {\n            var /** @type {?} */ expectation = this._expectations[0];\n            if (expectation.url == url) {\n                remove(this._expectations, expectation);\n                request.complete(expectation.response);\n                return;\n            }\n        }\n        if (this._definitions.has(url)) {\n            var /** @type {?} */ response = this._definitions.get(url);\n            request.complete(response == null ? null : response);\n            return;\n        }\n        throw new Error(\"Unexpected request \" + url);\n    };\n    return MockResourceLoader;\n}(_angular_compiler.ResourceLoader));\nvar _PendingRequest = /** @class */ (function () {\n    function _PendingRequest(url) {\n        var _this = this;\n        this.url = url;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /**\n     * @param {?} response\n     * @return {?}\n     */\n    _PendingRequest.prototype.complete = /**\n     * @param {?} response\n     * @return {?}\n     */\n    function (response) {\n        if (response == null) {\n            this.reject(\"Failed to load \" + this.url);\n        }\n        else {\n            this.resolve(response);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _PendingRequest.prototype.getPromise = /**\n     * @return {?}\n     */\n    function () { return this.promise; };\n    return _PendingRequest;\n}());\nvar _Expectation = /** @class */ (function () {\n    function _Expectation(url, response) {\n        this.url = url;\n        this.response = response;\n    }\n    return _Expectation;\n}());\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockSchemaRegistry = /** @class */ (function () {\n    function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n        this.existingProperties = existingProperties;\n        this.attrPropMapping = attrPropMapping;\n        this.existingElements = existingElements;\n        this.invalidProperties = invalidProperties;\n        this.invalidAttributes = invalidAttributes;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?} property\n     * @param {?} schemas\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.hasProperty = /**\n     * @param {?} tagName\n     * @param {?} property\n     * @param {?} schemas\n     * @return {?}\n     */\n    function (tagName, property, schemas) {\n        var /** @type {?} */ value = this.existingProperties[property];\n        return value === void 0 ? true : value;\n    };\n    /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.hasElement = /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    function (tagName, schemaMetas) {\n        var /** @type {?} */ value = this.existingElements[tagName.toLowerCase()];\n        return value === void 0 ? true : value;\n    };\n    /**\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.allKnownElementNames = /**\n     * @return {?}\n     */\n    function () { return Object.keys(this.existingElements); };\n    /**\n     * @param {?} selector\n     * @param {?} property\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.securityContext = /**\n     * @param {?} selector\n     * @param {?} property\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    function (selector, property, isAttribute) {\n        return _angular_compiler.core.SecurityContext.NONE;\n    };\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.getMappedPropName = /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    function (attrName) { return this.attrPropMapping[attrName] || attrName; };\n    /**\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.getDefaultComponentElementName = /**\n     * @return {?}\n     */\n    function () { return 'ng-component'; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.validateProperty = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.invalidProperties.indexOf(name) > -1) {\n            return { error: true, msg: \"Binding to property '\" + name + \"' is disallowed for security reasons\" };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.validateAttribute = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.invalidAttributes.indexOf(name) > -1) {\n            return {\n                error: true,\n                msg: \"Binding to attribute '\" + name + \"' is disallowed for security reasons\"\n            };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @param {?} propName\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.normalizeAnimationStyleProperty = /**\n     * @param {?} propName\n     * @return {?}\n     */\n    function (propName) { return propName; };\n    /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    MockSchemaRegistry.prototype.normalizeAnimationStyleValue = /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    function (camelCaseProp, userProvidedProp, val) {\n        return { error: /** @type {?} */ ((null)), value: val.toString() };\n    };\n    return MockSchemaRegistry;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An implementation of {\\@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nvar MockDirectiveResolver = /** @class */ (function (_super) {\n    __extends(MockDirectiveResolver, _super);\n    function MockDirectiveResolver(reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._directives = new Map();\n        return _this;\n    }\n    /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.resolve = /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        return this._directives.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\n    };\n    /**\n     * Overrides the {@link core.Directive} for a directive.\n     */\n    /**\n     * Overrides the {\\@link core.Directive} for a directive.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    MockDirectiveResolver.prototype.setDirective = /**\n     * Overrides the {\\@link core.Directive} for a directive.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (type, metadata) {\n        this._directives.set(type, metadata);\n    };\n    return MockDirectiveResolver;\n}(_angular_compiler.DirectiveResolver));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockNgModuleResolver = /** @class */ (function (_super) {\n    __extends(MockNgModuleResolver, _super);\n    function MockNgModuleResolver(reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._ngModules = new Map();\n        return _this;\n    }\n    /**\n     * Overrides the {@link NgModule} for a module.\n     */\n    /**\n     * Overrides the {\\@link NgModule} for a module.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    MockNgModuleResolver.prototype.setNgModule = /**\n     * Overrides the {\\@link NgModule} for a module.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (type, metadata) {\n        this._ngModules.set(type, metadata);\n    };\n    /**\n     * Returns the {@link NgModule} for a module:\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     */\n    /**\n     * Returns the {\\@link NgModule} for a module:\n     * - Set the {\\@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    MockNgModuleResolver.prototype.resolve = /**\n     * Returns the {\\@link NgModule} for a module:\n     * - Set the {\\@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        return this._ngModules.get(type) || /** @type {?} */ ((_super.prototype.resolve.call(this, type, throwIfNotFound)));\n    };\n    return MockNgModuleResolver;\n}(_angular_compiler.NgModuleResolver));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockPipeResolver = /** @class */ (function (_super) {\n    __extends(MockPipeResolver, _super);\n    function MockPipeResolver(refector) {\n        var _this = _super.call(this, refector) || this;\n        _this._pipes = new Map();\n        return _this;\n    }\n    /**\n     * Overrides the {@link Pipe} for a pipe.\n     */\n    /**\n     * Overrides the {\\@link Pipe} for a pipe.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    MockPipeResolver.prototype.setPipe = /**\n     * Overrides the {\\@link Pipe} for a pipe.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (type, metadata) { this._pipes.set(type, metadata); };\n    /**\n     * Returns the {@link Pipe} for a pipe:\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     */\n    /**\n     * Returns the {\\@link Pipe} for a pipe:\n     * - Set the {\\@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    MockPipeResolver.prototype.resolve = /**\n     * Returns the {\\@link Pipe} for a pipe:\n     * - Set the {\\@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ metadata = this._pipes.get(type);\n        if (!metadata) {\n            metadata = /** @type {?} */ ((_super.prototype.resolve.call(this, type, throwIfNotFound)));\n        }\n        return metadata;\n    };\n    return MockPipeResolver;\n}(_angular_compiler.PipeResolver));\n\nexports.MockResourceLoader = MockResourceLoader;\nexports.MockSchemaRegistry = MockSchemaRegistry;\nexports.MockDirectiveResolver = MockDirectiveResolver;\nexports.MockNgModuleResolver = MockNgModuleResolver;\nexports.MockPipeResolver = MockPipeResolver;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=compiler-testing.umd.js.map\n"]}