{"version":3,"file":"flex-layout-server.umd.js","sources":["../../src/lib/server/module.ts","../../src/lib/server/server-provider.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {SERVER_PROVIDERS} from './server-provider';\n\n@NgModule({\n  providers: [SERVER_PROVIDERS]\n})\nexport class FlexLayoutServerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BEFORE_APP_SERIALIZED} from '@angular/platform-server';\nimport {\n  BREAKPOINTS,\n  CLASS_NAME,\n  SERVER_TOKEN,\n  BreakPoint,\n  MatchMedia,\n  StylesheetMap,\n  ServerMatchMedia\n} from '@angular/flex-layout/core';\n\n\n/**\n * Activate all of the registered breakpoints in sequence, and then\n * retrieve the associated stylings from the virtual stylesheet\n * @param serverSheet the virtual stylesheet that stores styles for each\n *        element\n * @param matchMedia the service to activate/deactive breakpoints\n * @param breakpoints the registered breakpoints to activate/deactivate\n */\nexport function generateStaticFlexLayoutStyles(serverSheet: StylesheetMap,\n                                               matchMedia: MatchMedia,\n                                               breakpoints: BreakPoint[]) {\n  // Store the custom classes in the following map, that way only\n  // one class gets allocated per HTMLElement, and each class can\n  // be referenced in the static media queries\n  const classMap = new Map<HTMLElement, string>();\n\n  // Get the initial stylings for all of the directives, and initialize\n  // the fallback block of stylings, then reverse the breakpoints list\n  // to traverse in the proper order\n  const defaultStyles = new Map(serverSheet.stylesheet);\n  let styleText = generateCss(defaultStyles, 'all', classMap);\n\n  breakpoints.reverse();\n  breakpoints.forEach((bp, i) => {\n    serverSheet.clearStyles();\n    (matchMedia as ServerMatchMedia).activateBreakpoint(bp);\n    const stylesheet = new Map(serverSheet.stylesheet);\n    if (stylesheet.size > 0) {\n      styleText += generateCss(stylesheet, bp.mediaQuery, classMap);\n    }\n    (matchMedia as ServerMatchMedia).deactivateBreakpoint(breakpoints[i]);\n  });\n\n  return styleText;\n}\n\n/**\n * Create a style tag populated with the dynamic stylings from Flex\n * components and attach it to the head of the DOM\n */\nexport function FLEX_SSR_SERIALIZER_FACTORY(serverSheet: StylesheetMap,\n                                            matchMedia: MatchMedia,\n                                            _document: Document,\n                                            breakpoints: BreakPoint[]) {\n  return () => {\n    // This is the style tag that gets inserted into the head of the DOM,\n    // populated with the manual media queries\n    const styleTag = _document.createElement('style');\n    const styleText = generateStaticFlexLayoutStyles(serverSheet, matchMedia, breakpoints);\n    styleTag.classList.add(`${CLASS_NAME}ssr`);\n    styleTag.textContent = styleText;\n    _document.head.appendChild(styleTag);\n  };\n}\n\n/**\n *  Provider to set static styles on the server\n */\nexport const SERVER_PROVIDERS = [\n  {\n    provide: <InjectionToken<() => void>>BEFORE_APP_SERIALIZED,\n    useFactory: FLEX_SSR_SERIALIZER_FACTORY,\n    deps: [\n      StylesheetMap,\n      MatchMedia,\n      DOCUMENT,\n      BREAKPOINTS,\n    ],\n    multi: true\n  },\n  {\n    provide: SERVER_TOKEN,\n    useValue: true\n  },\n  {\n    provide: MatchMedia,\n    useClass: ServerMatchMedia\n  }\n];\n\n\nlet nextId = 0;\nconst IS_DEBUG_MODE = false;\n\nexport type StyleSheet = Map<HTMLElement, Map<string, string|number>>;\nexport type ClassMap = Map<HTMLElement, string>;\n\n/**\n * create @media queries based on a virtual stylesheet\n * * Adds a unique class to each element and stores it\n *   in a shared classMap for later reuse\n * @param stylesheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaQuery the given @media CSS selector for the current breakpoint\n * @param classMap the map of HTML elements to class names to avoid duplications\n */\nfunction generateCss(stylesheet: StyleSheet, mediaQuery: string, classMap: ClassMap) {\n  let css = '';\n  stylesheet.forEach((styles, el) => {\n    let keyVals = '', className = getClassName(el, classMap);\n\n    styles.forEach((v, k) => {\n      keyVals += v ? format(`${k}:${v};`) : '';\n    });\n\n    // Build list of CSS styles; each with a className\n    css += format(`.${className} {`, keyVals, '}');\n  });\n\n  // Group 1 or more styles (each with className) in a specific mediaQuery\n  return format(`@media ${mediaQuery} {`, css, '}');\n}\n\n/**\n * For debugging purposes, prefix css segment with linefeed(s) for easy\n  * debugging purposes.\n */\nfunction format(...list: string[]): string {\n  let result = '';\n  list.forEach((css, i) => {\n    result += IS_DEBUG_MODE ? formatSegment(css, i != 0) : css;\n  });\n  return result;\n}\n\nfunction formatSegment(css: string, asPrefix: boolean = true): string {\n  return asPrefix ? '\\n' + css : css + '\\n';\n}\n\n/**\n * Get className associated with CSS styling\n * If not found, generate global className and set\n * association.\n */\nfunction  getClassName(stylesheet, classMap) {\n  let className = classMap.get(stylesheet);\n   if (!className) {\n     className = `${CLASS_NAME}${nextId++}`;\n     classMap.set(stylesheet, className);\n   }\n   stylesheet.classList.add(className);\n\n   return className;\n}\n"],"names":["NgModule","CLASS_NAME","ServerMatchMedia","MatchMedia","SERVER_TOKEN","BREAKPOINTS","DOCUMENT","StylesheetMap","BEFORE_APP_SERIALIZED"],"mappings":"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"}