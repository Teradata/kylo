{"version":3,"file":"material-input.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/input/input-errors.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatInputUnsupportedTypeError","type","Error","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatTextareaAutosize","_elementRef","_platform","_ngZone","_destroyed","Subject","defineProperty","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","minHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxHeight","maxRows","ngAfterViewInit","_this","isBrowser","resizeToFitContent","runOutsideAngular","fromEvent","window","pipe","auditTime","takeUntil","subscribe","ngOnDestroy","next","complete","property","style","_cacheTextareaLineHeight","textarea","textareaClone","cloneNode","rows","position","visibility","border","padding","height","overflow","appendChild","clientHeight","removeChild","ngDoCheck","force","_previousValue","placeholderText","placeholder","scrollHeight","Directive","args","selector","exportAs","host","class","ElementRef","Platform","NgZone","Input","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","mixinErrorState","MatInput","inputValueAccessor","_super","call","_type","_disabled","_required","_uid","_readonly","focused","_isServer","stateChanges","controlType","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","nativeElement","_previousNativeValue","id","IOS","addEventListener","event","el","selectionStart","selectionEnd","setSelectionRange","tslib_1.__extends","disabled","coerceBooleanProperty","_id","_validateType","_isTextarea","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","focus","_focusChanged","isFocused","readonly","_onInput","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","nodeName","name","toLowerCase","empty","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","[class.mat-input-server]","[attr.id]","[placeholder]","[disabled]","[required]","[readonly]","[attr.aria-describedby]","[attr.aria-invalid]","[attr.aria-required]","(blur)","(focus)","(input)","providers","provide","MatFormFieldControl","useExisting","NgControl","decorators","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","undefined","Inject","required","errorStateMatcher","MatInputModule","NgModule","declarations","imports","CommonModule","MatFormFieldModule","PlatformModule","exports"],"mappings":"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"}