{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n"],"names":["configurable","set","newValue","this","_disabled","_disabledChange","next","enumerable","get","_inputSubscription","unsubscribe","complete","_popupRef","dispose","_selected","date","_dateAdapter","sameDate","oldValue","selectedChanged","emit","_datepickerInput","Error","input","_valueChange","subscribe","value","_this","_document","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","viewContainerRef","_viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_createPopup","attach","instance","_ngZone","onStable","asObservable","pipe","take","hasBackdrop","backdropClass","direction","_dir","scrollStrategy","_scrollStrategy","_overlay","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","connectedTo","getPopupConnectionElementRef","originX","originY","overlayX","overlayY","withFallbackPosition","undefined","fallbackOffset","MatDatepicker","decorators","exportAs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","ctorParameters","type","MatDialog","Inject","args","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","Optional","Directionality","DOCUMENT","propDecorators","startAt","Input","startView","Output","opened","MAT_DATEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_elementRef","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","Object","defineProperty","prototype","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","format","display","_min","_max","coerceBooleanProperty","ngAfterContentInit","selected","ngOnDestroy","registerOnValidatorChange","fn","validate","c","underlineRef","_getPopupFallbackOffset","_inputContainerRef","clientHeight","writeValue","registerOnChange","registerOnTouched","setDisabledState","disabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","obj","isDateInstance","Directive","selector","providers","MAT_INPUT_VALUE_ACCESSOR","host","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","markForCheck","Component","template","class","[class.mat-datepicker-toggle-active]","MatDatepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","MatIconModule","OverlayModule","A11yModule","exports","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","declarations","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","entryComponents","provider","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","styles","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","selectedChange","_userSelection","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","push","dateFilter","dateA11yLabel","getDate","d1","d2","ChangeDetectorRef","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","changeDetectorRef","_dateFilterForViews","minDate","maxDate","_intlChanges","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","multi-year","_focusActiveCell","change","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","runOutsideAngular","querySelector","date1","date2","isRtl","_isRtl","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","yearsPerPage","NgZone","ViewChild","datepickerUid","InjectionToken","deps","Overlay","useFactory","_calendar","[class.mat-datepicker-content-touch]"],"mappings":"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"}