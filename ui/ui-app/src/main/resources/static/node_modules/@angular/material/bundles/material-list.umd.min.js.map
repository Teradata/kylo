{"version":3,"file":"material-list.umd.min.js","sources":["../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n"],"names":["encapsulation","ViewEncapsulation","None","providers","MAT_SELECTION_LIST_VALUE_ACCESSOR","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","MatSelectionList","ctorParameters","type","ElementRef","options","ContentChildren","args","MatListOption","selectionChange","Output","_MatSelectionListMixinBase","MatListModule","NgModule","imports","MatLineModule","MatRippleModule","MatCommonModule","MatPseudoCheckboxModule","CommonModule","exports","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","declarations","inputs","_this","_navList","_isNavList","Object","defineProperty","prototype","set","this","_element","nativeElement","classList","remove","enumerable","configurable","_lineSetter","MatLineSetter","_lines","_handleFocus","add","_handleBlur","Component","selector","exportAs","host","(focus)","(blur)","template","decorators","Optional","_MatListItemMixinBase","MatSelectionListBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatListOptionBase","_MatListOptionMixinBase","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","MatListOptionChange","source","selected","MatSelectionListChange","option","_changeDetector","selectionList","_super","call","_selected","_disabled","_hasFocus","checkboxPosition","EventEmitter","tslib_1.__extends","disabled","value","newValue","coerceBooleanProperty","markForCheck","selectedOptions","isSelected","_setSelected","_reportValueChange","ngOnInit","Promise","resolve","then","ngAfterContentInit","ngOnDestroy","_removeOptionFromList","toggle","focus","getLabel","_text","textContent","_isRippleDisabled","disableRipple","_handleClick","_emitChangeEvent","_emitDeprecatedChangeEvent","_setFocusedOption","_onTouched","_getHostElement","select","deselect","emit","role","class","(click)","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","[attr.aria-disabled]","Inject","propDecorators","Input","_tempValues","_setOptionsFromValues","optionIndex","_getOptionIndex","length","_keyManager","setNextItemActive","SPACE","ENTER","_toggleSelectOnFocusedOption","event","preventDefault","HOME","END","keyCode","setFirstItemActive","setLastItemActive","onKeydown","_onChange","_getSelectedOptionValues","values","forEach","isDisabled","map","_getOptionByValue","filter","Boolean","focusedOption","toArray","focusedIndex","[tabIndex]","(keydown)","styles","__extends","d","b","__","constructor","extendStatics","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatListBase","_MatListMixinBase","MatListItemBase","apply","arguments"],"mappings":"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"}