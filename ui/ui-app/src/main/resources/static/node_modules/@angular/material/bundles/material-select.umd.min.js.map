{"version":3,"file":"material-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matSelectAnimations","transformPanel","trigger","state","style","opacity","minWidth","transform","transition","animate","fadeInContent","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","type","Directive","args","selector","MatSelectTrigger","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","focused","controlType","ariaLabel","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","onOpen","_openedStream","onClose","_closedStream","selectionChange","change","valueChange","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","filter","o","ngOnInit","SelectionModel","multiple","undefined","ngAfterContentInit","_initKeyManager","changes","startWith","takeUntil","subscribe","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","panelOpen","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","markForCheck","overlayDir","overlayRef","overlayElement","fontSize","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","_isRtl","reverse","join","_handleKeydown","event","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","ENTER","SPACE","altKey","preventDefault","_keyManager","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","emit","offsetX","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","isUserInput","isArray","_clearSelection","forEach","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","toArray","indexOf","find","error","isDevMode","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","focus","_stateChanges","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","Math","max","reduce","result","current","index","items","_getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","ariaLabelledby","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","round","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","class","(keydown)","(focus)","(blur)","animations","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","Attribute","Inject","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","compareWith","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","exports","MatFormFieldModule","declarations"],"mappings":"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"}