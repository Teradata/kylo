{"version":3,"sources":["platform-browser-dynamic-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","platformBrowserDynamic","testing","core","platformBrowser","compiler","this","_angular_core","_angular_core_testing","_angular_platformBrowserDynamic","_angular_platformBrowser_testing","_angular_platformBrowser","_angular_compiler","_angular_compiler_testing","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","removeMetadata","metadata","remove","references","removeObjects","Set","prop","removeValue","Array","forEach","value","add","_propHashKey","propValue","filter","has","undefined","addMetadata","addValue","concat","setMetadata","set","propName","replacer","key","_serializeReference","JSON","stringify","ref","id","get","ɵstringify","_nextReferenceId","_valueProps","obj","props","keys","startsWith","push","proto","getPrototypeOf","protoProp","desc","getOwnPropertyDescriptor","setPrototypeOf","__proto__","p","hasOwnProperty","DOMTestComponentRenderer","_super","_doc","_this","call","insertRootElement","rootElId","rootEl","ɵgetDOM","firstChild","content","createTemplate","oldRoots","querySelectorAll","i","length","appendChild","body","decorators","type","Injectable","ctorParameters","Inject","args","DOCUMENT","TestComponentRenderer","MetadataOverrider","_references","Map","overrideMetadata","metadataClass","oldMetadata","override","Error","COMPILER_PROVIDERS","provide","MockPipeResolver","deps","CompileReflector","PipeResolver","useExisting","MockDirectiveResolver","DirectiveResolver","MockNgModuleResolver","NgModuleResolver","TestingCompilerFactoryImpl","_injector","_compilerFactory","createTestingCompiler","options","createCompiler","TestingCompilerImpl","injector","_compiler","_directiveResolver","_pipeResolver","_moduleResolver","_overrider","defineProperty","enumerable","configurable","compileModuleSync","moduleType","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getComponentFactory","component","checkOverrideAllowed","hasAotSummary","overrideModule","ngModule","resolve","setNgModule","NgModule","clearCacheFor","overrideDirective","directive","setDirective","Directive","overrideComponent","Component","overridePipe","pipe","setPipe","Pipe","loadAotSummaries","summaries","clearCache","getComponentFromError","error","ERROR_COMPONENT_TYPE","platformCoreDynamicTesting","createPlatformFactory","ɵplatformCoreDynamic","COMPILER_OPTIONS","useValue","providers","multi","ɵTestingCompilerFactory","useClass","Injector","CompilerFactory","platformBrowserDynamicTesting","ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS","BrowserDynamicTestingModule","BrowserTestingModule","ɵDOMTestComponentRenderer","ɵplatformCoreDynamicTesting","ɵa","ɵb"],"mappings":"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","file":"platform-browser-dynamic-testing.umd.min.js","sourcesContent":["/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/core/testing'), require('@angular/platform-browser-dynamic'), require('@angular/platform-browser/testing'), require('@angular/platform-browser'), require('@angular/compiler'), require('@angular/compiler/testing')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/platform-browser-dynamic/testing', ['exports', '@angular/core', '@angular/core/testing', '@angular/platform-browser-dynamic', '@angular/platform-browser/testing', '@angular/platform-browser', '@angular/compiler', '@angular/compiler/testing'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}, global.ng.platformBrowserDynamic.testing = {}),global.ng.core,global.ng.core.testing,global.ng.platformBrowserDynamic,global.ng.platformBrowser.testing,global.ng.platformBrowser,global.ng.compiler,global.ng.compiler.testing));\n}(this, (function (exports,_angular_core,_angular_core_testing,_angular_platformBrowserDynamic,_angular_platformBrowser_testing,_angular_platformBrowser,_angular_compiler,_angular_compiler_testing) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * @license Angular v5.1.3\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nvar DOMTestComponentRenderer = /** @class */ (function (_super) {\n    __extends(DOMTestComponentRenderer, _super);\n    function DOMTestComponentRenderer(_doc /** TODO #9100 */) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        return _this;\n    }\n    /**\n     * @param {?} rootElId\n     * @return {?}\n     */\n    DOMTestComponentRenderer.prototype.insertRootElement = /**\n     * @param {?} rootElId\n     * @return {?}\n     */\n    function (rootElId) {\n        var /** @type {?} */ rootEl = /** @type {?} */ (_angular_platformBrowser.ɵgetDOM().firstChild(_angular_platformBrowser.ɵgetDOM().content(_angular_platformBrowser.ɵgetDOM().createTemplate(\"<div id=\\\"\" + rootElId + \"\\\"></div>\"))));\n        // TODO(juliemr): can/should this be optional?\n        var /** @type {?} */ oldRoots = _angular_platformBrowser.ɵgetDOM().querySelectorAll(this._doc, '[id^=root]');\n        for (var /** @type {?} */ i = 0; i < oldRoots.length; i++) {\n            _angular_platformBrowser.ɵgetDOM().remove(oldRoots[i]);\n        }\n        _angular_platformBrowser.ɵgetDOM().appendChild(this._doc.body, rootEl);\n    };\n    DOMTestComponentRenderer.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    DOMTestComponentRenderer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },\n    ]; };\n    return DOMTestComponentRenderer;\n}(_angular_core_testing.TestComponentRenderer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextReferenceId = 0;\nvar MetadataOverrider = /** @class */ (function () {\n    function MetadataOverrider() {\n        this._references = new Map();\n    }\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     * @template C, T\n     * @param {?} metadataClass\n     * @param {?} oldMetadata\n     * @param {?} override\n     * @return {?}\n     */\n    MetadataOverrider.prototype.overrideMetadata = /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     * @template C, T\n     * @param {?} metadataClass\n     * @param {?} oldMetadata\n     * @param {?} override\n     * @return {?}\n     */\n    function (metadataClass, oldMetadata, override) {\n        var /** @type {?} */ props = {};\n        if (oldMetadata) {\n            _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = (/** @type {?} */ (oldMetadata))[prop]; });\n        }\n        if (override.set) {\n            if (override.remove || override.add) {\n                throw new Error(\"Cannot set and add/remove \" + _angular_core.ɵstringify(metadataClass) + \" at the same time!\");\n            }\n            setMetadata(props, override.set);\n        }\n        if (override.remove) {\n            removeMetadata(props, override.remove, this._references);\n        }\n        if (override.add) {\n            addMetadata(props, override.add);\n        }\n        return new metadataClass(/** @type {?} */ (props));\n    };\n    return MetadataOverrider;\n}());\n/**\n * @param {?} metadata\n * @param {?} remove\n * @param {?} references\n * @return {?}\n */\nfunction removeMetadata(metadata, remove, references) {\n    var /** @type {?} */ removeObjects = new Set();\n    var _loop_1 = function (prop) {\n        var /** @type {?} */ removeValue = remove[prop];\n        if (removeValue instanceof Array) {\n            removeValue.forEach(function (value) { removeObjects.add(_propHashKey(prop, value, references)); });\n        }\n        else {\n            removeObjects.add(_propHashKey(prop, removeValue, references));\n        }\n    };\n    for (var /** @type {?} */ prop in remove) {\n        _loop_1(prop);\n    }\n    var _loop_2 = function (prop) {\n        var /** @type {?} */ propValue = metadata[prop];\n        if (propValue instanceof Array) {\n            metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n        }\n        else {\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                metadata[prop] = undefined;\n            }\n        }\n    };\n    for (var /** @type {?} */ prop in metadata) {\n        _loop_2(prop);\n    }\n}\n/**\n * @param {?} metadata\n * @param {?} add\n * @return {?}\n */\nfunction addMetadata(metadata, add) {\n    for (var /** @type {?} */ prop in add) {\n        var /** @type {?} */ addValue = add[prop];\n        var /** @type {?} */ propValue = metadata[prop];\n        if (propValue != null && propValue instanceof Array) {\n            metadata[prop] = propValue.concat(addValue);\n        }\n        else {\n            metadata[prop] = addValue;\n        }\n    }\n}\n/**\n * @param {?} metadata\n * @param {?} set\n * @return {?}\n */\nfunction setMetadata(metadata, set) {\n    for (var /** @type {?} */ prop in set) {\n        metadata[prop] = set[prop];\n    }\n}\n/**\n * @param {?} propName\n * @param {?} propValue\n * @param {?} references\n * @return {?}\n */\nfunction _propHashKey(propName, propValue, references) {\n    var /** @type {?} */ replacer = function (key, value) {\n        if (typeof value === 'function') {\n            value = _serializeReference(value, references);\n        }\n        return value;\n    };\n    return propName + \":\" + JSON.stringify(propValue, replacer);\n}\n/**\n * @param {?} ref\n * @param {?} references\n * @return {?}\n */\nfunction _serializeReference(ref, references) {\n    var /** @type {?} */ id = references.get(ref);\n    if (!id) {\n        id = \"\" + _angular_core.ɵstringify(ref) + _nextReferenceId++;\n        references.set(ref, id);\n    }\n    return id;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction _valueProps(obj) {\n    var /** @type {?} */ props = [];\n    // regular public props\n    Object.keys(obj).forEach(function (prop) {\n        if (!prop.startsWith('_')) {\n            props.push(prop);\n        }\n    });\n    // getters\n    var /** @type {?} */ proto = obj;\n    while (proto = Object.getPrototypeOf(proto)) {\n        Object.keys(proto).forEach(function (protoProp) {\n            var /** @type {?} */ desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                props.push(protoProp);\n            }\n        });\n    }\n    return props;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar COMPILER_PROVIDERS = [\n    { provide: _angular_compiler_testing.MockPipeResolver, deps: [_angular_compiler.CompileReflector] },\n    { provide: _angular_compiler.PipeResolver, useExisting: _angular_compiler_testing.MockPipeResolver },\n    { provide: _angular_compiler_testing.MockDirectiveResolver, deps: [_angular_compiler.CompileReflector] },\n    { provide: _angular_compiler.DirectiveResolver, useExisting: _angular_compiler_testing.MockDirectiveResolver },\n    { provide: _angular_compiler_testing.MockNgModuleResolver, deps: [_angular_compiler.CompileReflector] },\n    { provide: _angular_compiler.NgModuleResolver, useExisting: _angular_compiler_testing.MockNgModuleResolver },\n];\nvar TestingCompilerFactoryImpl = /** @class */ (function () {\n    function TestingCompilerFactoryImpl(_injector, _compilerFactory) {\n        this._injector = _injector;\n        this._compilerFactory = _compilerFactory;\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    TestingCompilerFactoryImpl.prototype.createTestingCompiler = /**\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        var /** @type {?} */ compiler = /** @type {?} */ (this._compilerFactory.createCompiler(options));\n        return new TestingCompilerImpl(compiler, compiler.injector.get(_angular_compiler_testing.MockDirectiveResolver), compiler.injector.get(_angular_compiler_testing.MockPipeResolver), compiler.injector.get(_angular_compiler_testing.MockNgModuleResolver));\n    };\n    return TestingCompilerFactoryImpl;\n}());\nvar TestingCompilerImpl = /** @class */ (function () {\n    function TestingCompilerImpl(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n        this._compiler = _compiler;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._moduleResolver = _moduleResolver;\n        this._overrider = new MetadataOverrider();\n    }\n    Object.defineProperty(TestingCompilerImpl.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._compiler.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleSync = /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return this._compiler.compileModuleSync(moduleType);\n    };\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleAsync = /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return this._compiler.compileModuleAsync(moduleType);\n    };\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsSync = /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    };\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsAsync = /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    };\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.getComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        return this._compiler.getComponentFactory(component);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.checkOverrideAllowed = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        if (this._compiler.hasAotSummary(type)) {\n            throw new Error(_angular_core.ɵstringify(type) + \" was AOT compiled, so its metadata cannot be changed.\");\n        }\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overrideModule = /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    function (ngModule, override) {\n        this.checkOverrideAllowed(ngModule);\n        var /** @type {?} */ oldMetadata = this._moduleResolver.resolve(ngModule, false);\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(_angular_core.NgModule, oldMetadata, override));\n        this.clearCacheFor(ngModule);\n    };\n    /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overrideDirective = /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    function (directive, override) {\n        this.checkOverrideAllowed(directive);\n        var /** @type {?} */ oldMetadata = this._directiveResolver.resolve(directive, false);\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(_angular_core.Directive, /** @type {?} */ ((oldMetadata)), override));\n        this.clearCacheFor(directive);\n    };\n    /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overrideComponent = /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    function (component, override) {\n        this.checkOverrideAllowed(component);\n        var /** @type {?} */ oldMetadata = this._directiveResolver.resolve(component, false);\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(_angular_core.Component, /** @type {?} */ ((oldMetadata)), override));\n        this.clearCacheFor(component);\n    };\n    /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.overridePipe = /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    function (pipe, override) {\n        this.checkOverrideAllowed(pipe);\n        var /** @type {?} */ oldMetadata = this._pipeResolver.resolve(pipe, false);\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(_angular_core.Pipe, oldMetadata, override));\n        this.clearCacheFor(pipe);\n    };\n    /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.loadAotSummaries = /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    function (summaries) { this._compiler.loadAotSummaries(summaries); };\n    /**\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () { this._compiler.clearCache(); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.clearCacheFor = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { this._compiler.clearCacheFor(type); };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    TestingCompilerImpl.prototype.getComponentFromError = /**\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) { return (/** @type {?} */ (error))[_angular_compiler.ERROR_COMPONENT_TYPE] || null; };\n    return TestingCompilerImpl;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Platform for dynamic tests\n *\n * \\@experimental\n */\nvar platformCoreDynamicTesting = _angular_core.createPlatformFactory(_angular_platformBrowserDynamic.ɵplatformCoreDynamic, 'coreDynamicTesting', [\n    { provide: _angular_core.COMPILER_OPTIONS, useValue: { providers: COMPILER_PROVIDERS }, multi: true }, {\n        provide: _angular_core_testing.ɵTestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [_angular_core.Injector, _angular_core.CompilerFactory]\n    }\n]);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@stable\n */\nvar platformBrowserDynamicTesting = _angular_core.createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', _angular_platformBrowserDynamic.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * \\@stable\n */\nvar BrowserDynamicTestingModule = /** @class */ (function () {\n    function BrowserDynamicTestingModule() {\n    }\n    BrowserDynamicTestingModule.decorators = [\n        { type: _angular_core.NgModule, args: [{\n                    exports: [_angular_platformBrowser_testing.BrowserTestingModule],\n                    providers: [\n                        { provide: _angular_core_testing.TestComponentRenderer, useClass: DOMTestComponentRenderer },\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    BrowserDynamicTestingModule.ctorParameters = function () { return []; };\n    return BrowserDynamicTestingModule;\n}());\n\nexports.platformBrowserDynamicTesting = platformBrowserDynamicTesting;\nexports.BrowserDynamicTestingModule = BrowserDynamicTestingModule;\nexports.ɵDOMTestComponentRenderer = DOMTestComponentRenderer;\nexports.ɵplatformCoreDynamicTesting = platformCoreDynamicTesting;\nexports.ɵa = COMPILER_PROVIDERS;\nexports.ɵb = TestingCompilerFactoryImpl;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=platform-browser-dynamic-testing.umd.js.map\n"]}