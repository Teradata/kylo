{"version":3,"file":"material-form-field.umd.min.js","sources":["../../src/lib/form-field/form-field-errors.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n"],"names":["getMatFormFieldPlaceholderConflictError","Error","getMatFormFieldDuplicatedHintError","align","getMatFormFieldMissingControlError","nextUniqueId","this","id","type","Directive","args","selector","host","class","role","[attr.id]","Input","MatError","MatFormFieldControl","[class.mat-right]","[attr.align]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","trigger","state","style","opacity","transform","transition","animate","MatFormField","_elementRef","_changeDetectorRef","labelOptions","color","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","Object","defineProperty","prototype","value","_hideRequiredMarker","coerceBooleanProperty","_floatLabel","_processHints","markForCheck","ngAfterContentInit","_this","_validateControlChild","_control","controlType","nativeElement","classList","add","stateChanges","pipe","startWith","subscribe","_validatePlaceholders","_syncDescribedByIds","ngControl","valueChanges","_hintChildren","changes","_errorChildren","ngAfterContentChecked","ngAfterViewInit","detectChanges","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","length","errorState","_animateAndLockLabel","fromEvent","_label","take","_validateHints","startHint_1","endHint_1","forEach","hint","hintLabel","ids","startHint","find","endHint","push","map","error","setDescribedByIds","Component","template","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","undefined","decorators","Optional","Inject","MAT_LABEL_GLOBAL_OPTIONS","propDecorators","hideRequiredMarker","floatPlaceholder","underlineRef","ViewChild","_connectionContainerRef","_inputContainerRef","ContentChild","ContentChildren","_prefixChildren","_suffixChildren","MatFormFieldModule","NgModule","declarations","imports","CommonModule","PlatformModule","exports"],"mappings":"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"}