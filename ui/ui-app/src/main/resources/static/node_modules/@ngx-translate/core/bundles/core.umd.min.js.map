{"version":3,"file":"core.umd.min.js","sources":["../../../../node_modules/src/util/tryCatch.ts","../../../../node_modules/src/Subscription.ts","../../../../node_modules/src/util/pipe.ts","../../../../node_modules/src/observable/PromiseObservable.ts","../../../../node_modules/src/observable/IteratorObservable.ts","~/@ngx-translate/core/src/util.ts","~/@ngx-translate/core/src/translate.loader.ts","../../../../node_modules/src/util/isScheduler.ts","../../../../node_modules/src/util/root.ts","../../../../node_modules/src/util/isFunction.ts","../../../../node_modules/src/util/isArray.ts","../../../../node_modules/src/util/isObject.ts","../../../../node_modules/src/util/errorObject.ts","../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../node_modules/src/Observer.ts","../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../node_modules/src/Subscriber.ts","../../../../node_modules/src/util/toSubscriber.ts","../../../../node_modules/src/symbol/observable.ts","../../../../node_modules/src/util/noop.ts","../../../../node_modules/src/Observable.ts","../../../../node_modules/src/observable/ScalarObservable.ts","../../../../node_modules/src/observable/EmptyObservable.ts","../../../../node_modules/src/observable/ArrayObservable.ts","../../../../node_modules/src/observable/of.ts","../../../../node_modules/src/util/isArrayLike.ts","../../../../node_modules/src/util/isPromise.ts","../../../../node_modules/src/symbol/iterator.ts","../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../node_modules/src/Notification.ts","../../../../node_modules/src/operators/observeOn.ts","../../../../node_modules/src/observable/FromObservable.ts","../../../../node_modules/src/observable/from.ts","../../../../node_modules/src/InnerSubscriber.ts","../../../../node_modules/src/util/subscribeToResult.ts","../../../../node_modules/src/OuterSubscriber.ts","../../../../node_modules/src/operators/mergeMap.ts","../../../../node_modules/src/util/identity.ts","../../../../node_modules/src/operators/mergeAll.ts","../../../../node_modules/src/operators/concatAll.ts","../../../../node_modules/src/observable/concat.ts","../../../../node_modules/src/operators/concat.ts","~/@ngx-translate/core/src/missing-translation-handler.ts","~/@ngx-translate/core/src/translate.compiler.ts","~/@ngx-translate/core/src/translate.parser.ts","~/@ngx-translate/core/src/translate.store.ts","~/@ngx-translate/core/src/translate.service.ts","~/@ngx-translate/core/src/translate.directive.ts","~/@ngx-translate/core/src/translate.pipe.ts","~/@ngx-translate/core/index.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","/* tslint:disable */\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Injectable} from \"@angular/core\";\nimport {of} from \"rxjs/observable/of\";\n\nexport abstract class TranslateLoader {\n    abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of({});\n    }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import {TranslateService} from \"./translate.service\";\nimport {Injectable} from \"@angular/core\";\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {MissingTranslationHandlerParams} params context for resolving a missing translation\n     * @returns {any} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n    handle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n    abstract compile(value: string, lang: string): string | Function;\n    abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value: string, lang: string): string | Function {\n        return value;\n    }\n\n    compileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @param expr\n     * @param params\n     * @returns {string}\n     */\n    abstract interpolate(expr: string | Function, params?: any): string;\n\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @param target\n     * @param key\n     * @returns {string}\n     */\n    abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n    public interpolate(expr: string | Function, params?: any): string {\n        let result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr as string;\n        }\n\n        return result;\n    }\n\n    getValue(target: any, key: string): any {\n        let keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n\n    private interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n\n    private interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    public defaultLang: string;\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    public currentLang: string = this.defaultLang;\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    public translations: any = {};\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    public langs: Array<string> = [];\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport {concat} from \"rxjs/operators/concat\";\nimport {share} from \"rxjs/operators/share\";\nimport {map} from \"rxjs/operators/map\";\nimport {merge} from \"rxjs/operators/merge\";\nimport {switchMap} from \"rxjs/operators/switchMap\";\nimport {toArray} from \"rxjs/operators/toArray\";\nimport {take} from \"rxjs/operators/take\";\nimport {of} from \"rxjs/observable/of\";\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams\n} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n    private loadingTranslations: Observable<any>;\n    private pending: boolean = false;\n    private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n    private _defaultLang: string;\n    private _currentLang: string;\n    private _langs: Array<string> = [];\n    private _translations: any = {};\n    private _translationRequests: any  = {};\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    get onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n\n    set defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    get currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n\n    set currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    get langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n\n    set langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    get translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n\n    set translations(translations: any) {\n        if(this.isolate) {\n            this._translations = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(public store: TranslateStore,\n                public currentLoader: TranslateLoader,\n                public compiler: TranslateCompiler,\n                public parser: TranslateParser,\n                public missingTranslationHandler: MissingTranslationHandler,\n                @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n                @Inject(USE_STORE) private isolate: boolean = false) {\n    }\n\n    /**\n     * Sets the default language to use as a fallback\n     * @param lang\n     */\n    public setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Gets the default language used\n     * @returns string\n     */\n    public getDefaultLang(): string {\n        return this.defaultLang;\n    }\n\n    /**\n     * Changes the lang currently used\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return of(this.translations[lang]);\n        }\n    }\n\n    /**\n     * Retrieves the given translations\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    private retrieveTranslations(lang: string): Observable<any> {\n        let pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n        this.loadingTranslations.pipe(take(1))\n          .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param lang\n     * @param translations\n     * @param shouldMerge\n     */\n    public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Returns an array of currently available langs\n     * @returns {any}\n     */\n    public getLangs(): Array<string> {\n        return this.langs;\n    }\n\n    /**\n     * @param langs\n     * Add available langs\n     */\n    public addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n\n    /**\n     * Update the list of available langs\n     */\n    private updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n\n    /**\n     * Returns the parsed result of the translations\n     * @param translations\n     * @param key\n     * @param interpolateParams\n     * @returns {any}\n     */\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let result: any = {},\n                observables: boolean = false;\n            for(let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let mergedObs: Observable<string>;\n                for(let k of key) {\n                    let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.pipe(merge(obs));\n                    }\n                }\n                return mergedObs.pipe(\n                  toArray(),\n                  map((arr: Array<string>) => {\n                    let obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                      obj[key[index]] = value;\n                    });\n                    return obj;\n                  })\n                );\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param key\n     * @param interpolateParams\n     * @returns {any} the translated key, or an object of translated keys\n     */\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return of(res);\n            }\n        }\n    }\n\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param key\n     * @param interpolateParams\n     * @returns {any} A stream of the translated key, or an object of translated keys\n     */\n    public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n          .get(key, interpolateParams)\n          .pipe(\n            concat(this.onLangChange.pipe(\n              switchMap((event: LangChangeEvent) => {\n                const res = this.getParsedResult(event.translations, key, interpolateParams);\n                if (typeof res.subscribe === \"function\") {\n                  return res;\n                } else {\n                  return of(res);\n                }\n              })\n            ))\n          );\n    }\n\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param key\n     * @param interpolateParams\n     * @returns {string}\n     */\n    public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param key\n     * @param value\n     * @param lang\n     */\n    public set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Changes the current lang\n     * @param lang\n     */\n    private changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Changes the default lang\n     * @param lang\n     */\n    private changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Allows to reload the lang file from the file\n     * @param lang\n     * @returns {Observable<any>}\n     */\n    public reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n\n    /**\n     * Deletes inner translation\n     * @param lang\n     */\n    public resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     *\n     * @returns string\n     */\n    public getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     *\n     * @returns string\n     */\n    public getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\n}\n","import {Directive, ElementRef, AfterViewChecked, Input, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {equals, isDefined} from './util';\nimport {TranslateService, LangChangeEvent} from './translate.service';\nimport {TranslationChangeEvent} from \"./translate.service\";\nimport {DefaultLangChangeEvent} from \"./translate.service\";\n\n@Directive({\n    selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n    key: string;\n    lastParams: any;\n    currentParams: any;\n    onLangChangeSub: Subscription;\n    onDefaultLangChangeSub: Subscription;\n    onTranslationChangeSub: Subscription;\n\n    @Input() set translate(key: string) {\n        if(key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n\n    @Input() set translateParams(params: any) {\n        if(!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n\n    constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if(!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n\n    checkNodes(forceUpdate = false, translations?: any) {\n        let nodes: NodeList = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if(!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for(let i = 0; i < nodes.length; ++i) {\n            let node: any = nodes[i];\n            if(node.nodeType === 3) { // node type 3 is a text node\n                let key: string;\n                if(this.key) {\n                    key = this.key;\n                    if(forceUpdate) {\n                        node.lastKey = null;\n                    }\n                } else {\n                    let content = this.getContent(node).trim();\n                    if(content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if(content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        } else if(node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n\n    updateValue(key: string, node: any, translations: any) {\n        if(key) {\n            if(node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n\n            this.lastParams = this.currentParams;\n\n            let onTranslation = (res: string) => {\n                if(res !== key) {\n                    node.lastKey = key;\n                }\n                if(!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n\n            if(isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if(typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                } else {\n                    onTranslation(res);\n                }\n            } else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n\n    getContent(node: any): string {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n\n    setContent(node: any, content: string): void {\n        if(isDefined(node.textContent)) {\n            node.textContent = content;\n        } else {\n            node.data = content;\n        }\n    }\n\n    ngOnDestroy() {\n        if(this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n\n        if(this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n\n        if(this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\n","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n    constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n    }\n\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n\n    transform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch(e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     */\n    _dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._dispose();\n    }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./src/translate.loader\";\nimport {TranslateService} from \"./src/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./src/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./src/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./src/translate.compiler\";\nimport {TranslateDirective} from \"./src/translate.directive\";\nimport {TranslatePipe} from \"./src/translate.pipe\";\nimport {TranslateStore} from \"./src/translate.store\";\nimport {USE_STORE} from \"./src/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./src/translate.service\";\n\nexport * from \"./src/translate.loader\";\nexport * from \"./src/translate.service\";\nexport * from \"./src/missing-translation-handler\";\nexport * from \"./src/translate.parser\";\nexport * from \"./src/translate.compiler\";\nexport * from \"./src/translate.directive\";\nexport * from \"./src/translate.pipe\";\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipe,\n        TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        TranslateDirective\n    ]\n})\nexport class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n}\n"],"names":["tryCatcher","tryCatchTarget","apply","this","arguments","e","errorObject_1","errorObject","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError_1","UnsubscriptionError","pipeFromArray","fns","length","input","prev","fn","noop_1","noop","dispatchNext","arg","value","subscriber","closed","next","complete","dispatchError","error","toLength","o","len","isNaN","root_1","root","isFinite","numberIsFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","equals","o1","o2","key","keySet","t1","Array","isArray","Object","create","isDefined","isObject$1","item","mergeDeep","target","source","output","assign","isObject","keys","forEach","_b","_c","TranslateLoader","exports","TranslateFakeLoader","_super","__extends","prototype","getTranslation","lang","of","__decorate","Injectable","schedule","__window","window","__self","self","WorkerGlobalScope","_root","global","Error","x","call","map","i","toString","join","name","stack","message","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","remove","isFunction_1","isFunction","trial","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","Symbol","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","_i","Observable$$1","subscribe","_isScalar","_subscribe","Observable","lift","operator","sink","toSubscriber_1","toSubscriber","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","ScalarObservable","scheduler","dispatch","state","done","Observable_1","EmptyObservable","ArrayObservable","array","isScheduler_1","isScheduler","pop","ScalarObservable_1","EmptyObservable_1","count","ArrayObservable_1","then","PromiseObservable","promise","setTimeout","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","getOwnPropertyNames","$$iterator","IteratorObservable_2","IteratorObservable","obj","iterator_1","StringIterator","undefined","ArrayIterator","TypeError","getIterator","hasError","result","return","str","idx","charAt","arr","pow","ArrayLikeObservable","arrayLike","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","delay","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","isPromise_1","isPromise","PromiseObservable_1","IteratorObservable_1","isArrayLike_1","isArrayLike","ArrayLikeObservable_1","observeOn_1","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","outerSubscriber","InnerSubscriber_1","obs","msg","OuterSubscriber","innerValue","innerIndex","innerSub","mergeMap_2","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","MergeMapSubscriber","MergeMapOperator_1","hasCompleted","buffer","active","_tryNext","_innerSub","subscribeToResult_1","subscribeToResult","_notifyResultSelector","shift","OuterSubscriber_1","mergeMap_1","mergeMap","identity_1","identity","mergeAll_1","mergeAll","observables","from_1","from","concatAll_1","concatAll","of_1","concat_3","concat_1","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","TranslateParser","TranslateDefaultParser","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","getValue","split","replace","substring","b","r","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","USE_STORE","InjectionToken","USE_DEFAULT_LANG","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","defineProperty","get","_defaultLang","set","_currentLang","setDefaultLang","retrieveTranslations","take","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","share","updateLangs","setTranslation","shouldMerge","emit","getLangs","addLangs","getParsedResult","interpolateParams","key_1","k","mergedObs","key_2","merge","toArray","translateService","onComplete","onError","stream","switchMap","event","instant","obj_1","reloadLang","resetLang","getBrowserLang","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","__param","Inject","__metadata","Boolean","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","node","nodeType","lastKey","content","getContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","Input","Directive","selector","ElementRef","ChangeDetectorRef","TranslatePipe","translate","transform","query","args","validArgs","JSON","parse","SyntaxError","_dispose","Pipe","pure","TranslateModule","TranslateModule_1","forRoot","ngModule","providers","loader","provide","useClass","useValue","forChild","NgModule","declarations"],"mappings":"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"}
