{
  "version": 3,
  "file": "covalent-core-layout.umd.min.js",
  "sources": [
    "ng://@covalent/core/layout/node_modules/tslib/tslib.es6.js",
    "ng://@covalent/core/layout/out/layout.component.ts",
    "ng://@covalent/core/layout/out/layout-toggle.class.ts",
    "ng://@covalent/core/layout/out/layout.directives.ts",
    "ng://@covalent/core/layout/out/layout-nav/layout-nav.component.ts",
    "ng://@covalent/core/layout/out/layout-nav-list/layout-nav-list.component.ts",
    "ng://@covalent/core/layout/out/layout-nav-list/layout-nav-list.directives.ts",
    "ng://@covalent/core/layout/out/layout-card-over/layout-card-over.component.ts",
    "ng://@covalent/core/layout/out/layout-manage-list/layout-manage-list.component.ts",
    "ng://@covalent/core/layout/out/layout-manage-list/layout-manage-list.directives.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n",
    "import { Component, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from './layout-toggle.class';\n\n@Component({\n  selector: 'td-layout',\n  styles: [`:host{\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  margin:0;\n  width:100%;\n  min-height:100%;\n  height:100%;\n  overflow:hidden; }\n  :host ::ng-deep > mat-sidenav-container > mat-sidenav{\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-orient:vertical;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:column;\n            flex-direction:column; }\n`],\n  template: `<mat-sidenav-container fullscreen>\n  <mat-sidenav #sidenav\n              class=\"td-layout-sidenav\"\n              [mode]=\"mode\"\n              [opened]=\"opened\"\n              [style.max-width]=\"sidenavWidth\"\n              [style.min-width]=\"sidenavWidth\"\n              [disableClose]=\"disableClose\">\n    <ng-content select=\"td-navigation-drawer\"></ng-content>\n    <ng-content select=\"[td-sidenav-content]\"></ng-content>\n  </mat-sidenav>\n  <ng-content></ng-content>\n</mat-sidenav-container>\n`,\n})\nexport class TdLayoutComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"over\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'over';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"false\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = false;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"320px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '320px';\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Input, HostBinding, HostListener, Renderer2, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nexport interface ILayoutTogglable {\n  opened: boolean;\n  sidenav: MatSidenav;\n  toggle(): Promise<void>;\n  open(): Promise<void>;\n  close(): Promise<void>;\n}\n\nexport class LayoutToggleBase { }\n\n/* tslint:disable-next-line */\nexport const _TdLayoutToggleMixinBase = mixinDisabled(LayoutToggleBase);\n\nexport abstract class LayoutToggle extends _TdLayoutToggleMixinBase implements AfterViewInit, OnDestroy, ICanDisable {\n\n  private _toggleSubs: Subscription;\n\n  private _initialized: boolean = false;\n  private _hideWhenOpened: boolean = false;\n\n  /**\n   * hideWhenOpened?: boolean\n   * When this is set to true, the host will be hidden when\n   * the sidenav is opened.\n   */\n  @Input('hideWhenOpened')\n  set hideWhenOpened(hideWhenOpened: boolean) {\n    this._hideWhenOpened = hideWhenOpened;\n    if (this._initialized) {\n      this._toggleVisibility();\n    }\n  }\n\n  constructor(protected _layout: ILayoutTogglable,\n              private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    super();\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-menu-button');\n  }\n\n  ngAfterViewInit(): void {\n    this._initialized = true;\n    this._toggleSubs = this._layout.sidenav._animationStarted.subscribe(() => {\n      this._toggleVisibility();\n    });\n    // execute toggleVisibility since the onOpenStart and onCloseStart\n    // methods might not be executed always when the element is rendered\n    this._toggleVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._toggleSubs) {\n      this._toggleSubs.unsubscribe();\n      this._toggleSubs = undefined;\n    }\n  }\n\n  /**\n   * Listens to host click event to trigger the layout toggle\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    event.preventDefault();\n    if (!this.disabled) {\n      this.onClick();\n    }\n  }\n\n  abstract onClick(): void;\n\n  private _toggleVisibility(): void {\n    if (this._layout.sidenav.opened && this._hideWhenOpened) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', '');\n    }\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutComponent } from './layout.component';\nimport { LayoutToggle } from './layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutToggle]',\n})\nexport class TdLayoutToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutToggle') \n  set tdLayoutToggle(tdLayoutToggle: boolean) {\n    this.disabled = !(<any>tdLayoutToggle === '' || tdLayoutToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutClose]',\n})\nexport class TdLayoutCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutClose') \n  set tdLayoutClose(tdLayoutClose: boolean) {\n    this.disabled = !(<any>tdLayoutClose === '' || tdLayoutClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutOpen]',\n})\nexport class TdLayoutOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutOpen') \n  set tdLayoutClose(tdLayoutOpen: boolean) {\n    this.disabled = !(<any>tdLayoutOpen === '' || tdLayoutOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n",
    "import { Component, Input, forwardRef, Optional, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TdLayoutComponent } from '../layout.component';\n\n@Component({\n  selector: 'td-layout-nav',\n  styles: [`.td-menu-button{\n  margin-left:0; }\n  ::ng-deep [dir='rtl'] .td-menu-button{\n    margin-right:0;\n    margin-left:6px; }\n\n:host{\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  margin:0;\n  width:100%;\n  min-height:100%;\n  height:100%;\n  overflow:hidden; }\n  :host .td-layout-nav-wrapper{\n    -webkit-box-orient:vertical;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:column;\n            flex-direction:column;\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    margin:0;\n    width:100%;\n    min-height:100%;\n    height:100%; }\n    :host .td-layout-nav-wrapper .td-layout-nav-toolbar-content{\n      -webkit-box-orient:horizontal;\n      -webkit-box-direction:normal;\n          -ms-flex-direction:row;\n              flex-direction:row;\n      -webkit-box-sizing:border-box;\n              box-sizing:border-box;\n      display:-webkit-box;\n      display:-ms-flexbox;\n      display:flex;\n      -webkit-box-align:center;\n          -ms-flex-align:center;\n              align-items:center;\n      -ms-flex-line-pack:center;\n          align-content:center;\n      max-width:100%;\n      -webkit-box-pack:start;\n          -ms-flex-pack:start;\n              justify-content:start; }\n    :host .td-layout-nav-wrapper .td-layout-nav-content{\n      -webkit-box-orient:vertical;\n      -webkit-box-direction:normal;\n          -ms-flex-direction:column;\n              flex-direction:column;\n      -webkit-box-sizing:border-box;\n              box-sizing:border-box;\n      display:-webkit-box;\n      display:-ms-flexbox;\n      display:flex;\n      -webkit-box-flex:1;\n          -ms-flex:1;\n              flex:1;\n      position:relative;\n      overflow:auto;\n      -webkit-overflow-scrolling:touch; }\n`],\n  template: `<div class=\"td-layout-nav-wrapper\">\n  <mat-toolbar [color]=\"color\">\n    <ng-content select=\"[td-menu-button]\"></ng-content>\n    <span *ngIf=\"icon || logo || toolbarTitle\"\n          [class.cursor-pointer]=\"routerEnabled\"\n          (click)=\"handleNavigationClick()\"\n          class=\"td-layout-nav-toolbar-content\">\n      <mat-icon *ngIf=\"icon\">{{icon}}</mat-icon>\n      <mat-icon *ngIf=\"logo && !icon\" class=\"mat-icon-logo\" [svgIcon]=\"logo\"></mat-icon>\n      <span *ngIf=\"toolbarTitle\">{{toolbarTitle}}</span>\n    </span>\n    <ng-content select=\"[td-toolbar-content]\"></ng-content>\n  </mat-toolbar>\n  <div class=\"td-layout-nav-content\" cdkScrollable>\n    <ng-content></ng-content>\n  </div>\n  <ng-content select=\"td-layout-footer\"></ng-content>\n</div>\n`,\n})\nexport class TdLayoutNavComponent {\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n}\n",
    "import { Component, Input, ViewChild, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-nav-list',\n  styles: [`:host{\n  margin:0;\n  width:100%;\n  min-height:100%;\n  height:100%;\n  overflow:hidden;\n  -webkit-box-orient:vertical;\n  -webkit-box-direction:normal;\n      -ms-flex-direction:column;\n          flex-direction:column;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  -webkit-box-flex:1;\n      -ms-flex:1;\n          flex:1; }\n  :host .td-layout-nav-list-wrapper{\n    -webkit-box-orient:vertical;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:column;\n            flex-direction:column;\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-flex:1;\n        -ms-flex:1;\n            flex:1;\n    position:relative;\n    overflow:auto;\n    -webkit-overflow-scrolling:touch; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-toolbar-content{\n      -webkit-box-orient:horizontal;\n      -webkit-box-direction:normal;\n          -ms-flex-direction:row;\n              flex-direction:row;\n      -webkit-box-sizing:border-box;\n              box-sizing:border-box;\n      display:-webkit-box;\n      display:-ms-flexbox;\n      display:flex;\n      -webkit-box-align:center;\n          -ms-flex-align:center;\n              align-items:center;\n      -ms-flex-line-pack:center;\n          align-content:center;\n      max-width:100%;\n      -webkit-box-pack:start;\n          -ms-flex-pack:start;\n              justify-content:start; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-content{\n      text-align:start;\n      -webkit-box-flex:1;\n          -ms-flex:1;\n              flex:1;\n      display:block;\n      position:relative;\n      overflow:auto;\n      -webkit-overflow-scrolling:touch; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-main{\n      -webkit-box-orient:vertical;\n      -webkit-box-direction:normal;\n          -ms-flex-direction:column;\n              flex-direction:column;\n      -webkit-box-sizing:border-box;\n              box-sizing:border-box;\n      display:-webkit-box;\n      display:-ms-flexbox;\n      display:flex;\n      margin:0;\n      width:100%;\n      min-height:100%;\n      height:100%;\n      position:relative;\n      overflow:auto; }\n      :host .td-layout-nav-list-wrapper .td-layout-nav-list-main .td-layout-nav-list-content{\n        display:block;\n        position:relative;\n        overflow:auto;\n        -webkit-overflow-scrolling:touch;\n        -webkit-box-flex:1;\n            -ms-flex:1;\n                flex:1; }\n    :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list{\n      -webkit-box-flex:1;\n          -ms-flex:1;\n              flex:1; }\n      :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-opened, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-opening, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-closed, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-closing{\n        -webkit-box-shadow:none;\n                box-shadow:none; }\n\n:host ::ng-deep mat-sidenav-container.td-layout-nav-list{ }\n  :host ::ng-deep mat-sidenav-container.td-layout-nav-list > .mat-drawer-content{\n    -webkit-box-flex:1;\n        -ms-flex-positive:1;\n            flex-grow:1; }\n  :host ::ng-deep mat-sidenav-container.td-layout-nav-list > mat-sidenav{\n    -webkit-box-shadow:0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n            box-shadow:0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-orient:vertical;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:column;\n            flex-direction:column; }\n`],\n  template: `<div class=\"td-layout-nav-list-wrapper\">\n  <mat-sidenav-container fullscreen class=\"td-layout-nav-list\">\n    <mat-sidenav #sidenav\n                position=\"start\"\n                [mode]=\"mode\"\n                [opened]=\"opened\"\n                [disableClose]=\"disableClose\"\n                [style.max-width]=\"sidenavWidth\"\n                [style.min-width]=\"sidenavWidth\">\n      <mat-toolbar [color]=\"color\">\n        <ng-content select=\"[td-menu-button]\"></ng-content>\n        <span *ngIf=\"icon || logo || toolbarTitle\"\n              class=\"td-layout-nav-list-toolbar-content\"\n              [class.cursor-pointer]=\"routerEnabled\"\n              (click)=\"handleNavigationClick()\">\n          <mat-icon *ngIf=\"icon\">{{icon}}</mat-icon>\n          <mat-icon *ngIf=\"logo && !icon\" class=\"mat-icon-logo\" [svgIcon]=\"logo\"></mat-icon>\n          <span *ngIf=\"toolbarTitle\">{{toolbarTitle}}</span>\n        </span>\n        <ng-content select=\"[td-sidenav-toolbar-content]\"></ng-content>\n      </mat-toolbar>\n      <div class=\"td-layout-nav-list-content\" cdkScrollable>\n        <ng-content select=\"[td-sidenav-content]\"></ng-content>\n      </div>\n    </mat-sidenav>\n    <div class=\"td-layout-nav-list-main\">\n      <mat-toolbar [color]=\"color\">\n        <ng-content select=\"[td-toolbar-content]\"></ng-content>\n      </mat-toolbar>\n      <div class=\"td-layout-nav-list-content\" cdkScrollable>\n        <ng-content></ng-content>\n      </div>\n      <ng-content select=\"td-layout-footer-inner\"></ng-content>\n    </div>\n  </mat-sidenav-container>\n</div>\n<ng-content select=\"td-layout-footer\"></ng-content>`,\n})\nexport class TdLayoutNavListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"350px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '350px';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutNavListComponent } from './layout-nav-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutNavListToggle]',\n})\nexport class TdLayoutNavListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListToggle') \n  set tdLayoutNavListToggle(tdLayoutNavListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutNavListToggle === '' || tdLayoutNavListToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListClose]',\n})\nexport class TdLayoutNavListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutNavListClose') \n  set tdLayoutNavListClose(tdLayoutNavListClose: boolean) {\n    this.disabled = !(<any>tdLayoutNavListClose === '' || tdLayoutNavListClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListOpen]',\n})\nexport class TdLayoutNavListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListOpen') \n  set tdLayoutNavListOpen(tdLayoutNavListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutNavListOpen === '' || tdLayoutNavListOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n",
    "import { Component } from '@angular/core';\nimport { Input } from '@angular/core';\n\n@Component({\n  selector: 'td-layout-card-over',\n  styles: [`:host{\n  position:relative;\n  display:block;\n  z-index:2;\n  width:100%;\n  min-height:100%;\n  height:100%; }\n  :host [td-after-card]{\n    display:block; }\n\n.td-layout-card-over-wrapper{\n  margin:-64px;\n  margin-left:0;\n  margin-right:0;\n  width:100%;\n  min-height:100%;\n  height:100%; }\n  @media (min-width: 600px){\n    .td-layout-card-over-wrapper{\n      -webkit-box-orient:horizontal;\n      -webkit-box-direction:normal;\n          -ms-flex-direction:row;\n              flex-direction:row;\n      -webkit-box-sizing:border-box;\n              box-sizing:border-box;\n      display:-webkit-box;\n      display:-ms-flexbox;\n      display:flex;\n      -webkit-box-align:start;\n          -ms-flex-align:start;\n              align-items:flex-start;\n      -ms-flex-line-pack:start;\n          align-content:flex-start;\n      -webkit-box-pack:center;\n          -ms-flex-pack:center;\n              justify-content:center; }\n      .td-layout-card-over-wrapper .td-layout-card-over{\n        max-height:100%;\n        -webkit-box-sizing:border-box;\n                box-sizing:border-box; } }\n  @media (max-width: 599px){\n    .td-layout-card-over-wrapper .td-layout-card-over{\n      max-width:100% !important; } }\n`],\n  template: `<mat-toolbar [color]=\"color\">\n</mat-toolbar>\n<div class=\"td-layout-card-over-wrapper\">\n  <div class=\"td-layout-card-over\"\n        [style.max-width.%]=\"cardWidth\"\n        [style.flex]=\"'1 1 ' + cardWidth + '%'\"\n        [style.-ms-flex]=\"'1 1 ' + cardWidth + '%'\"\n        [style.-webkit-box-flex]=\"1\">\n    <mat-card>\n      <mat-card-title *ngIf=\"cardTitle\">{{cardTitle}}</mat-card-title>\n      <mat-card-subtitle *ngIf=\"cardSubtitle\">{{cardSubtitle}}</mat-card-subtitle>\n      <mat-divider *ngIf=\"cardTitle || cardSubtitle\"></mat-divider>\n      <ng-content></ng-content>\n    </mat-card>\n    <ng-content select=\"[td-after-card]\"></ng-content>\n  </div>\n</div>\n`,\n})\nexport class TdLayoutCardOverComponent {\n\n  /**\n   * cardTitle?: string\n   *\n   * Title set in card.\n   */\n  @Input('cardTitle') cardTitle: string;\n\n  /**\n   * cardSubtitle?: string\n   *\n   * Subtitle set in card.\n   */\n  @Input('cardSubtitle') cardSubtitle: string;\n\n  /**\n   * cardWidth?: string\n   *\n   * Card flex width in %.\n   * Defaults to 70%.\n   */\n  @Input('cardWidth') cardWidth: number = 70;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n}\n",
    "import { Component, Directive, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-manage-list',\n  styles: [`:host{\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  margin:0;\n  width:100%;\n  min-height:100%;\n  height:100%;\n  overflow:hidden; }\n  :host mat-sidenav-container.td-layout-manage-list{\n    -webkit-box-flex:1;\n        -ms-flex:1;\n            flex:1; }\n    :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-opened, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-opening, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-closed, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-closing{\n      -webkit-box-shadow:0 1px 3px 0 rgba(0, 0, 0, 0.2);\n              box-shadow:0 1px 3px 0 rgba(0, 0, 0, 0.2); }\n  :host .td-layout-manage-list-sidenav{\n    text-align:start;\n    -webkit-box-flex:1;\n        -ms-flex:1;\n            flex:1;\n    display:block;\n    position:relative;\n    overflow:auto;\n    -webkit-overflow-scrolling:touch; }\n  :host .td-layout-manage-list-main{\n    margin:0;\n    width:100%;\n    min-height:100%;\n    height:100%;\n    position:relative;\n    overflow:auto;\n    -webkit-box-orient:vertical;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:column;\n            flex-direction:column;\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex; }\n    :host .td-layout-manage-list-main .td-layout-manage-list-content{\n      display:block;\n      position:relative;\n      overflow:auto;\n      -webkit-overflow-scrolling:touch;\n      -webkit-box-flex:1;\n          -ms-flex:1;\n              flex:1; }\n\n:host ::ng-deep mat-sidenav-container.td-layout-manage-list{ }\n  :host ::ng-deep mat-sidenav-container.td-layout-manage-list > .mat-drawer-content{\n    -webkit-box-flex:1;\n        -ms-flex-positive:1;\n            flex-grow:1; }\n  :host ::ng-deep mat-sidenav-container.td-layout-manage-list > mat-sidenav{\n    -webkit-box-shadow:0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n            box-shadow:0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-orient:vertical;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:column;\n            flex-direction:column; }\n\n:host ::ng-deep mat-nav-list a[mat-list-item] .mat-list-item-content{\n  font-size:14px; }\n\n:host ::ng-deep .mat-toolbar{\n  font-weight:400; }\n`],\n  template: `<mat-sidenav-container fullscreen class=\"td-layout-manage-list\">\n  <mat-sidenav #sidenav\n              position=\"start\"\n              [mode]=\"mode\"\n              [opened]=\"opened\"\n              [disableClose]=\"disableClose\"\n              [style.max-width]=\"sidenavWidth\"\n              [style.min-width]=\"sidenavWidth\">\n    <ng-content select=\"mat-toolbar[td-sidenav-content]\"></ng-content>\n    <div class=\"td-layout-manage-list-sidenav\" cdkScrollable>\n      <ng-content select=\"[td-sidenav-content]\"></ng-content>\n    </div>\n  </mat-sidenav>\n  <div class=\"td-layout-manage-list-main\">\n    <ng-content select=\"mat-toolbar\"></ng-content>\n    <div class=\"td-layout-manage-list-content\" cdkScrollable>\n      <ng-content></ng-content>\n    </div>\n    <ng-content select=\"td-layout-footer-inner\"></ng-content>\n  </div>\n</mat-sidenav-container>\n`,\n})\nexport class TdLayoutManageListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"257px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '257px';\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutManageListComponent } from './layout-manage-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutManageListToggle]',\n})\nexport class TdLayoutManageListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListToggle') \n  set tdLayoutManageListToggle(tdLayoutManageListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutManageListToggle === '' || tdLayoutManageListToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListClose]',\n})\nexport class TdLayoutManageListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutManageListClose') \n  set tdLayoutManageListClose(tdLayoutManageListClose: boolean) {\n    this.disabled = !(<any>tdLayoutManageListClose === '' || tdLayoutManageListClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListOpen]',\n})\nexport class TdLayoutManageListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListOpen') \n  set tdLayoutManageListOpen(tdLayoutManageListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutManageListOpen === '' || tdLayoutManageListOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "TdLayoutComponent",
    "mode",
    "opened",
    "sidenavWidth",
    "get",
    "sidenav",
    "close",
    "_this",
    "_hideWhenOpened",
    "defineProperty",
    "LayoutToggle",
    "enumerable",
    "configurable",
    "ngAfterViewInit",
    "ngOnDestroy",
    "event",
    "preventDefault",
    "disabled",
    "_toggleVisibility",
    "_layout",
    "_renderer",
    "setStyle",
    "_elementRef",
    "nativeElement",
    "_TdLayoutToggleMixinBase",
    "propDecorators",
    "hideWhenOpened",
    "type",
    "Input",
    "args",
    "clickListener",
    "HostListener",
    "TdLayoutToggleDirective",
    "_super",
    "tslib_1.__extends",
    "onClick",
    "toggle",
    "Directive",
    "selector",
    "decorators",
    "Inject",
    "forwardRef",
    "Renderer2",
    "ElementRef",
    "tdLayoutToggle",
    "TdLayoutCloseDirective",
    "ctorParameters",
    "tdLayoutClose",
    "TdLayoutOpenDirective",
    "open",
    "TdLayoutNavComponent",
    "_router",
    "color",
    "navigationRoute",
    "handleNavigationClick",
    "TdLayoutNavListComponent",
    "routerEnabled",
    "ViewChild",
    "MatSidenav",
    "TdLayoutNavListToggleDirective",
    "set",
    "tdLayoutNavListToggle",
    "TdLayoutNavListCloseDirective",
    "styles",
    "template",
    "TdLayoutManageListComponent",
    "Component",
    "TdLayoutManageListToggleDirective",
    "layout",
    "renderer",
    "elementRef",
    "call",
    "tdLayoutManageListToggle",
    "TdLayoutManageListCloseDirective",
    "TdLayoutManageListOpenDirective",
    "_color",
    "addClass",
    "TdNavigationDrawerToolbarDirective",
    "_sanitize",
    "_menuToggled",
    "TdNavigationDrawerComponent",
    "animations",
    "TdCollapseAnimation",
    "DomSanitizer",
    "icon",
    "logo",
    "TdNavigationDrawerMenuDirective",
    "CovalentLayoutModule",
    "NgModule",
    "imports",
    "MatButtonModule",
    "MatIconModule",
    "TD_LAYOUTS",
    "exports"
  ],
  "mappings": "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"
}
