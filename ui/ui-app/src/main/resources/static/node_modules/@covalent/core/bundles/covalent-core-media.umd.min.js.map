{"version":3,"file":"covalent-core-media.umd.min.js","sources":["../../out/services/media.service.ts","../../out/directives/media-toggle.directive.ts","../../out/media.module.ts"],"sourcesContent":["import { Injectable, NgZone, SkipSelf, Optional, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\n\n@Injectable()\nexport class TdMediaService {\n\n  private _resizing: boolean = false;\n  private _globalSubscription: Subscription;\n  private _queryMap: Map<string, string> = new Map<string, string>();\n  private _querySources: { [key: string]: BehaviorSubject<boolean>} = {};\n  private _queryObservables: {[key: string]: Observable<boolean>} = {};\n\n  constructor(private _ngZone: NgZone) {\n    this._queryMap.set('xs', '(max-width: 599px)');\n    this._queryMap.set('gt-xs', '(min-width: 600px)');\n    this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');\n    this._queryMap.set('gt-sm', '(min-width: 960px)');\n    this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');\n    this._queryMap.set('gt-md', '(min-width: 1280px)');\n    this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');\n    this._queryMap.set('gt-lg', '(min-width: 1920px)');\n    this._queryMap.set('xl', '(min-width: 1920px)');\n    this._queryMap.set('landscape', '(orientation: landscape)');\n    this._queryMap.set('portrait', '(orientation: portrait)');\n    this._queryMap.set('print', 'print');\n\n    this._resizing = false;\n    // we make sure that the resize checking happend outside of angular since it happens often\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window, 'resize').subscribe(() => {\n        // way to prevent the resize event from triggering the match media if there is already one event running already.\n        if (!this._resizing) {\n          this._resizing = true;\n          setTimeout(() => {\n            this._onResize();\n            this._resizing = false;\n          }, 100);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deregisters a query so its stops being notified or used.\n   */\n  deregisterQuery(query: string): void {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    this._querySources[query].unsubscribe();\n    delete this._querySources[query];\n    delete this._queryObservables[query];\n  }\n\n  /**\n   * Used to evaluate whether a given media query is true or false given the current device's screen / window size.\n   */\n  public query(query: string): boolean {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    return this._ngZone.run(() => {\n      return matchMedia(query).matches;\n    });\n  }\n\n  /**\n   * Registers a media query and returns an [Observable] that will re-evaluate and\n   * return if the given media query matches on window resize.\n   * Note: don't forget to unsubscribe from [Observable] when finished watching.\n   */\n  public registerQuery(query: string): Observable<boolean> {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    if (!this._querySources[query]) {\n      this._querySources[query] = new BehaviorSubject<boolean>(matchMedia(query).matches);\n      this._queryObservables[query] = this._querySources[query].asObservable();\n    }\n    return this._queryObservables[query];\n  }\n\n  /**\n   * Trigger a match media event on all subscribed observables.\n   */\n  public broadcast(): void {\n    this._onResize();\n  }\n\n  private _onResize(): void {\n    for (let query in this._querySources) {\n      this._ngZone.run(() => {\n        this._matchMediaTrigger(query);\n      });\n    }\n  }\n\n  private _matchMediaTrigger(query: string): void {\n    this._querySources[query].next(matchMedia(query).matches);\n  }\n}\n\nexport function MEDIA_PROVIDER_FACTORY(\n    parent: TdMediaService, ngZone: NgZone): TdMediaService {\n  return parent || new TdMediaService(ngZone);\n}\n\nexport const MEDIA_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdMediaService,\n  deps: [[new Optional(), new SkipSelf(), TdMediaService], NgZone],\n  useFactory: MEDIA_PROVIDER_FACTORY,\n};\n","import { Directive, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdMediaService } from '../services/media.service';\n\n@Directive({\n  selector: '[tdMediaToggle]',\n})\nexport class TdMediaToggleDirective implements OnInit, OnDestroy {\n\n  private _subscription: Subscription;\n\n  private _query: string;\n  private _matches: boolean = false;\n  private _attributes: {[key: string]: string} = {};\n  private _styles: {[key: string]: string} = {};\n  private _classes: string[] = [];\n\n  /**\n   * tdMediaToggle: string\n   * Media query used to evaluate screen/window size.\n   * Toggles attributes, classes and styles if media query is matched.\n   */\n  @Input('tdMediaToggle')\n  set query(query: string) {\n    if (!query) {\n      throw new Error('Query needed for [tdMediaToggle] directive.');\n    }\n    this._query = query;\n  }\n\n  /**\n   * mediaAttributes: {[key: string]: string}\n   * Attributes to be toggled when media query matches.\n   */\n  @Input('mediaAttributes')\n  set attributes(attributes: any) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * mediaClasses: string[]\n   * CSS Classes to be toggled when media query matches.\n   */\n  @Input('mediaClasses')\n  set classes(classes: string[]) {\n    this._classes = classes;\n  }\n\n  /**\n   * mediaStyles: {[key: string]: string}\n   * CSS Styles to be toggled when media query matches.\n   */\n  @Input('mediaStyles')\n  set styles(styles: any) {\n    this._styles = styles;\n  }\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef, private _mediaService: TdMediaService) { }\n\n  ngOnInit(): void {\n    this._mediaChange(this._mediaService.query(this._query));\n    this._subscription = this._mediaService.registerQuery(this._query).subscribe((matches: boolean) => {\n      this._mediaChange(matches);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  private _mediaChange(matches: boolean): void {\n    this._matches = matches;\n    this._changeAttributes();\n    this._changeClasses();\n    this._changeStyles();\n  }\n\n  private _changeAttributes(): void {\n    for (let attr in this._attributes) {\n      if (this._matches) {\n        this._renderer.setAttribute(this._elementRef.nativeElement, attr, this._attributes[attr]);\n      } else {\n        this._renderer.removeAttribute(this._elementRef.nativeElement, attr);\n      }\n    }\n  }\n\n  private _changeClasses(): void {\n    this._classes.forEach((className: string) => {\n      if (this._matches) {\n        this._renderer.addClass(this._elementRef.nativeElement, className);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, className);\n      }\n    });\n  }\n\n  private _changeStyles(): void {\n    for (let style in this._styles) {\n      if (this._matches) {\n        this._renderer.setStyle(this._elementRef.nativeElement, style, this._styles[style]);\n      } else {\n        this._renderer.removeStyle(this._elementRef.nativeElement, style);\n      }\n    }\n  }\n\n}\n","import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MEDIA_PROVIDER } from './services/media.service';\nimport { TdMediaToggleDirective } from './directives/media-toggle.directive';\n\nconst TD_MEDIA: Type<any>[] = [\n  TdMediaToggleDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_MEDIA,\n  ],\n  exports: [\n    TD_MEDIA,\n  ],\n  providers: [\n    MEDIA_PROVIDER,\n  ],\n})\nexport class CovalentMediaModule {\n\n}\n"],"names":["_this","this","_ngZone","_resizing","_queryMap","Map","_querySources","_queryObservables","set","_globalSubscription","runOutsideAngular","fromEvent","window","subscribe","setTimeout","_onResize","TdMediaService","prototype","deregisterQuery","query","get","toLowerCase","unsubscribe","run","matchMedia","matches","registerQuery","BehaviorSubject","asObservable","broadcast","_loop_1","this_1","_matchMediaTrigger","MEDIA_PROVIDER_FACTORY","parent","ngZone","TdMediaToggleDirective","_renderer","_elementRef","_mediaService","enumerable","configurable","attributes","_classes","classes","Object","defineProperty","styles","_styles","ngOnInit","ngOnDestroy","_subscription","_mediaChange","_matches","_changeAttributes","_changeClasses","_changeStyles","removeAttribute","nativeElement","attr","addClass","className","style","setStyle","decorators","type","Directive","args","ctorParameters","Renderer2","ElementRef","propDecorators","Input"],"mappings":"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"}