{
  "version": 3,
  "file": "covalent-core-chips.umd.js",
  "sources": [
    "ng://@covalent/core/chips/out/chips.component.ts",
    "ng://@covalent/core/chips/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "import { Component, Input, Output, forwardRef, DoCheck, ViewChild, ViewChildren, QueryList, OnInit, HostListener,\n  ElementRef, Optional, Inject, Directive, TemplateRef, ViewContainerRef, ContentChild, ChangeDetectionStrategy,\n  ChangeDetectorRef, AfterViewInit, OnDestroy, HostBinding, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\n\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, ESCAPE, LEFT_ARROW, RIGHT_ARROW, DELETE, BACKSPACE, ENTER, SPACE, TAB, HOME } from '@angular/cdk/keycodes';\nimport { MatChip } from '@angular/material/chips';\nimport { MatInput } from '@angular/material/input';\nimport { MatOption } from '@angular/material/core';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { timer } from 'rxjs/observable/timer';\nimport { merge } from 'rxjs/observable/merge';\nimport { toPromise } from 'rxjs/operator/toPromise';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter } from 'rxjs/operators/filter';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-chip]ng-template',\n})\nexport class TdChipDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-autocomplete-option]ng-template',\n})\nexport class TdAutocompleteOptionDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\nexport class TdChipsBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdChipsMixinBase = mixinControlValueAccessor(mixinDisabled(TdChipsBase), []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdChipsComponent),\n    multi: true,\n  }],\n  selector: 'td-chips',\n  inputs: ['disabled', 'value'],\n  styles: [`:host{\n  display:block;\n  padding:0 5px;\n  min-height:48px; }\n  :host .td-chips-wrapper{\n    min-height:42px;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-orient:horizontal;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:row;\n            flex-direction:row;\n    -ms-flex-wrap:wrap;\n        flex-wrap:wrap;\n    -webkit-box-align:start;\n        -ms-flex-align:start;\n            align-items:flex-start; }\n    :host .td-chips-wrapper.td-chips-stacked .mat-basic-chip,\n    :host .td-chips-wrapper.td-chips-stacked .td-chips-form-field{\n      width:100%; }\n    :host .td-chips-wrapper.td-chips-input-before-position .td-chips-form-field{\n      -webkit-box-ordinal-group:0;\n          -ms-flex-order:-1;\n              order:-1; }\n  :host .td-chip, :host .td-chip > .td-chip-content{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-orient:horizontal;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:row;\n            flex-direction:row;\n    max-width:100%;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center;\n    -ms-flex-line-pack:center;\n        align-content:center;\n    -webkit-box-pack:start;\n        -ms-flex-pack:start;\n            justify-content:start; }\n    :host .td-chip.td-chip-stacked, :host .td-chip > .td-chip-content.td-chip-stacked{\n      -webkit-box-pack:justify;\n          -ms-flex-pack:justify;\n              justify-content:space-between; }\n  :host ::ng-deep{ }\n    :host ::ng-deep .mat-form-field-wrapper{\n      padding-bottom:2px; }\n    :host ::ng-deep .mat-basic-chip{\n      display:inline-block;\n      cursor:default;\n      border-radius:16px;\n      margin:8px 8px 0 0;\n      -webkit-box-sizing:border-box;\n              box-sizing:border-box;\n      max-width:100%;\n      position:relative; }\n      html[dir=rtl] :host ::ng-deep .mat-basic-chip{\n        margin:8px 0 0 8px;\n        unicode-bidi:embed; }\n      body[dir=rtl] :host ::ng-deep .mat-basic-chip{\n        margin:8px 0 0 8px;\n        unicode-bidi:embed; }\n      [dir=rtl] :host ::ng-deep .mat-basic-chip{\n        margin:8px 0 0 8px;\n        unicode-bidi:embed; }\n      :host ::ng-deep .mat-basic-chip bdo[dir=rtl]{\n        direction:rtl;\n        unicode-bidi:bidi-override; }\n      :host ::ng-deep .mat-basic-chip bdo[dir=ltr]{\n        direction:ltr;\n        unicode-bidi:bidi-override; }\n      :host ::ng-deep .mat-basic-chip .td-chip{\n        min-height:32px;\n        line-height:32px;\n        font-size:13px;\n        padding:0 0 0 12px; }\n        html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip{\n          padding:0 12px 0 0;\n          unicode-bidi:embed; }\n        body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip{\n          padding:0 12px 0 0;\n          unicode-bidi:embed; }\n        [dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip{\n          padding:0 12px 0 0;\n          unicode-bidi:embed; }\n        :host ::ng-deep .mat-basic-chip .td-chip bdo[dir=rtl]{\n          direction:rtl;\n          unicode-bidi:bidi-override; }\n        :host ::ng-deep .mat-basic-chip .td-chip bdo[dir=ltr]{\n          direction:ltr;\n          unicode-bidi:bidi-override; }\n        :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{\n          display:inline-block;\n          -webkit-box-ordinal-group:-19;\n              -ms-flex-order:-20;\n                  order:-20;\n          -webkit-box-pack:center;\n              -ms-flex-pack:center;\n                  justify-content:center;\n          -webkit-box-align:center;\n              -ms-flex-align:center;\n                  align-items:center;\n          text-align:center;\n          height:32px;\n          width:32px;\n          margin:0 8px 0 -12px;\n          border-radius:50%; }\n          html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{\n            margin:0 -12px 0 8px;\n            unicode-bidi:embed; }\n          body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{\n            margin:0 -12px 0 8px;\n            unicode-bidi:embed; }\n          [dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar]{\n            margin:0 -12px 0 8px;\n            unicode-bidi:embed; }\n          :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=rtl]{\n            direction:rtl;\n            unicode-bidi:bidi-override; }\n          :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=ltr]{\n            direction:ltr;\n            unicode-bidi:bidi-override; }\n      :host ::ng-deep .mat-basic-chip.td-chip-after-pad{\n        padding:0 12px 0 0; }\n        html[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad{\n          padding:0 0 0 12px;\n          unicode-bidi:embed; }\n        body[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad{\n          padding:0 0 0 12px;\n          unicode-bidi:embed; }\n        [dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad{\n          padding:0 0 0 12px;\n          unicode-bidi:embed; }\n        :host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=rtl]{\n          direction:rtl;\n          unicode-bidi:bidi-override; }\n        :host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=ltr]{\n          direction:ltr;\n          unicode-bidi:bidi-override; }\n      :host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal{\n        margin:0 4px;\n        font-size:21px;\n        line-height:22px; }\n        :host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal:hover{\n          cursor:pointer; }\n    :host ::ng-deep .td-chips-stacked .mat-basic-chip{\n      margin:4px 0; }\n      :host ::ng-deep .td-chips-stacked .mat-basic-chip:first-of-type{\n        margin:8px 0 4px; }\n      :host ::ng-deep .td-chips-stacked .mat-basic-chip:last-of-type{\n        margin:4px 0 8px; }\n  :host .mat-form-field-underline{\n    position:relative;\n    height:1px;\n    width:100%;\n    bottom:0; }\n    :host .mat-form-field-underline.mat-disabled{\n      background-position:0;\n      bottom:-4px;\n      background-color:transparent; }\n    :host .mat-form-field-underline .mat-form-field-ripple{\n      position:absolute;\n      height:2px;\n      top:0;\n      width:100%;\n      -webkit-transform-origin:50%;\n              transform-origin:50%;\n      -webkit-transform:scaleX(0.5);\n              transform:scaleX(0.5);\n      visibility:hidden;\n      opacity:0;\n      -webkit-transition:background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\n      transition:background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2); }\n      :host .mat-form-field-underline .mat-form-field-ripple.mat-focused{\n        visibility:visible;\n        opacity:1;\n        -webkit-transform:scaleX(1);\n                transform:scaleX(1);\n        -webkit-transition:background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear;\n        transition:background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear;\n        transition:transform 150ms linear, background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\n        transition:transform 150ms linear, background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear; }\n  :host ::ng-deep mat-form-field .mat-form-field-underline{\n    display:none; }\n`],\n  template: `<div class=\"td-chips-wrapper\"\n     [class.td-chips-stacked]=\"stacked\"\n     [class.td-chips-input-before-position]=\"inputPosition === 'before'\">\n  <ng-template let-chip let-first=\"first\" let-index=\"index\" ngFor [ngForOf]=\"value\">\n    <mat-basic-chip [class.td-chip-disabled]=\"disabled\"\n                   [class.td-chip-after-pad]=\"!canRemoveChip\"\n                   [color]=\"color\"\n                   (keydown)=\"_chipKeydown($event, index)\"\n                   (blur)=\"_handleChipBlur($event, chip)\"\n                   (focus)=\"_handleChipFocus($event, chip)\">\n      <div class=\"td-chip\" [class.td-chip-stacked]=\"stacked\">\n        <span class=\"td-chip-content\">\n          <span *ngIf=\"!_chipTemplate?.templateRef\">{{chip}}</span>\n          <ng-template\n            *ngIf=\"_chipTemplate?.templateRef\"\n            [ngTemplateOutlet]=\"_chipTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ chip: chip }\">\n          </ng-template>\n        </span>\n        <mat-icon *ngIf=\"canRemoveChip\" class=\"td-chip-removal\" (click)=\"_internalClick = removeChip(index)\">\n          cancel\n        </mat-icon>\n      </div>\n    </mat-basic-chip>\n  </ng-template>\n  <mat-form-field floatPlaceholder=\"never\"\n                  class=\"td-chips-form-field\"\n                  [style.width.px]=\"canAddChip ? null : 0\"\n                  [style.height.px]=\"canAddChip ? null : 0\"\n                  [color]=\"color\">\n    <input matInput\n            #input\n            [tabIndex]=\"-1\"\n            [matAutocomplete]=\"autocomplete\"\n            [formControl]=\"inputControl\"\n            [placeholder]=\"canAddChip? placeholder : ''\"\n            (keydown)=\"_inputKeydown($event)\"\n            (keyup.enter)=\"_handleAddChip()\"\n            (focus)=\"_handleFocus()\">\n  </mat-form-field>\n  <mat-autocomplete #autocomplete=\"matAutocomplete\"\n                   [displayWith]=\"_removeInputDisplay\"\n                   (optionSelected)=\"addChip($event.option.value)\">\n    <ng-template let-item let-first=\"first\" ngFor [ngForOf]=\"items\">\n      <mat-option (click)=\"_setInternalClick()\" [value]=\"item\">\n        <span *ngIf=\"!_autocompleteOptionTemplate?.templateRef\">{{item}}</span>\n        <ng-template\n          *ngIf=\"_autocompleteOptionTemplate?.templateRef\"\n          [ngTemplateOutlet]=\"_autocompleteOptionTemplate?.templateRef\"\n          [ngTemplateOutletContext]=\"{ option: item }\">\n        </ng-template>\n      </mat-option>\n    </ng-template>\n  </mat-autocomplete>\n</div>\n<div *ngIf=\"chipAddition\" class=\"mat-form-field-underline\"\n      [class.mat-disabled]=\"disabled\">\n  <span class=\"mat-form-field-ripple\"\n        [class.mat-focused]=\"focused\"></span>\n</div>\n<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdChipsComponent extends _TdChipsMixinBase implements IControlValueAccessor, DoCheck, OnInit, AfterViewInit, OnDestroy, ICanDisable {\n\n  private _outsideClickSubs: Subscription;\n\n  private _isMousedown: boolean = false;\n\n  private _items: any[];\n  private _length: number = 0;\n  private _stacked: boolean = false;\n  private _requireMatch: boolean = false;\n  private _color: 'primary' | 'accent' | 'warn' = 'primary';\n  private _inputPosition: 'before' | 'after' = 'after';\n  private _chipAddition: boolean = true;\n  private _chipRemoval: boolean = true;\n  private _focused: boolean = false;\n  private _tabIndex: number = 0;\n\n  _internalClick: boolean = false;\n  _internalActivateOption: boolean = false;\n\n  @ViewChild('input') _nativeInput: ElementRef;\n  @ViewChild(MatInput) _inputChild: MatInput;\n  @ViewChild(MatAutocompleteTrigger) _autocompleteTrigger: MatAutocompleteTrigger;\n  @ViewChildren(MatChip) _chipsChildren: QueryList<MatChip>;\n\n  @ContentChild(TdChipDirective) _chipTemplate: TdChipDirective;\n  @ContentChild(TdAutocompleteOptionDirective) _autocompleteOptionTemplate: TdAutocompleteOptionDirective;\n\n  @ViewChildren(MatOption) _options: QueryList<MatOption>;\n\n  /**\n   * Flag that is true when autocomplete is focused.\n   */\n  get focused(): boolean {\n    return this._focused;\n  }\n\n  /**\n   * FormControl for the matInput element.\n   */\n  inputControl: FormControl = new FormControl();\n\n  /**\n   * items?: any[]\n   * Renders the `mat-autocomplete` with the provided list to display as options.\n   */\n  @Input('items')\n  set items(items: any[]) {\n    this._items = items;\n    this._setFirstOptionActive();\n    this._changeDetectorRef.markForCheck();\n  }\n  get items(): any[] {\n    return this._items;\n  }\n\n  /**\n   * stacked?: boolean\n   * Set stacked or horizontal chips depending on value.\n   * Defaults to false.\n   */\n  @Input('stacked')\n  set stacked(stacked: boolean) {\n    this._stacked = coerceBooleanProperty(stacked);\n  }\n  get stacked(): boolean {\n    return this._stacked;\n  }\n\n  /**\n   * inputPosition?: 'before' | 'after'\n   * Set input position before or after the chips.\n   * Defaults to 'after'.\n   */\n  @Input('inputPosition')\n  set inputPosition(inputPosition: 'before' | 'after') {\n    this._inputPosition = inputPosition;\n  }\n  get inputPosition(): 'before' | 'after' {\n    return this._inputPosition;\n  }\n\n  /**\n   * requireMatch?: boolean\n   * Blocks custom inputs and only allows selections from the autocomplete list.\n   */\n  @Input('requireMatch')\n  set requireMatch(requireMatch: boolean) {\n    this._requireMatch = coerceBooleanProperty(requireMatch);\n  }\n  get requireMatch(): boolean {\n    return this._requireMatch;\n  }\n\n  /**\n   * chipAddition?: boolean\n   * Disables the ability to add chips. When setting disabled as true, this will be overriden.\n   * Defaults to true.\n   */\n  @Input('chipAddition')\n  set chipAddition(chipAddition: boolean) {\n    this._chipAddition = chipAddition;\n    this._toggleInput();\n  }\n  get chipAddition(): boolean {\n    return this._chipAddition;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   * States if a chip can be added and if the input is available\n   */\n  get canAddChip(): boolean {\n    return this.chipAddition && !this.disabled;\n  }\n\n  /**\n   * chipRemoval?: boolean\n   * Disables the ability to remove chips. If it doesn't exist chip remmoval defaults to true.\n   * When setting disabled as true, this will be overriden to false.\n   */\n  @Input('chipRemoval')\n  set chipRemoval(chipRemoval: boolean) {\n    this._chipRemoval = chipRemoval;\n  }\n  get chipRemoval(): boolean {\n    return this._chipRemoval;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipRemoval is set to 'true'\n   * States if a chip can be removed\n   */\n  get canRemoveChip(): boolean {\n    return this.chipRemoval && !this.disabled;\n  }\n\n  /**\n   * placeholder?: string\n   * Placeholder for the autocomplete input.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * debounce?: number\n   * Debounce timeout between keypresses. Defaults to 200.\n   */\n  @Input('debounce') debounce: number = 200;\n\n  /**\n   * color?: 'primary' | 'accent' | 'warn'\n   * Sets the color for the input and focus/selected state of the chips.\n   * Defaults to 'primary'\n   */\n  @Input('color')\n  set color(color: 'primary' | 'accent' | 'warn') {\n    if (color) {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n      this._color = color;\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    }\n  }\n  get color(): 'primary' | 'accent' | 'warn' {\n    return this._color;\n  }\n\n  /**\n   * add?: function\n   * Method to be executed when a chip is added.\n   * Sends chip value as event.\n   */\n  @Output('add') onAdd: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * remove?: function\n   * Method to be executed when a chip is removed.\n   * Sends chip value as event.\n   */\n  @Output('remove') onRemove: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * inputChange?: function\n   * Method to be executed when the value in the autocomplete input changes.\n   * Sends string value as event.\n   */\n  @Output('inputChange') onInputChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * chipFocus?: function\n   * Method to be executed when a chip is focused.\n   * Sends chip value as event.\n   */\n  @Output('chipFocus') onChipFocus: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * blur?: function\n   * Method to be executed when a chip is blurred.\n   * Sends chip value as event.\n   */\n  @Output('chipBlur') onChipBlur: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Hostbinding to set the a11y of the TdChipsComponent depending on its state\n   */\n  @HostBinding('attr.tabindex')\n  get tabIndex(): number {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer2,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n  }\n\n  /**\n   * Listens to host focus event to act on it\n   */\n  @HostListener('focus', ['$event'])\n  focusListener(event: FocusEvent): void {\n    // should only focus if its not via mousedown to prevent clashing with autocomplete\n    if (!this._isMousedown) {\n      this.focus();\n    }\n    event.preventDefault();\n  }\n\n  /**\n   * Listens to host mousedown event to act on it\n   */\n  @HostListener('mousedown', ['$event'])\n  mousedownListener(event: FocusEvent): void {\n     // sets a flag to know if there was a mousedown and then it returns it back to false\n    this._isMousedown = true;\n    toPromise.call(timer()).then(() => {\n      this._isMousedown = false;\n    });\n  }\n\n  /**\n   * If clicking on :host or `td-chips-wrapper`, then we stop the click propagation so the autocomplete\n   * doesnt close automatically.\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    const clickTarget: HTMLElement = <HTMLElement>event.target;\n    if (clickTarget === this._elementRef.nativeElement ||\n        clickTarget.className.indexOf('td-chips-wrapper') > -1) {\n      this.focus();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Listens to host keydown event to act on it depending on the keypress\n   */\n  @HostListener('keydown', ['$event'])\n  keydownListener(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case TAB:\n        // if tabing out, then unfocus the component\n        toPromise.call(timer()).then(() => {\n          this.removeFocusedState();\n        });\n        break;\n      case ESCAPE:\n        if (this._inputChild.focused) {\n          this._nativeInput.nativeElement.blur();\n          this.removeFocusedState();\n          this._closeAutocomplete();\n        } else {\n          this.focus();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  ngOnInit(): void {\n    this.inputControl.valueChanges.pipe(\n      debounceTime(this.debounce),\n    ).subscribe((value: string) => {\n      this.onInputChange.emit(value ? value : '');\n    });\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterViewInit(): void {\n    this._watchOutsideClick();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngDoCheck(): void {\n    // Throw onChange event only if array changes size.\n    if (this.value && this.value.length !== this._length) {\n      this._length = this.value.length;\n      this.onChange(this.value);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._outsideClickSubs) {\n      this._outsideClickSubs.unsubscribe();\n      this._outsideClickSubs = undefined;\n    }\n  }\n\n  _setInternalClick(): void {\n    this._internalClick = true;\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    this._toggleInput();\n  }\n\n  /**\n   * Method that is executed when trying to create a new chip from the autocomplete.\n   * It check if [requireMatch] is enabled, and tries to add the first active option\n   * else if just adds the value thats on the input\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  _handleAddChip(): boolean {\n    let value: any;\n    if (this.requireMatch) {\n      let selectedOptions: MatOption[] = this._options.toArray().filter((option: MatOption) => {\n        return option.active;\n      });\n      if (selectedOptions.length > 0) {\n        value = selectedOptions[0].value;\n        selectedOptions[0].setInactiveStyles();\n      }\n      if (!value) {\n        return false;\n      }\n    } else {\n      // if there is a selection, then use that\n      // else use the input value as chip\n      if (this._autocompleteTrigger.activeOption) {\n        value = this._autocompleteTrigger.activeOption.value;\n        this._autocompleteTrigger.activeOption.setInactiveStyles();\n      } else {\n        value = this._inputChild.value;\n        if (value.trim() === '') {\n          return false;\n        }\n      }\n    }\n    return this.addChip(value);\n  }\n\n  /**\n   * Method thats exectuted when trying to add a value as chip\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  addChip(value: any): boolean {\n    /**\n     * add a debounce ms delay when reopening the autocomplete to give it time\n     * to rerender the next list and at the correct spot\n     */\n    this._closeAutocomplete();\n    toPromise.call(timer(this.debounce)).then(() => {\n      this.setFocusedState();\n      this._setFirstOptionActive();\n      this._openAutocomplete();\n    });\n\n    this.inputControl.setValue('');\n    // check if value is already part of the model\n    if (this.value.indexOf(value) > -1) {\n      return false;\n    }\n\n    this.value.push(value);\n    this.onAdd.emit(value);\n    this.onChange(this.value);\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Method that is executed when trying to remove a chip.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  removeChip(index: number): boolean {\n    let removedValues: any[] = this.value.splice(index, 1);\n    if (removedValues.length === 0) {\n      return false;\n    }\n\n    /**\n     * Checks if deleting last single chip, to focus input afterwards\n     * Else check if its not the last chip of the list to focus the next one.\n     */\n    if (index === (this._totalChips - 1) && index === 0) {\n      this._inputChild.focus();\n    } else if (index < (this._totalChips - 1)) {\n      this._focusChip(index + 1);\n    } else if (index > 0) {\n      this._focusChip(index - 1);\n    }\n\n    this.onRemove.emit(removedValues[0]);\n    this.onChange(this.value);\n    this.inputControl.setValue('');\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Sets blur of chip and sends out event\n   */\n  _handleChipBlur(event: FocusEvent, value: any): void {\n    this.onChipBlur.emit(value);\n  }\n\n  /**\n   * Sets focus of chip and sends out event\n   */\n  _handleChipFocus(event: FocusEvent, value: any): void {\n    this.setFocusedState();\n    this.onChipFocus.emit(value);\n  }\n\n  _handleFocus(): boolean {\n    this.setFocusedState();\n    this._setFirstOptionActive();\n    return true;\n  }\n\n  /**\n   * Sets focus state of the component\n   */\n  setFocusedState(): void {\n    if (!this.disabled) {\n      this._focused = true;\n      this._tabIndex = -1;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Removes focus state of the component\n   */\n  removeFocusedState(): void {\n    this._focused = false;\n    this._tabIndex = 0;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Programmatically focus the input or first chip. Since its the component entry point\n   * depending if a user can add or remove chips\n   */\n  focus(): void {\n    if (this.canAddChip) {\n      this._inputChild.focus();\n    } else if (!this.disabled) {\n      this._focusFirstChip();\n    }\n  }\n\n  /**\n   * Passes relevant input key presses.\n   */\n  _inputKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case UP_ARROW:\n        /**\n         * Since the first item is highlighted on [requireMatch], we need to inactivate it\n         * when pressing the up key\n         */\n        if (this.requireMatch) {\n          let length: number = this._options.length;\n          if (length > 1 && this._options.toArray()[0].active && this._internalActivateOption) {\n            this._options.toArray()[0].setInactiveStyles();\n            this._internalActivateOption = false;\n            // prevent default window scrolling\n            event.preventDefault();\n          }\n        }\n        break;\n      case LEFT_ARROW:\n      case DELETE:\n      case BACKSPACE:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing left arrow to move to the last chip */\n        if (!this._inputChild.value) {\n          this._focusLastChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      case RIGHT_ARROW:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing right arrow to move to the first chip */\n        if (!this._inputChild.value) {\n          this._focusFirstChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Passes relevant chip key presses.\n   */\n  _chipKeydown(event: KeyboardEvent, index: number): void {\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        /** Check to see if we can delete a chip */\n        if (this.canRemoveChip) {\n         this.removeChip(index);\n        }\n        break;\n      case UP_ARROW:\n      case LEFT_ARROW:\n        /**\n         * Check to see if left/down arrow was pressed while focusing the first chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === 0) {\n          // only try to target input if pressing left\n          if (this.canAddChip && event.keyCode === LEFT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusLastChip();\n          }\n        } else if (index > 0) {\n          this._focusChip(index - 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      case DOWN_ARROW:\n      case RIGHT_ARROW:\n        /**\n         * Check to see if right/up arrow was pressed while focusing the last chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === (this._totalChips - 1)) {\n          // only try to target input if pressing right\n          if (this.canAddChip && event.keyCode === RIGHT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusFirstChip();\n          }\n        } else if (index < (this._totalChips - 1)) {\n          this._focusChip(index + 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to remove from display the value added from the autocomplete since it goes directly as chip.\n   */\n  _removeInputDisplay(): string {\n    return '';\n  }\n\n  /**\n   * Method to open the autocomplete manually if its not already opened\n   */\n  _openAutocomplete(): void {\n    if (!this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.openPanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Method to close the autocomplete manually if its not already closed\n   */\n  _closeAutocomplete(): void {\n    if (this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.closePanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Get total of chips\n   */\n  get _totalChips(): number {\n    let chips: MatChip[] = this._chipsChildren.toArray();\n    return chips.length;\n  }\n\n  /**\n   * Method to focus a desired chip by index\n   */\n  private _focusChip(index: number): void {\n    /** check to see if index exists in the array before focusing */\n    if (index > -1 && this._totalChips > index) {\n      this._chipsChildren.toArray()[index].focus();\n    }\n  }\n\n  /** Method to focus first chip */\n  private _focusFirstChip(): void {\n    this._focusChip(0);\n  }\n\n  /** Method to focus last chip */\n  private _focusLastChip(): void {\n    this._focusChip(this._totalChips - 1);\n  }\n\n  /**\n   * Method to toggle the disable state of input\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   */\n  private _toggleInput(): void {\n    if (this.canAddChip) {\n      this.inputControl.enable();\n    } else {\n      this.inputControl.disable();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets first option as active to let the user know which one will be added when pressing enter\n   * Only if [requireMatch] has been set\n   */\n  private _setFirstOptionActive(): void {\n    if (this.requireMatch) {\n      // need to use a timer here to wait until the autocomplete has been opened (end of queue)\n      toPromise.call(timer()).then(() => {\n        if (this.focused && this._options && this._options.length > 0) {\n          // clean up of previously active options\n          this._options.toArray().forEach((option: MatOption) => {\n            option.setInactiveStyles();\n          });\n          // set the first one as active\n          this._options.toArray()[0].setActiveStyles();\n          this._internalActivateOption = true;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n  }\n\n  /**\n   * Watches clicks outside of the component to remove the focus\n   * The autocomplete panel is considered inside the component so we\n   * need to use a flag to find out when its clicked.\n   */\n  private _watchOutsideClick(): void {\n    if (this._document) {\n      merge(\n        fromEvent(this._document, 'click'),\n        fromEvent(this._document, 'touchend'),\n      ).pipe(\n        filter(\n          (event: MouseEvent) => {\n            const clickTarget: HTMLElement = <HTMLElement>event.target;\n            setTimeout(() => {\n              this._internalClick = false;\n            });\n            return this.focused &&\n                  (clickTarget !== this._elementRef.nativeElement) &&\n                  !this._elementRef.nativeElement.contains(clickTarget) && !this._internalClick;\n          },\n        ),\n      ).subscribe(() => {\n        if (this.focused) {\n          this._autocompleteTrigger.closePanel();\n          this.removeFocusedState();\n          this.onTouched();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    return undefined;\n  }\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n"
  ],
  "names": [
    "chips",
    "RIGHT_ARROW",
    "DOWN_ARROW",
    "LEFT_ARROW",
    "BACKSPACE",
    "debounceTime",
    "ESCAPE",
    "TAB",
    "toPromise",
    "timer",
    "coerceBooleanProperty",
    "EventEmitter",
    "TemplatePortalDirective",
    "ViewContainerRef",
    "Directive"
  ],
  "mappings": "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"
}
