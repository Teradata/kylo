{
  "version": 3,
  "file": "covalent-core-json-formatter.umd.js",
  "sources": [
    "ng://@covalent/core/json-formatter/out/json-formatter.component.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, Optional } from '@angular/core';\nimport { Dir } from '@angular/cdk/bidi';\nimport { TdCollapseAnimation } from '@covalent/core/common';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'td-json-formatter',\n  styles: [`:host{\n  display:block; }\n\n.td-json-formatter-wrapper{\n  padding-top:2px;\n  padding-bottom:2px; }\n  .td-json-formatter-wrapper .td-key{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-orient:horizontal;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:row;\n            flex-direction:row;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center;\n    -ms-flex-line-pack:center;\n        align-content:center;\n    max-width:100%;\n    -webkit-box-pack:start;\n        -ms-flex-pack:start;\n            justify-content:start; }\n    .td-json-formatter-wrapper .td-key.td-key-node:hover{\n      cursor:pointer; }\n  .td-json-formatter-wrapper .td-object-children.ng-animating{\n    overflow:hidden; }\n  .td-json-formatter-wrapper .td-object-children .td-key,\n  .td-json-formatter-wrapper .td-object-children .td-object-children{\n    padding-left:24px; }\n    ::ng-deep [dir='rtl'] .td-json-formatter-wrapper .td-object-children .td-key, ::ng-deep [dir='rtl']\n    .td-json-formatter-wrapper .td-object-children .td-object-children{\n      padding-right:24px;\n      padding-left:0; }\n    .td-json-formatter-wrapper .td-object-children .td-key.td-key-leaf,\n    .td-json-formatter-wrapper .td-object-children .td-object-children.td-key-leaf{\n      padding-left:48px; }\n      ::ng-deep [dir='rtl'] .td-json-formatter-wrapper .td-object-children .td-key.td-key-leaf, ::ng-deep [dir='rtl']\n      .td-json-formatter-wrapper .td-object-children .td-object-children.td-key-leaf{\n        padding-right:48px;\n        padding-left:0; }\n  .td-json-formatter-wrapper .value{\n    margin-left:5px; }\n    ::ng-deep [dir='rtl'] .td-json-formatter-wrapper .value{\n      padding-right:5px;\n      padding-left:0; }\n    .td-json-formatter-wrapper .value .td-empty{\n      opacity:0.5;\n      text-decoration:line-through; }\n    .td-json-formatter-wrapper .value .string{\n      word-break:break-word; }\n    .td-json-formatter-wrapper .value .date{\n      word-break:break-word; }\n`],\n  template: `<div class=\"td-json-formatter-wrapper\">\n  <a class=\"td-key\"\n     [class.td-key-node]=\"hasChildren()\"\n     [class.td-key-leaf]=\"!hasChildren()\"\n     [tabIndex]=\"isObject()? 0 : -1\"\n     (keydown.enter)=\"toggle()\"\n     (click)=\"toggle()\">\n    <mat-icon class=\"td-node-icon\" *ngIf=\"hasChildren()\">{{open? 'keyboard_arrow_down' : (isRTL ? 'keyboard_arrow_left' : 'keyboard_arrow_right')}}</mat-icon>\n    <span *ngIf=\"key\" class=\"key\">{{key}}:</span>\n    <span class=\"value\">\n      <span [class.td-empty]=\"!hasChildren()\" *ngIf=\"isObject()\" [matTooltip]=\"getPreview()\" matTooltipPosition=\"after\">\n        <span class=\"td-object-name\">{{getObjectName()}}</span>\n        <span class=\"td-array-length\" *ngIf=\"isArray()\">[{{data.length}}]</span>\n      </span>\n      <span *ngIf=\"!isObject()\" [class]=\"getType(data)\">{{getValue(data)}}</span>\n    </span>\n  </a>\n  <div class=\"td-object-children\" [@tdCollapse]=\"!(hasChildren() && open)\">\n    <ng-template let-key ngFor [ngForOf]=\"children\">\n      <td-json-formatter [key]=\"key\" [data]=\"data[key]\" [levelsOpen]=\"levelsOpen - 1\"></td-json-formatter>\n    </ng-template>\n  </div>\n</div>`,\n  animations: [\n    TdCollapseAnimation(),\n  ],\n})\nexport class TdJsonFormatterComponent {\n\n  /**\n   * Max length for property names. Any names bigger than this get trunctated.\n   */\n  private static KEY_MAX_LENGTH: number = 30;\n\n  /**\n   * Max length for preview string. Any names bigger than this get trunctated.\n   */\n  private static PREVIEW_STRING_MAX_LENGTH: number = 80;\n\n  /**\n   * Max tooltip preview elements.\n   */\n  private static PREVIEW_LIMIT: number = 5;\n\n  private _key: string;\n  private _data: any;\n  private _children: string[];\n  private _open: boolean = false;\n  private _levelsOpen: number = 0;\n\n  /**\n   * levelsOpen?: number\n   * Levels opened by default when JS object is formatted and rendered.\n   */\n  @Input('levelsOpen')\n  set levelsOpen(levelsOpen: number) {\n    if (!Number.isInteger(levelsOpen)) {\n      throw new Error('[levelsOpen] needs to be an integer.');\n    }\n    this._levelsOpen = levelsOpen;\n    this._open = levelsOpen > 0;\n  }\n  get levelsOpen(): number {\n    return this._levelsOpen;\n  }\n\n  get open(): boolean {\n    return this._open;\n  }\n\n  /**\n   * key?: string\n   * Tag to be displayed next to formatted object.\n   */\n  @Input('key')\n  set key(key: string) {\n    this._key = key;\n  }\n  get key(): string {\n    let elipsis: string = this._key && this._key.length > TdJsonFormatterComponent.KEY_MAX_LENGTH ? '…' : '';\n    return this._key ? this._key.substring(0, TdJsonFormatterComponent.KEY_MAX_LENGTH) + elipsis : this._key;\n  }\n\n  /**\n   * data: any\n   * JS object to be formatted.\n   */\n  @Input('data')\n  set data(data: any) {\n    this._data = data;\n    this.parseChildren();\n  }\n  get data(): any {\n    return this._data;\n  }\n\n  get children(): string[] {\n    return this._children;\n  }\n\n  get isRTL(): boolean {\n    if (this._dir) {\n      return this._dir.dir === 'rtl';\n    }\n    return false;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Dir) {\n  }\n\n  /**\n   * Refreshes json-formatter and rerenders [data]\n   */\n  refresh(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Toggles collapse/expanded state of component.\n   */\n  toggle(): void {\n    this._open = !this._open;\n  }\n\n  isObject(): boolean {\n    return this.getType(this._data) === 'object';\n  }\n\n  isArray(): boolean {\n    return Array.isArray(this._data);\n  }\n\n  hasChildren(): boolean {\n    return this._children && this._children.length > 0;\n  }\n\n  /**\n   * Gets parsed value depending on value type.\n   */\n  getValue(value: any): string {\n    let type: string = this.getType(value);\n    if (type === 'undefined' || (type === 'null')) {\n      return type;\n    } else if (type === 'date') {\n      value = new Date(value).toString();\n    } else if (type === 'string') {\n      value = '\"' + value + '\"';\n    } else if (type === 'function') {\n      // Remove content of the function\n      return value.toString()\n          .replace(/[\\r\\n]/g, '')\n          .replace(/\\{.*\\}/, '') + '{…}';\n    } else if (Array.isArray(value)) {\n      return this.getObjectName() + ' [' + value.length + ']';\n    }\n    return value;\n  }\n\n  /**\n   * Gets type of object.\n   * returns 'null' if object is null and 'date' if value is object and can be parsed to a date.\n   */\n  getType(object: any): string {\n    if (typeof object === 'object') {\n      if (!object) {\n        return 'null';\n      }\n      if (Array.isArray(object)) {\n        return 'object';\n      }\n      let date: Date = new Date(object);\n      if (Object.prototype.toString.call(date) === '[object Date]') {\n        if (!Number.isNaN(date.getTime())) {\n          return 'date';\n        }\n      }\n    }\n    return typeof object;\n  }\n\n  /**\n   * Generates string representation depending if its an object or function.\n   * see: http://stackoverflow.com/a/332429\n   */\n  getObjectName(): string {\n    let object: any = this._data;\n    if (this.isObject() && !object.constructor) {\n        return 'Object';\n    }\n    let funcNameRegex: RegExp = /function (.{1,})\\(/;\n    let results: RegExpExecArray = (funcNameRegex).exec((object).constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Creates preview of nodes children to render in tooltip depending if its an array or an object.\n   */\n  getPreview(): string {\n    let previewData: string[];\n    let startChar: string = '{ ';\n    let endChar: string = ' }';\n    if (this.isArray()) {\n      let previewArray: any[] = this._data.slice(0, TdJsonFormatterComponent.PREVIEW_LIMIT);\n      previewData = previewArray.map((obj: any) => {\n        return this.getValue(obj);\n      });\n      startChar = '[';\n      endChar = ']';\n    } else {\n      let previewKeys: string[] = this._children.slice(0, TdJsonFormatterComponent.PREVIEW_LIMIT);\n      previewData = previewKeys.map((key: string) => {\n        return key + ': ' + this.getValue(this._data[key]);\n      });\n    }\n    let previewString: string =  previewData.join(', ');\n    let ellipsis: string = previewData.length >= TdJsonFormatterComponent.PREVIEW_LIMIT ||\n                           previewString.length > TdJsonFormatterComponent.PREVIEW_STRING_MAX_LENGTH ? '…' : '';\n    return startChar + previewString.substring(0, TdJsonFormatterComponent.PREVIEW_STRING_MAX_LENGTH) +\n           ellipsis + endChar;\n  }\n\n  private parseChildren(): void {\n    if (this.isObject()) {\n      this._children = [];\n      for (let key in this._data) {\n        this._children.push(key);\n      }\n    }\n  }\n\n}\n"
  ],
  "names": [
    "MatTooltipModule",
    "CommonModule"
  ],
  "mappings": "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"
}
