{
  "version": 3,
  "file": "covalent-core-loading.umd.js",
  "sources": [
    "ng://@covalent/core/loading/out/loading.module.ts",
    "ng://@covalent/core/loading/out/directives/loading.directive.ts",
    "ng://@covalent/core/loading/out/services/loading.service.ts",
    "ng://@covalent/core/loading/out/services/loading.factory.ts",
    "ng://@covalent/core/loading/out/loading.component.ts",
    "ng://@covalent/core/loading/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { TdLoadingService, LOADING_PROVIDER } from './services/loading.service';\nimport { TdLoadingFactory, LOADING_FACTORY_PROVIDER } from './services/loading.factory';\nimport { TdLoadingDirective } from './directives/loading.directive';\nimport { TdLoadingComponent } from './loading.component';\n\nconst TD_LOADING: Type<any>[] = [\n  TdLoadingComponent,\n  TdLoadingDirective,\n];\n\nconst TD_LOADING_ENTRY_COMPONENTS: Type<any>[] = [\n  TdLoadingComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  declarations: [\n    TD_LOADING,\n  ],\n  exports: [\n    TD_LOADING,\n  ],\n  providers: [\n    LOADING_FACTORY_PROVIDER,\n    LOADING_PROVIDER,\n  ],\n  entryComponents: [\n    TD_LOADING_ENTRY_COMPONENTS,\n  ],\n})\nexport class CovalentLoadingModule {\n\n}\n",
    "import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\n\nimport { LoadingType, LoadingMode, LoadingStrategy, TdLoadingComponent } from '../loading.component';\nimport { TdLoadingService } from '../services/loading.service';\nimport { ILoadingRef } from '../services/loading.factory';\n\n/**\n * Context class for variable reference\n */\nexport class TdLoadingContext {\n  public $implicit: any = undefined;\n  public tdLoading: any = undefined;\n}\n\n// Constant for generation of the id for the next component\nlet TD_LOADING_NEXT_ID: number = 0;\n\n@Directive({\n  selector: '[tdLoading]',\n})\nexport class TdLoadingDirective implements OnInit, OnDestroy {\n\n  private _context: TdLoadingContext = new TdLoadingContext();\n  private _type: LoadingType;\n  private _mode: LoadingMode;\n  private _strategy: LoadingStrategy;\n  private _name: string;\n  private _loadingRef: ILoadingRef;\n\n  /**\n   * tdLoading: string\n   * Name reference of the loading mask, used to register/resolve requests to the mask.\n   */\n  @Input('tdLoading')\n  set name(name: string) {\n    if (!this._name) {\n      if (name) {\n        this._name = name;\n      }\n    }\n  }\n\n  /**\n   * tdLoadingUntil?: any\n   * If its null, undefined or false it will be used to register requests to the mask.\n   * Else if its any value that can be resolved as true, it will resolve the mask.\n   * [name] is optional when using [until], but can still be used to register/resolve it manually.\n   */\n  @Input('tdLoadingUntil')\n  set until(until: any) {\n    if (!this._name) {\n      this._name = 'td-loading-until-' + TD_LOADING_NEXT_ID++;\n    }\n    this._context.$implicit = this._context.tdLoading = until;\n    if (!until) {\n      this._loadingService.register(this._name);\n    } else {\n      this._loadingService.resolveAll(this._name);\n    }\n  }\n\n  /**\n   * tdLoadingType?: LoadingType or ['linear' | 'circular']\n   * Sets the type of loading mask depending on value.\n   * Defaults to [LoadingType.Circular | 'circular'].\n   */\n  @Input('tdLoadingType')\n  set type(type: LoadingType) {\n    switch (type) {\n      case LoadingType.Linear:\n        this._type = LoadingType.Linear;\n        break;\n      default:\n        this._type = LoadingType.Circular;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingMode?: LoadingMode or ['determinate' | 'indeterminate']\n   * Sets the mode of loading mask depending on value.\n   * Defaults to [LoadingMode.Indeterminate | 'indeterminate'].\n   */\n  @Input('tdLoadingMode')\n  set mode(mode: LoadingMode) {\n    switch (mode) {\n      case LoadingMode.Determinate:\n        this._mode = LoadingMode.Determinate;\n        break;\n      default:\n        this._mode = LoadingMode.Indeterminate;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingStrategy?: LoadingStrategy or ['replace' | 'overlay']\n   * Sets the strategy of loading mask depending on value.\n   * Defaults to [LoadingMode.Replace | 'replace'].\n   */\n  @Input('tdLoadingStrategy')\n  set strategy(stategy: LoadingStrategy) {\n    switch (stategy) {\n      case LoadingStrategy.Overlay:\n        this._strategy = LoadingStrategy.Overlay;\n        break;\n      default:\n        this._strategy = LoadingStrategy.Replace;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingColor?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the loading component. Defaults to \"primary\"\n   */\n  @Input('tdLoadingColor') color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(private _viewContainerRef: ViewContainerRef,\n              private _templateRef: TemplateRef<TdLoadingContext>,\n              private _loadingService: TdLoadingService) {}\n\n  /**\n   * Registers component in the DOM, so it will be available when calling resolve/register.\n   */\n  ngOnInit(): void {\n    this._registerComponent();\n  }\n\n  /**\n   * Remove component when directive is destroyed.\n   */\n  ngOnDestroy(): void {\n    this._loadingService.removeComponent(this._name);\n    this._loadingRef = undefined;\n  }\n\n  /**\n   * Creates [TdLoadingComponent] and attaches it to this directive's [ViewContainerRef].\n   * Passes this directive's [TemplateRef] to modify DOM depending on loading `strategy`.\n   */\n  private _registerComponent(): void {\n    if (!this._name) {\n      throw new Error('Name is needed to register loading directive');\n    }\n    // Check if `TdLoadingComponent` has been created before trying to add one again.\n    // There is a weird edge case when using `[routerLinkActive]` that calls the `ngOnInit` twice in a row\n    if (!this._loadingRef) {\n      this._loadingRef = this._loadingService.createComponent({\n        name: this._name,\n        type: this._type,\n        mode: this._mode,\n        color: this.color,\n        strategy: this._strategy,\n      }, this._viewContainerRef, this._templateRef, this._context);\n    }\n  }\n}\n",
    "import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLoadingContext } from '../directives/loading.directive';\nimport { TdLoadingComponent, LoadingMode, LoadingStrategy, LoadingType } from '../loading.component';\nimport { TdLoadingFactory, ILoadingRef } from './loading.factory';\n\nexport interface ITdLoadingConfig {\n  name: string;\n  type?: LoadingType;\n  mode?: LoadingMode;\n  color?: 'primary' | 'accent' | 'warn';\n}\n\nexport class TdLoadingConfig implements ITdLoadingConfig {\n  name: string;\n  type?: LoadingType;\n  mode?: LoadingMode;\n  color?: 'primary' | 'accent' | 'warn';\n\n  constructor(config: ITdLoadingConfig) {\n    this.name = config.name;\n    if (!this.name) {\n      throw Error('Name is required for [TdLoading] configuration.');\n    }\n    this.mode = config.mode ? config.mode : LoadingMode.Indeterminate;\n    this.type = config.type ? config.type : LoadingType.Circular;\n    this.color = config.color ? config.color : 'primary';\n  }\n}\n\nexport interface ITdLoadingDirectiveConfig extends ITdLoadingConfig {\n  strategy?: LoadingStrategy;\n}\n\nexport class TdLoadingDirectiveConfig extends TdLoadingConfig implements ITdLoadingDirectiveConfig {\n  name: string;\n  type: LoadingType;\n  mode: LoadingMode;\n  strategy: LoadingStrategy;\n\n  constructor(config: ITdLoadingDirectiveConfig) {\n    super(config);\n    this.strategy = config.strategy ? config.strategy : LoadingStrategy.Replace;\n  }\n}\n\n@Injectable()\nexport class TdLoadingService {\n\n  private _context: {[key: string]: ILoadingRef} = {};\n  private _timeouts: {[key: string]: any} = {};\n\n  constructor(private _loadingFactory: TdLoadingFactory) {\n    this.create({\n      name: 'td-loading-main',\n    });\n  }\n\n  /**\n   * params:\n   * - config: ILoadingDirectiveConfig\n   * - viewContainerRef: ViewContainerRef\n   * - templateRef: TemplateRef<Object>\n   *\n   * Creates an replace loading mask and attaches it to the viewContainerRef.\n   * Replaces the templateRef with the mask when a request is registered on it.\n   *\n   * NOTE: @internal usage only.\n   */\n  createComponent(config: ITdLoadingDirectiveConfig, viewContainerRef: ViewContainerRef,\n                  templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\n    let directiveConfig: TdLoadingDirectiveConfig = new TdLoadingDirectiveConfig(config);\n    if (this._context[directiveConfig.name]) {\n      throw Error(`Name duplication: [TdLoading] directive has a name conflict with ${directiveConfig.name}.`);\n    }\n    if (directiveConfig.strategy === LoadingStrategy.Overlay) {\n      this._context[directiveConfig.name] = this._loadingFactory.createOverlayComponent(directiveConfig, viewContainerRef, templateRef);\n    } else {\n      this._context[directiveConfig.name] = this._loadingFactory.createReplaceComponent(directiveConfig, viewContainerRef, templateRef, context);\n    }\n    return this._context[directiveConfig.name];\n  }\n\n  /**\n   * params:\n   * - config: ITdLoadingConfig\n   *\n   * Creates a fullscreen loading mask and attaches it to the DOM with the given configuration.\n   * Only displayed when the mask has a request registered on it.\n   */\n  public create(config: ITdLoadingConfig): void {\n    let fullscreenConfig: TdLoadingConfig = new TdLoadingConfig(config);\n    this.removeComponent(fullscreenConfig.name);\n    this._context[fullscreenConfig.name] = this._loadingFactory.createFullScreenComponent(fullscreenConfig);\n  }\n\n  /**\n   * params:\n   * - name: string\n   *\n   * Removes `loading` component from service context.\n   */\n  public removeComponent(name: string): void {\n    if (this._context[name]) {\n      this._context[name].subject.unsubscribe();\n      if (this._context[name].componentRef) {\n        this._context[name].componentRef.destroy();\n      }\n      this._context[name] = undefined;\n      delete this._context[name];\n    }\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - registers?: number\n   * returns: true if successful\n   *\n   * Resolves a request for the loading mask referenced by the name parameter.\n   * Can optionally pass registers argument to set a number of register calls.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.register()\n   */\n  public register(name: string = 'td-loading-main', registers: number = 1): boolean {\n    // try registering into the service if the loading component has been instanciated or if it exists.\n    if (this._context[name]) {\n      registers = registers < 1 ? 1 : registers;\n      this._context[name].times += registers;\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    } else {\n      // if it doesnt exist, set a timeout so its registered after change detection happens\n      // this in case \"register\" occured on the `ngOnInit` lifehook cycle.\n      if (!this._timeouts[name]) {\n        this._timeouts[name] = setTimeout(() => {\n          this.register(name, registers);\n        });\n      } else {\n        // if it timeout occured and still doesnt exist, it means the tiemout wasnt needed so we clear it.\n        this._clearTimeout(name);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - resolves?: number\n   * returns: true if successful\n   *\n   * Resolves a request for the loading mask referenced by the name parameter.\n   * Can optionally pass resolves argument to set a number of resolve calls.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.resolve()\n   */\n  public resolve(name: string = 'td-loading-main', resolves: number = 1): boolean {\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\n    this._clearTimeout(name);\n    if (this._context[name]) {\n      resolves = resolves < 1 ? 1 : resolves;\n      if (this._context[name].times > 0) {\n        let times: number = this._context[name].times;\n        times -= resolves;\n        this._context[name].times = times < 0 ? 0 : times;\n      }\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * returns: true if successful\n   *\n   * Resolves all request for the loading mask referenced by the name parameter.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.resolveAll()\n   */\n  public resolveAll(name: string = 'td-loading-main'): boolean {\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\n    this._clearTimeout(name);\n    if (this._context[name]) {\n      this._context[name].times = 0;\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - value: number\n   * returns: true if successful\n   *\n   * Set value on a loading mask referenced by the name parameter.\n   * Usage only available if its mode is 'determinate' and if loading is showing.\n   */\n  public setValue(name: string, value: number): boolean {\n    if (this._context[name]) {\n      let instance: TdLoadingComponent = this._context[name].componentRef.instance;\n      if (instance.mode === LoadingMode.Determinate && instance.animation) {\n        instance.value = value;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears timeout linked to the name.\n   * @param name Name of the loading component to be cleared\n   */\n  private _clearTimeout(name: string): void {\n    clearTimeout(this._timeouts[name]);\n    delete this._timeouts[name];\n  }\n}\n\nexport function LOADING_PROVIDER_FACTORY(\n    parent: TdLoadingService, loadingFactory: TdLoadingFactory): TdLoadingService {\n  return parent || new TdLoadingService(loadingFactory);\n}\n\nexport const LOADING_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdLoadingService,\n  deps: [[new Optional(), new SkipSelf(), TdLoadingService], TdLoadingFactory],\n  useFactory: LOADING_PROVIDER_FACTORY,\n};\n",
    "import { Injectable, ComponentFactoryResolver, ChangeDetectorRef, Provider, SkipSelf, Optional } from '@angular/core';\nimport { Injector, ComponentRef, ViewContainerRef, TemplateRef } from '@angular/core';\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLoadingContext } from '../directives/loading.directive';\nimport { TdLoadingComponent, LoadingType, LoadingMode, LoadingStrategy, LoadingStyle } from '../loading.component';\nimport { ITdLoadingConfig } from './loading.service';\n\nexport interface IInternalLoadingOptions extends ITdLoadingConfig {\n  height?: number;\n  style?: LoadingStyle;\n}\n\nexport interface ILoadingRef {\n  observable: Observable<any>;\n  componentRef: ComponentRef<any>;\n  subject?: Subject<any>;\n  times?: number;\n}\n\n/**\n * NOTE: @internal usage only.\n */\n@Injectable()\nexport class TdLoadingFactory {\n\n  constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n              private _overlay: Overlay,\n              private _injector: Injector) {\n  }\n\n  /**\n   * Uses material `Overlay` services to create a DOM element and attach the loading component\n   * into it. Leveraging the state and configuration from it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createFullScreenComponent(options: ITdLoadingConfig): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.FullScreen;\n    let loadingRef: ILoadingRef = this._initializeContext();\n    let loading: boolean = false;\n    let overlayRef: OverlayRef;\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        overlayRef = this._createOverlay();\n        loadingRef.componentRef = overlayRef.attach(new ComponentPortal(TdLoadingComponent));\n        this._mapOptions(options, loadingRef.componentRef.instance);\n        loadingRef.componentRef.instance.startInAnimation();\n        loadingRef.componentRef.changeDetectorRef.detectChanges();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          loadingRef.componentRef.destroy();\n          overlayRef.detach();\n          overlayRef.dispose();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Leverages TemplatePortals from material to inject the template inside of it so it fits\n   * perfectly when overlaying it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createOverlayComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.Overlay;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    loadingRef.componentRef.instance.content = new TemplatePortal(templateRef, viewContainerRef);\n    viewContainerRef.clear();\n    viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        loadingRef.componentRef.instance.startOutAnimation();\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Replaces the template with the loading component depending if it was registered or resolved.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createReplaceComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\n    let nativeElement: HTMLElement = <HTMLElement>templateRef.elementRef.nativeElement;\n    (<IInternalLoadingOptions>options).height = nativeElement.nextElementSibling ?\n      nativeElement.nextElementSibling.scrollHeight : undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.None;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    viewContainerRef.createEmbeddedView(templateRef, context);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        let index: number = viewContainerRef.indexOf(loadingRef.componentRef.hostView);\n        if (index < 0) {\n          viewContainerRef.clear();\n          viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n        }\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          // passing context so when the template is re-attached, we can keep the reference of the variables\n          let cdr: ChangeDetectorRef = viewContainerRef.createEmbeddedView(templateRef, context);\n          viewContainerRef.detach(viewContainerRef.indexOf(loadingRef.componentRef.hostView));\n          /**\n           * Need to call \"markForCheck\" and \"detectChanges\" on attached template, so its detected by parent component when attached\n           * with \"OnPush\" change detection\n           */\n          cdr.detectChanges();\n          cdr.markForCheck();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a fullscreen overlay for the loading usage.\n   */\n  private _createOverlay(): OverlayRef {\n    let state: OverlayConfig = new OverlayConfig();\n    state.hasBackdrop = false;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();\n    return this._overlay.create(state);\n  }\n\n  /**\n   * Creates a generic component dynamically waiting to be attached to a viewContainerRef.\n   */\n  private _createComponent(options: IInternalLoadingOptions): ILoadingRef {\n    let compRef: ILoadingRef = this._initializeContext();\n    compRef.componentRef = this._componentFactoryResolver\n    .resolveComponentFactory(TdLoadingComponent).create(this._injector);\n    this._mapOptions(options, compRef.componentRef.instance);\n    return compRef;\n  }\n\n  /**\n   * Initialize context for loading component.\n   */\n  private _initializeContext(): ILoadingRef {\n    let subject: Subject<any> = new Subject<any>();\n    return {\n      observable: subject.asObservable(),\n      subject: subject,\n      componentRef: undefined,\n      times: 0,\n    };\n  }\n\n  /**\n   * Maps configuration to the loading component instance.\n   */\n  private _mapOptions(options: IInternalLoadingOptions, instance: TdLoadingComponent): void {\n    instance.style = options.style;\n    if (options.type !== undefined) {\n      instance.type = options.type;\n    }\n    if (options.height !== undefined) {\n      instance.height = options.height;\n    }\n    if (options.mode !== undefined) {\n      instance.mode = options.mode;\n    }\n    if (options.color !== undefined) {\n      instance.color = options.color;\n    }\n  }\n}\n\nexport function LOADING_FACTORY_PROVIDER_FACTORY(\n    parent: TdLoadingFactory, componentFactoryResolver: ComponentFactoryResolver, overlay: Overlay, injector: Injector): TdLoadingFactory {\n  return parent || new TdLoadingFactory(componentFactoryResolver, overlay, injector);\n}\n\nexport const LOADING_FACTORY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdLoadingFactory,\n  deps: [[new Optional(), new SkipSelf(), TdLoadingFactory], ComponentFactoryResolver, Overlay, Injector],\n  useFactory: LOADING_FACTORY_PROVIDER_FACTORY,\n};\n",
    "import { Component, ViewChild, TemplateRef, ChangeDetectorRef, ChangeDetectionStrategy, ElementRef, DoCheck } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nexport enum LoadingType {\n  Circular = 'circular',\n  Linear = 'linear',\n}\n\nexport enum LoadingMode {\n  Determinate = 'determinate',\n  Indeterminate = 'indeterminate',\n}\n\nexport enum LoadingStrategy {\n  Overlay = 'overlay',\n  Replace = 'replace',\n}\n\nexport enum LoadingStyle {\n  FullScreen = 'fullscreen',\n  Overlay = 'overlay',\n  None = 'none',\n}\n\nimport { TdFadeInOutAnimation } from '@covalent/core/common';\n\nexport const TD_CIRCLE_DIAMETER: number = 100;\n\n@Component({\n  selector: 'td-loading',\n  styles: [`.td-loading-wrapper{\n  position:relative;\n  display:block; }\n  .td-loading-wrapper.td-fullscreen{\n    position:inherit; }\n  .td-loading-wrapper .td-loading{\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-orient:horizontal;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:row;\n            flex-direction:row;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center;\n    -ms-flex-line-pack:center;\n        align-content:center;\n    max-width:100%;\n    -webkit-box-pack:center;\n        -ms-flex-pack:center;\n            justify-content:center;\n    -webkit-box-flex:1;\n        -ms-flex:1;\n            flex:1; }\n  .td-loading-wrapper.td-overlay .td-loading{\n    position:absolute;\n    margin:0;\n    top:0;\n    left:0;\n    right:0;\n    z-index:1000; }\n    .td-loading-wrapper.td-overlay .td-loading mat-progress-bar{\n      position:absolute;\n      top:0;\n      left:0;\n      right:0; }\n  .td-loading-wrapper.td-overlay-circular .td-loading{\n    bottom:0; }\n`],\n  template: `<div class=\"td-loading-wrapper\"\n    [style.min-height]=\"getHeight()\"\n    [class.td-overlay-circular]=\"(isOverlay() || isFullScreen()) && !isLinear()\"\n    [class.td-overlay]=\"isOverlay() || isFullScreen()\" \n    [class.td-fullscreen]=\"isFullScreen()\">\n  <div [@tdFadeInOut]=\"animation\"\n     (@tdFadeInOut.done)=\"animationComplete($event)\"\n     [style.min-height]=\"getHeight()\"\n     class=\"td-loading\">\n    <mat-progress-spinner *ngIf=\"isCircular()\" \n                        [mode]=\"mode\"\n                        [value]=\"value\" \n                        [color]=\"color\" \n                        [diameter]=\"getCircleDiameter()\"\n                        [strokeWidth]=\"getCircleStrokeWidth()\">\n    </mat-progress-spinner>\n    <mat-progress-bar *ngIf=\"isLinear()\" \n                     [mode]=\"mode\"\n                     [value]=\"value\"\n                     [color]=\"color\">\n    </mat-progress-bar>\n  </div>\n  <ng-template [cdkPortalHost]=\"content\"></ng-template>\n</div>`,\n  animations: [\n    TdFadeInOutAnimation(),\n  ],\n})\nexport class TdLoadingComponent implements DoCheck {\n\n  private _animationIn: Subject<any> = new Subject<any>();\n  private _animationOut: Subject<any> = new Subject<any>();\n  private _mode: LoadingMode = LoadingMode.Indeterminate;\n  private _defaultMode: LoadingMode = LoadingMode.Indeterminate;\n  private _value: number = 0;\n  private _circleDiameter: number = TD_CIRCLE_DIAMETER;\n\n  /**\n   * Flag for animation\n   */\n  animation: boolean = false;\n\n  /**\n   * Content injected into loading component.\n   */\n  content: TemplatePortal<any>;\n\n  /**\n   * Sets mode of [TdLoadingComponent] to LoadingMode.Determinate or LoadingMode.Indeterminate\n   */\n  set mode(mode: LoadingMode) {\n    this._defaultMode = mode;\n  }\n  get mode(): LoadingMode {\n    return this._mode;\n  }\n\n  /**\n   * Sets value of [TdLoadingComponent] if mode is 'LoadingMode.Determinate'\n   */\n  set value(value: number) {\n    this._value = value;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): number {\n    return this._value;\n  }\n\n  style: LoadingStyle = LoadingStyle.None;\n\n  /**\n   * height: number\n   * Sets height of [TdLoadingComponent].\n   */\n  height: number;\n\n  /**\n   * type: LoadingType\n   * Sets type of [TdLoadingComponent] rendered.\n   */\n  type: LoadingType = LoadingType.Circular;\n\n  /**\n   * color: primary' | 'accent' | 'warn'\n   * Sets theme color of [TdLoadingComponent] rendered.\n   */\n  color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngDoCheck(): void {\n    // When overlay is used and the host width has a value greater than 1px\n    // set the circle diameter when possible incase the loading component was rendered in a hidden state\n    if (this.isOverlay() && this._hostHeight() > 1) {\n      if (this.animation) {\n        this._setCircleDiameter();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  getHeight(): string {\n    // Ignore height if style is `overlay` or `fullscreen`.\n    // Add height if child elements have a height and style is `none`, else return default height.\n    if (this.isOverlay() || this.isFullScreen()) {\n      return undefined;\n    } else {\n      return this.height ? `${this.height}px` : '150px';\n    }\n  }\n\n  getCircleDiameter(): number {\n    return this._circleDiameter;\n  }\n\n  getCircleStrokeWidth(): number {\n    // we calculate the stroke width by setting it as 10% of its diameter\n    let strokeWidth: number = this.getCircleDiameter() / 10;\n    return Math.abs(strokeWidth);\n  }\n\n  isCircular(): boolean {\n    return this.type === LoadingType.Circular;\n  }\n\n  isLinear(): boolean {\n    return this.type === LoadingType.Linear;\n  }\n\n  isFullScreen(): boolean {\n    return this.style === LoadingStyle.FullScreen;\n  }\n\n  isOverlay(): boolean {\n    return this.style === LoadingStyle.Overlay;\n  }\n\n  animationComplete(event: AnimationEvent): void {\n    // Check to see if its \"in\" or \"out\" animation to execute the proper callback\n    if (!event.fromState) {\n      this.inAnimationCompleted();\n    } else {\n      this.outAnimationCompleted();\n    }\n  }\n\n  inAnimationCompleted(): void {\n    this._animationIn.next(undefined);\n  }\n\n  outAnimationCompleted(): void {\n   /* little hack to reset the loader value and animation before removing it from DOM\n    * else, the loader will appear with prev value when its registered again\n    * and will do an animation going prev value to 0.\n    */\n    this.value = 0;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n    this._animationOut.next(undefined);\n  }\n\n  /**\n   * Starts in animation and returns an observable for completition event.\n   */\n  startInAnimation(): Observable<any> {\n    /* need to switch back to the selected mode, so we have saved it in another variable\n    *  and then recover it. (issue with protractor)\n    */\n    this._mode = this._defaultMode;\n    // Set values before the animations starts\n    this._setCircleDiameter();\n    // Check for changes for `OnPush` change detection\n    this.animation = true;\n    this._changeDetectorRef.markForCheck();\n    return this._animationIn.asObservable();\n  }\n\n  /**\n   * Starts out animation and returns an observable for completition event.\n   */\n  startOutAnimation(): Observable<any> {\n    this.animation = false;\n    /* need to switch back and forth from determinate/indeterminate so the setInterval()\n    * inside mat-progress-spinner stops and protractor doesnt timeout waiting to sync.\n    */\n    this._mode = LoadingMode.Determinate;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n    return this._animationOut.asObservable();\n  }\n\n  /**\n   * Calculate the proper diameter for the circle and set it\n   */\n  private _setCircleDiameter(): void {\n    // we set a default diameter of 100 since this is the default in material\n    let diameter: number = TD_CIRCLE_DIAMETER;\n    // if height is provided, then we take that as diameter\n    if (this.height) {\n      diameter = this.height;\n      // else if its not provided, then we take the host height\n    } else if (this.height === undefined) {\n      diameter = this._hostHeight();\n    }\n    // if the diameter is over TD_CIRCLE_DIAMETER, we set TD_CIRCLE_DIAMETER\n    if (!!diameter && diameter <= TD_CIRCLE_DIAMETER) {\n      this._circleDiameter = Math.floor(diameter);\n    } else {\n      this._circleDiameter = TD_CIRCLE_DIAMETER;\n    }\n  }\n\n  /**\n   * Returns the host height of the loading component\n   */\n  private _hostHeight(): number {\n    if (<HTMLElement>this._elementRef.nativeElement) {\n      return (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return 0;\n  }\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n"
  ],
  "names": [
    "PortalModule",
    "OverlayModule",
    "MatProgressSpinnerModule",
    "MatProgressBarModule",
    "NgModule",
    "Input",
    "Directive",
    "tslib_1.__extends",
    "overlay",
    "Injector",
    "Overlay",
    "ComponentFactoryResolver",
    "Subject",
    "OverlayConfig",
    "TemplatePortal",
    "ComponentPortal"
  ],
  "mappings": "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"
}
