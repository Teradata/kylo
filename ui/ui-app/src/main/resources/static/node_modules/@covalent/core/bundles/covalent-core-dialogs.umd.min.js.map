{
  "version": 3,
  "file": "covalent-core-dialogs.umd.min.js",
  "sources": [
    "ng://@covalent/core/dialogs/out/dialog.component.ts",
    "ng://@covalent/core/dialogs/out/alert-dialog/alert-dialog.component.ts",
    "ng://@covalent/core/dialogs/out/confirm-dialog/confirm-dialog.component.ts",
    "ng://@covalent/core/dialogs/out/prompt-dialog/prompt-dialog.component.ts",
    "ng://@covalent/core/dialogs/out/services/dialog.service.ts"
  ],
  "sourcesContent": [
    "import { Component, Directive, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\n\n@Directive({selector: 'td-dialog-title'})\nexport class TdDialogTitleDirective {}\n\n@Directive({selector: 'td-dialog-content'})\nexport class TdDialogContentDirective {}\n\n@Directive({selector: 'td-dialog-actions'})\nexport class TdDialogActionsDirective {}\n\n@Component({\n  selector: 'td-dialog',\n  template: `<div class=\"td-dialog-wrapper\">\n  <h3 class=\"td-dialog-title\" *ngIf=\"dialogTitle.length > 0\">\n    <ng-content select=\"td-dialog-title\"></ng-content>\n  </h3>\n  <div class=\"td-dialog-content\" *ngIf=\"dialogContent.length > 0\">\n    <ng-content select=\"td-dialog-content\"></ng-content>\n  </div>\n  <div class=\"td-dialog-actions\" *ngIf=\"dialogActions.length > 0\">\n    <span class=\"td-dialog-spacer\"></span>\n    <ng-content select=\"td-dialog-actions\"></ng-content>\n  </div>\n</div>`,\n  styles: [`.td-dialog-title{\n  margin-top:0;\n  margin-bottom:20px; }\n\n.td-dialog-content{\n  margin-bottom:16px; }\n\n.td-dialog-actions{\n  position:relative;\n  top:16px;\n  left:16px; }\n  ::ng-deep [dir='rtl'] .td-dialog-actions{\n    right:16px;\n    left:auto; }\n\n:host{\n  display:block; }\n  :host .td-dialog-actions{\n    -webkit-box-orient:horizontal;\n    -webkit-box-direction:normal;\n        -ms-flex-direction:row;\n            flex-direction:row;\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex; }\n    :host .td-dialog-actions .td-dialog-spacer{\n      -webkit-box-flex:1;\n          -ms-flex:1;\n              flex:1; }\n    :host .td-dialog-actions ::ng-deep button{\n      text-transform:uppercase;\n      margin-left:8px;\n      padding-left:8px;\n      padding-right:8px;\n      min-width:64px; }\n      [dir='rtl'] :host .td-dialog-actions ::ng-deep button{\n        margin-right:8px;\n        margin-left:inherit; }\n`],\n})\nexport class TdDialogComponent implements AfterContentInit {\n\n  @ContentChildren(TdDialogTitleDirective) dialogTitle: QueryList<TdDialogTitleDirective>;\n  @ContentChildren(TdDialogContentDirective) dialogContent: QueryList<TdDialogContentDirective>;\n  @ContentChildren(TdDialogActionsDirective) dialogActions: QueryList<TdDialogActionsDirective>;\n\n  ngAfterContentInit(): void {\n    if (this.dialogTitle.length > 1) {\n      throw new Error('Duplicate td-dialog-title component at in td-dialog.');\n    }\n    if (this.dialogContent.length > 1) {\n      throw new Error('Duplicate td-dialog-content component at in td-dialog.');\n    }\n    if (this.dialogActions.length > 1) {\n      throw new Error('Duplicate td-dialog-actions component at in td-dialog.');\n    }\n  }\n\n}\n",
    "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-alert-dialog',\n  template: `<td-dialog>\n  <td-dialog-title *ngIf=\"title\">\n    {{title}}\n  </td-dialog-title>\n  <td-dialog-content>\n    <span class=\"td-dialog-message\">{{message}}</span>\n  </td-dialog-content>\n  <td-dialog-actions>\n    <button mat-button color=\"accent\" (click)=\"close()\">{{closeButton}}</button>\n  </td-dialog-actions>\n</td-dialog>`,\n  styles: [`.td-dialog-message{\n  word-break:break-word; }\n`],\n})\nexport class TdAlertDialogComponent {\n  title: string;\n  message: string;\n  closeButton: string = 'CLOSE';\n\n  constructor(private _dialogRef: MatDialogRef<TdAlertDialogComponent>) {}\n\n  close(): void {\n    this._dialogRef.close();\n  }\n}\n",
    "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-confirm-dialog',\n  template: `<td-dialog>\n  <td-dialog-title *ngIf=\"title\">\n    {{title}}\n  </td-dialog-title>\n  <td-dialog-content>\n    <span class=\"td-dialog-message\">{{message}}</span>\n  </td-dialog-content>\n  <td-dialog-actions>\n    <button mat-button\n            #closeBtn \n            (keydown.arrowright)=\"acceptBtn.focus()\"\n            (click)=\"cancel()\">{{cancelButton}}</button>\n    <button mat-button\n            color=\"accent\"\n            #acceptBtn\n            (keydown.arrowleft)=\"closeBtn.focus()\"\n            (click)=\"accept()\">{{acceptButton}}</button>\n  </td-dialog-actions>\n</td-dialog>`,\n  styles: [`.td-dialog-message{\n  word-break:break-word; }\n`],\n})\nexport class TdConfirmDialogComponent {\n  title: string;\n  message: string;\n  cancelButton: string = 'CANCEL';\n  acceptButton: string = 'ACCEPT';\n\n  constructor(private _dialogRef: MatDialogRef<TdConfirmDialogComponent>) {}\n\n  cancel(): void {\n    this._dialogRef.close(false);\n  }\n\n  accept(): void {\n    this._dialogRef.close(true);\n  }\n}\n",
    "import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-prompt-dialog',\n  template: `<td-dialog>\n  <td-dialog-title *ngIf=\"title\">\n    {{title}}\n  </td-dialog-title>\n  <td-dialog-content>\n    <span class=\"td-dialog-message\">{{message}}</span>\n    <form #form=\"ngForm\" novalidate>\n      <div class=\"td-dialog-input-wrapper\">\n        <mat-form-field class=\"td-dialog-input\">\n          <input matInput\n                #input\n                (focus)=\"handleInputFocus()\"\n                (keydown.enter)=\"$event.preventDefault(); form.valid && accept()\"\n                [(ngModel)]=\"value\"\n                name=\"value\"\n                required/>\n        </mat-form-field>\n      </div>\n    </form>\n  </td-dialog-content>\n  <td-dialog-actions>\n    <button mat-button\n            #closeBtn \n            (keydown.arrowright)=\"acceptBtn.focus()\"\n            (click)=\"cancel()\">{{cancelButton}}</button>\n    <button mat-button\n            color=\"accent\"\n            #acceptBtn\n            (keydown.arrowleft)=\"closeBtn.focus()\"\n            [disabled]=\"!form.valid\"\n            (click)=\"accept()\">{{acceptButton}}</button>\n  </td-dialog-actions>\n</td-dialog>`,\n  styles: [`.td-dialog-input-wrapper{\n  -webkit-box-orient:horizontal;\n  -webkit-box-direction:normal;\n      -ms-flex-direction:row;\n          flex-direction:row;\n  -webkit-box-sizing:border-box;\n          box-sizing:border-box;\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex; }\n  .td-dialog-input-wrapper .td-dialog-input{\n    -webkit-box-flex:1;\n        -ms-flex:1;\n            flex:1;\n    -webkit-box-sizing:border-box;\n            box-sizing:border-box; }\n\n.td-dialog-message{\n  word-break:break-word; }\n`],\n})\nexport class TdPromptDialogComponent implements AfterViewInit {\n  title: string;\n  message: string;\n  value: string;\n  cancelButton: string = 'CANCEL';\n  acceptButton: string = 'ACCEPT';\n\n  @ViewChild('input') _input: ElementRef;\n\n  constructor(private _dialogRef: MatDialogRef<TdPromptDialogComponent>) {}\n\n  ngAfterViewInit(): void {\n    // focus input once everything is rendered and good to go\n    Promise.resolve().then(() => {\n      (<HTMLInputElement>this._input.nativeElement).focus();\n    });\n  }\n\n  /**\n   * Method executed when input is focused\n   * Selects all text\n   */\n  handleInputFocus(): void {\n    (<HTMLInputElement>this._input.nativeElement).select();\n  }\n\n  cancel(): void {\n    this._dialogRef.close(undefined);\n  }\n\n  accept(): void {\n    this._dialogRef.close(this.value);\n  }\n}\n",
    "import { Injectable, ViewContainerRef, Provider, SkipSelf, Optional } from '@angular/core';\nimport { MatDialog, MatDialogRef, MatDialogConfig } from '@angular/material/dialog';\nimport { ComponentType } from '@angular/cdk/portal';\n\nimport { TdAlertDialogComponent } from '../alert-dialog/alert-dialog.component';\nimport { TdConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport { TdPromptDialogComponent } from '../prompt-dialog/prompt-dialog.component';\n\nexport interface IDialogConfig extends MatDialogConfig {\n  title?: string;\n  message: string;\n}\n\nexport interface IAlertConfig extends IDialogConfig {\n  closeButton?: string;\n}\n\nexport interface IConfirmConfig extends IDialogConfig {\n  acceptButton?: string;\n  cancelButton?: string;\n}\n\nexport interface IPromptConfig extends IConfirmConfig {\n  value?: string;\n}\n\n@Injectable()\nexport class TdDialogService {\n\n  constructor(private _dialogService: MatDialog) {}\n\n  /**\n   * params:\n   * - component: ComponentType<T>\n   * - config: MatDialogConfig\n   * Wrapper function over the open() method in MatDialog.\n   * Opens a modal dialog containing the given component.\n   */\n  public open<T>(component: ComponentType<T>, config?: MatDialogConfig): MatDialogRef<T> {\n    return this._dialogService.open(component, config);\n  }\n\n  /**\n   * Wrapper function over the closeAll() method in MatDialog.\n   * Closes all of the currently-open dialogs.\n   */\n  public closeAll(): void {\n    this._dialogService.closeAll();\n  }\n\n  /**\n   * params:\n   * - config: IAlertConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     closeButton?: string;\n   * }\n   *\n   * Opens an alert dialog with the provided config.\n   * Returns an MatDialogRef<TdAlertDialogComponent> object.\n   */\n  public openAlert(config: IAlertConfig): MatDialogRef<TdAlertDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdAlertDialogComponent> =\n      this._dialogService.open(TdAlertDialogComponent, dialogConfig);\n    let alertDialogComponent: TdAlertDialogComponent = dialogRef.componentInstance;\n    alertDialogComponent.title = config.title;\n    alertDialogComponent.message = config.message;\n    if (config.closeButton) {\n      alertDialogComponent.closeButton = config.closeButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IConfirmConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a confirm dialog with the provided config.\n   * Returns an MatDialogRef<TdConfirmDialogComponent> object.\n   */\n  public openConfirm(config: IConfirmConfig): MatDialogRef<TdConfirmDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdConfirmDialogComponent> =\n      this._dialogService.open(TdConfirmDialogComponent, dialogConfig);\n    let confirmDialogComponent: TdConfirmDialogComponent = dialogRef.componentInstance;\n    confirmDialogComponent.title = config.title;\n    confirmDialogComponent.message = config.message;\n    if (config.acceptButton) {\n      confirmDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      confirmDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IPromptConfig {\n   *     message: string;\n   *     title?: string;\n   *     value?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a prompt dialog with the provided config.\n   * Returns an MatDialogRef<TdPromptDialogComponent> object.\n   */\n  public openPrompt(config: IPromptConfig): MatDialogRef<TdPromptDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdPromptDialogComponent> =\n      this._dialogService.open(TdPromptDialogComponent, dialogConfig);\n    let promptDialogComponent: TdPromptDialogComponent = dialogRef.componentInstance;\n    promptDialogComponent.title = config.title;\n    promptDialogComponent.message = config.message;\n    promptDialogComponent.value = config.value;\n    if (config.acceptButton) {\n      promptDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      promptDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  private _createConfig(config: IDialogConfig): MatDialogConfig {\n    let dialogConfig: MatDialogConfig = new MatDialogConfig();\n    dialogConfig.width = '400px';\n    Object.assign(dialogConfig, config);\n    return dialogConfig;\n  }\n\n}\n\nexport function DIALOG_PROVIDER_FACTORY(\n    parent: TdDialogService, dialog: MatDialog): TdDialogService {\n  return parent || new TdDialogService(dialog);\n}\n\nexport const DIALOG_PROVIDER: Provider = {\n  // If there is already service available, use that. Otherwise, provide a new one.\n  provide: TdDialogService,\n  deps: [[new Optional(), new SkipSelf(), TdDialogService], MatDialog],\n  useFactory: DIALOG_PROVIDER_FACTORY,\n};\n"
  ],
  "names": [
    "TdDialogContentDirective",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "TdDialogActionsDirective",
    "ctorParameters",
    "TdDialogComponent",
    "prototype",
    "ngAfterContentInit",
    "this",
    "dialogContent",
    "length",
    "Error",
    "template",
    "styles",
    "TdAlertDialogComponent",
    "TdConfirmDialogComponent",
    "acceptButton",
    "cancel",
    "_dialogRef",
    "close",
    "accept",
    "Component",
    "TdPromptDialogComponent",
    "ngAfterViewInit",
    "_this",
    "_input",
    "focus",
    "handleInputFocus",
    "select",
    "undefined",
    "value",
    "TdDialogService",
    "_dialogService",
    "confirmDialogComponent",
    "title",
    "config",
    "message",
    "dialogConfig",
    "_createConfig",
    "promptDialogComponent",
    "Injectable",
    "DIALOG_PROVIDER",
    "CovalentDialogsModule",
    "NgModule",
    "imports",
    "FormsModule",
    "CommonModule",
    "MatDialogModule"
  ],
  "mappings": "usBAAA,oJAKA,gBAIAA,EAAAC,mKAgEAC,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,wBAGAC,EAAAC,eAAA,WAAA,UACA,IAAAC,EAAA,WACA,SAAAA,YAKAA,EAAAC,UAAAC,mBAAA,gHAvEA,GAAAC,KAAAC,cAAAC,OAAA,EACA,MAAA,IAAAC,MAAA,sKAgEA,+DArDAC,SAAA,seACEC,QAAS,yzDAyCXC,EAAAV,eAAA,WAAA,+BAKA,IAAAW,EAAA,sECvEAP,KAAAQ,aAoBA,gBAKAD,EAAAT,UAAAW,OAAA,WAFAT,KAAAU,WAAAC,OAAA,IAIEJ,EAAFT,UAAAc,OAAA,WACIZ,KAAKU,WAAWC,OAApB,MD2CA,GCpEAJ,EAAAjB,aACAC,KAAAsB,EAAAA,UAAApB,OACEC,SAAU,4uBAaZ,IAAAoB,EAAA,yBAjBAd,KAAAU,WAAAA,+DCDAI,EAAAhB,UAAAiB,gBAAA,wDAkCAC,EAAAC,OAAA,cAAAC,WAEEJ,EAAFhB,UAAAqB,iBAAA,WACAnB,KAAAiB,OAA+B,cAA/BG,UAGEN,EAAFhB,UAAAW,OAAA,WACIT,KAAKU,WAAWC,MAAMU,YArC1BP,EAAAhB,UAAAc,OAAA,WACAZ,KAAAU,WAAUC,MAAVX,KAAAsB,UDaA,+zDEkDA,SAAAC,EAAAC,GALAxB,KAAAwB,eAAAA,0dA1BAC,EAAAC,MAAAC,EAAAD,MACAD,EAAAG,QAAAD,EAAAC,8IA4BA,IAAAC,EAAA7B,KAAA8B,cAAAH,qIClEAI,EAAAvB,aAAAmB,EAAAnB,uOA6BAjB,KAAAyC,EAAAA,qEASA,IAASC,yHA0BT,OAFS,gBAKTC,EAAA5C,aACAC,KAAA4C,EAAAA,SAAA1C,OACA2C,SACAC,EAAAA,YACAC,EAAAA,aACAC,EAAAA,uHAkBAL,EAAAtC,eAAA,WAAA"
}
