{
  "version": 3,
  "file": "covalent-core-media.umd.js",
  "sources": [
    "ng://@covalent/core/media/out/media.module.ts",
    "ng://@covalent/core/media/out/directives/media-toggle.directive.ts",
    "ng://@covalent/core/media/out/services/media.service.ts"
  ],
  "sourcesContent": [
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MEDIA_PROVIDER } from './services/media.service';\nimport { TdMediaToggleDirective } from './directives/media-toggle.directive';\n\nconst TD_MEDIA: Type<any>[] = [\n  TdMediaToggleDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_MEDIA,\n  ],\n  exports: [\n    TD_MEDIA,\n  ],\n  providers: [\n    MEDIA_PROVIDER,\n  ],\n})\nexport class CovalentMediaModule {\n\n}\n",
    "import { Directive, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdMediaService } from '../services/media.service';\n\n@Directive({\n  selector: '[tdMediaToggle]',\n})\nexport class TdMediaToggleDirective implements OnInit, OnDestroy {\n\n  private _subscription: Subscription;\n\n  private _query: string;\n  private _matches: boolean = false;\n  private _attributes: {[key: string]: string} = {};\n  private _styles: {[key: string]: string} = {};\n  private _classes: string[] = [];\n\n  /**\n   * tdMediaToggle: string\n   * Media query used to evaluate screen/window size.\n   * Toggles attributes, classes and styles if media query is matched.\n   */\n  @Input('tdMediaToggle')\n  set query(query: string) {\n    if (!query) {\n      throw new Error('Query needed for [tdMediaToggle] directive.');\n    }\n    this._query = query;\n  }\n\n  /**\n   * mediaAttributes: {[key: string]: string}\n   * Attributes to be toggled when media query matches.\n   */\n  @Input('mediaAttributes')\n  set attributes(attributes: any) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * mediaClasses: string[]\n   * CSS Classes to be toggled when media query matches.\n   */\n  @Input('mediaClasses')\n  set classes(classes: string[]) {\n    this._classes = classes;\n  }\n\n  /**\n   * mediaStyles: {[key: string]: string}\n   * CSS Styles to be toggled when media query matches.\n   */\n  @Input('mediaStyles')\n  set styles(styles: any) {\n    this._styles = styles;\n  }\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef, private _mediaService: TdMediaService) { }\n\n  ngOnInit(): void {\n    this._mediaChange(this._mediaService.query(this._query));\n    this._subscription = this._mediaService.registerQuery(this._query).subscribe((matches: boolean) => {\n      this._mediaChange(matches);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  private _mediaChange(matches: boolean): void {\n    this._matches = matches;\n    this._changeAttributes();\n    this._changeClasses();\n    this._changeStyles();\n  }\n\n  private _changeAttributes(): void {\n    for (let attr in this._attributes) {\n      if (this._matches) {\n        this._renderer.setAttribute(this._elementRef.nativeElement, attr, this._attributes[attr]);\n      } else {\n        this._renderer.removeAttribute(this._elementRef.nativeElement, attr);\n      }\n    }\n  }\n\n  private _changeClasses(): void {\n    this._classes.forEach((className: string) => {\n      if (this._matches) {\n        this._renderer.addClass(this._elementRef.nativeElement, className);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, className);\n      }\n    });\n  }\n\n  private _changeStyles(): void {\n    for (let style in this._styles) {\n      if (this._matches) {\n        this._renderer.setStyle(this._elementRef.nativeElement, style, this._styles[style]);\n      } else {\n        this._renderer.removeStyle(this._elementRef.nativeElement, style);\n      }\n    }\n  }\n\n}\n",
    "import { Injectable, NgZone, SkipSelf, Optional, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\n\n@Injectable()\nexport class TdMediaService {\n\n  private _resizing: boolean = false;\n  private _globalSubscription: Subscription;\n  private _queryMap: Map<string, string> = new Map<string, string>();\n  private _querySources: { [key: string]: BehaviorSubject<boolean>} = {};\n  private _queryObservables: {[key: string]: Observable<boolean>} = {};\n\n  constructor(private _ngZone: NgZone) {\n    this._queryMap.set('xs', '(max-width: 599px)');\n    this._queryMap.set('gt-xs', '(min-width: 600px)');\n    this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');\n    this._queryMap.set('gt-sm', '(min-width: 960px)');\n    this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');\n    this._queryMap.set('gt-md', '(min-width: 1280px)');\n    this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');\n    this._queryMap.set('gt-lg', '(min-width: 1920px)');\n    this._queryMap.set('xl', '(min-width: 1920px)');\n    this._queryMap.set('landscape', '(orientation: landscape)');\n    this._queryMap.set('portrait', '(orientation: portrait)');\n    this._queryMap.set('print', 'print');\n\n    this._resizing = false;\n    // we make sure that the resize checking happend outside of angular since it happens often\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window, 'resize').subscribe(() => {\n        // way to prevent the resize event from triggering the match media if there is already one event running already.\n        if (!this._resizing) {\n          this._resizing = true;\n          setTimeout(() => {\n            this._onResize();\n            this._resizing = false;\n          }, 100);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deregisters a query so its stops being notified or used.\n   */\n  deregisterQuery(query: string): void {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    this._querySources[query].unsubscribe();\n    delete this._querySources[query];\n    delete this._queryObservables[query];\n  }\n\n  /**\n   * Used to evaluate whether a given media query is true or false given the current device's screen / window size.\n   */\n  public query(query: string): boolean {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    return this._ngZone.run(() => {\n      return matchMedia(query).matches;\n    });\n  }\n\n  /**\n   * Registers a media query and returns an [Observable] that will re-evaluate and\n   * return if the given media query matches on window resize.\n   * Note: don't forget to unsubscribe from [Observable] when finished watching.\n   */\n  public registerQuery(query: string): Observable<boolean> {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    if (!this._querySources[query]) {\n      this._querySources[query] = new BehaviorSubject<boolean>(matchMedia(query).matches);\n      this._queryObservables[query] = this._querySources[query].asObservable();\n    }\n    return this._queryObservables[query];\n  }\n\n  /**\n   * Trigger a match media event on all subscribed observables.\n   */\n  public broadcast(): void {\n    this._onResize();\n  }\n\n  private _onResize(): void {\n    for (let query in this._querySources) {\n      this._ngZone.run(() => {\n        this._matchMediaTrigger(query);\n      });\n    }\n  }\n\n  private _matchMediaTrigger(query: string): void {\n    this._querySources[query].next(matchMedia(query).matches);\n  }\n}\n\nexport function MEDIA_PROVIDER_FACTORY(\n    parent: TdMediaService, ngZone: NgZone): TdMediaService {\n  return parent || new TdMediaService(ngZone);\n}\n\nexport const MEDIA_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdMediaService,\n  deps: [[new Optional(), new SkipSelf(), TdMediaService], NgZone],\n  useFactory: MEDIA_PROVIDER_FACTORY,\n};\n"
  ],
  "names": [
    "Input",
    "ElementRef",
    "Renderer2",
    "Directive",
    "BehaviorSubject",
    "fromEvent"
  ],
  "mappings": "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"
}
