{
  "version": 3,
  "file": "covalent-core-data-table.umd.js",
  "sources": [
    "ng://@covalent/core/data-table/out/data-table-column/data-table-column.component.ts",
    "ng://@covalent/core/data-table/out/data-table.component.ts",
    "ng://@covalent/core/data-table/out/directives/data-table-template.directive.ts",
    "ng://@covalent/core/data-table/out/data-table-row/data-table-row.component.ts",
    "ng://@covalent/core/data-table/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, HostBinding, HostListener, ViewChild } from '@angular/core';\n\nimport { TdDataTableSortingOrder } from '../data-table.component';\n\nexport interface ITdDataTableSortChangeEvent {\n  order: TdDataTableSortingOrder;\n  name: string;\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'th[td-data-table-column]',\n  styles: [`:host{\n  white-space:nowrap;\n  position:relative;\n  padding:0;\n  vertical-align:middle;\n  text-align:left; }\n  :host > .td-data-table-heading{\n    padding:0 28px; }\n  :host:first-child > .td-data-table-heading{\n    padding-left:24px;\n    padding-right:initial; }\n    html[dir=rtl] :host:first-child > .td-data-table-heading{\n      padding-left:initial;\n      unicode-bidi:embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-heading{\n      padding-left:initial;\n      unicode-bidi:embed; }\n    [dir=rtl] :host:first-child > .td-data-table-heading{\n      padding-left:initial;\n      unicode-bidi:embed; }\n    :host:first-child > .td-data-table-heading bdo[dir=rtl]{\n      direction:rtl;\n      unicode-bidi:bidi-override; }\n    :host:first-child > .td-data-table-heading bdo[dir=ltr]{\n      direction:ltr;\n      unicode-bidi:bidi-override; }\n    html[dir=rtl] :host:first-child > .td-data-table-heading{\n      padding-right:24px;\n      unicode-bidi:embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-heading{\n      padding-right:24px;\n      unicode-bidi:embed; }\n    [dir=rtl] :host:first-child > .td-data-table-heading{\n      padding-right:24px;\n      unicode-bidi:embed; }\n    :host:first-child > .td-data-table-heading bdo[dir=rtl]{\n      direction:rtl;\n      unicode-bidi:bidi-override; }\n    :host:first-child > .td-data-table-heading bdo[dir=ltr]{\n      direction:ltr;\n      unicode-bidi:bidi-override; }\n  :host:last-child > .td-data-table-heading{\n    padding-left:28px;\n    padding-right:24px; }\n    html[dir=rtl] :host:last-child > .td-data-table-heading{\n      padding-left:24px;\n      unicode-bidi:embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-heading{\n      padding-left:24px;\n      unicode-bidi:embed; }\n    [dir=rtl] :host:last-child > .td-data-table-heading{\n      padding-left:24px;\n      unicode-bidi:embed; }\n    :host:last-child > .td-data-table-heading bdo[dir=rtl]{\n      direction:rtl;\n      unicode-bidi:bidi-override; }\n    :host:last-child > .td-data-table-heading bdo[dir=ltr]{\n      direction:ltr;\n      unicode-bidi:bidi-override; }\n    html[dir=rtl] :host:last-child > .td-data-table-heading{\n      padding-right:28px;\n      unicode-bidi:embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-heading{\n      padding-right:28px;\n      unicode-bidi:embed; }\n    [dir=rtl] :host:last-child > .td-data-table-heading{\n      padding-right:28px;\n      unicode-bidi:embed; }\n    :host:last-child > .td-data-table-heading bdo[dir=rtl]{\n      direction:rtl;\n      unicode-bidi:bidi-override; }\n    :host:last-child > .td-data-table-heading bdo[dir=ltr]{\n      direction:ltr;\n      unicode-bidi:bidi-override; }\n  :host mat-icon{\n    height:16px;\n    width:16px;\n    font-size:16px !important;\n    line-height:16px !important; }\n    :host mat-icon.td-data-table-sort-icon{\n      opacity:0;\n      -webkit-transition:-webkit-transform 0.25s;\n      transition:-webkit-transform 0.25s;\n      transition:transform 0.25s;\n      transition:transform 0.25s, -webkit-transform 0.25s;\n      position:absolute;\n      top:0; }\n      :host mat-icon.td-data-table-sort-icon.mat-asc{\n        -webkit-transform:rotate(0deg);\n                transform:rotate(0deg); }\n      :host mat-icon.td-data-table-sort-icon.mat-desc{\n        -webkit-transform:rotate(180deg);\n                transform:rotate(180deg); }\n  :host:hover.mat-sortable mat-icon.td-data-table-sort-icon,\n  :host.mat-active.mat-sortable mat-icon.td-data-table-sort-icon{\n    opacity:1; }\n  html[dir=rtl] :host{\n    text-align:right;\n    unicode-bidi:embed; }\n  body[dir=rtl] :host{\n    text-align:right;\n    unicode-bidi:embed; }\n  [dir=rtl] :host{\n    text-align:right;\n    unicode-bidi:embed; }\n  :host bdo[dir=rtl]{\n    direction:rtl;\n    unicode-bidi:bidi-override; }\n  :host bdo[dir=ltr]{\n    direction:ltr;\n    unicode-bidi:bidi-override; }\n  :host > *{\n    vertical-align:middle; }\n  :host.mat-clickable{\n    cursor:pointer; }\n    :host.mat-clickable:focus{\n      outline:none; }\n  :host .td-data-table-heading{\n    display:inline-block;\n    position:relative; }\n  :host.mat-numeric{\n    text-align:right; }\n    html[dir=rtl] :host.mat-numeric{\n      text-align:left;\n      unicode-bidi:embed; }\n    body[dir=rtl] :host.mat-numeric{\n      text-align:left;\n      unicode-bidi:embed; }\n    [dir=rtl] :host.mat-numeric{\n      text-align:left;\n      unicode-bidi:embed; }\n    :host.mat-numeric bdo[dir=rtl]{\n      direction:rtl;\n      unicode-bidi:bidi-override; }\n    :host.mat-numeric bdo[dir=ltr]{\n      direction:ltr;\n      unicode-bidi:bidi-override; }\n    :host.mat-numeric mat-icon.td-data-table-sort-icon{\n      margin-left:-22px;\n      margin-right:initial; }\n      html[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{\n        margin-left:initial;\n        unicode-bidi:embed; }\n      body[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{\n        margin-left:initial;\n        unicode-bidi:embed; }\n      [dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{\n        margin-left:initial;\n        unicode-bidi:embed; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=rtl]{\n        direction:rtl;\n        unicode-bidi:bidi-override; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=ltr]{\n        direction:ltr;\n        unicode-bidi:bidi-override; }\n      html[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{\n        margin-right:-22px;\n        unicode-bidi:embed; }\n      body[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{\n        margin-right:-22px;\n        unicode-bidi:embed; }\n      [dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{\n        margin-right:-22px;\n        unicode-bidi:embed; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=rtl]{\n        direction:rtl;\n        unicode-bidi:bidi-override; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=ltr]{\n        direction:ltr;\n        unicode-bidi:bidi-override; }\n  :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{\n    margin-left:6px;\n    margin-right:initial; }\n    html[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{\n      margin-left:initial;\n      unicode-bidi:embed; }\n    body[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{\n      margin-left:initial;\n      unicode-bidi:embed; }\n    [dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{\n      margin-left:initial;\n      unicode-bidi:embed; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=rtl]{\n      direction:rtl;\n      unicode-bidi:bidi-override; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=ltr]{\n      direction:ltr;\n      unicode-bidi:bidi-override; }\n    html[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{\n      margin-right:6px;\n      unicode-bidi:embed; }\n    body[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{\n      margin-right:6px;\n      unicode-bidi:embed; }\n    [dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{\n      margin-right:6px;\n      unicode-bidi:embed; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=rtl]{\n      direction:rtl;\n      unicode-bidi:bidi-override; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=ltr]{\n      direction:ltr;\n      unicode-bidi:bidi-override; }\n`],\n  template: `<span #columnContent class=\"td-data-table-heading\">\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n  <span>\n    <ng-content></ng-content>\n  </span>\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && !numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n</span>\n`,\n})\nexport class TdDataTableColumnComponent {\n\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  @ViewChild('columnContent', {read: ElementRef}) _columnContent: ElementRef;\n\n  get projectedWidth(): number {\n    if (this._columnContent && this._columnContent.nativeElement) {\n      return (<HTMLElement>this._columnContent.nativeElement).getBoundingClientRect().width;\n    }\n    return 100;\n  }\n\n  /**\n   * name?: string\n   * Sets unique column [name] for [sortable] events.\n   */\n  @Input('name') name: string = '';\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable') sortable: boolean = false;\n\n  /**\n   * active?: boolean\n   * Sets column to active state when 'true'.\n   * Defaults to 'false'\n   */\n  @Input('active') active: boolean = false;\n\n  /**\n   * numeric?: boolean\n   * Makes column follow the numeric data-table specs and sort icon.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of column.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                        new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  @HostBinding('class.mat-clickable')\n  get bindClickable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-sortable')\n  get bingSortable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-active')\n  get bindActive(): boolean {\n    return this.active;\n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column');\n  }\n\n  /**\n   * Listening to click event on host to throw a sort event\n   */\n  @HostListener('click')\n  handleClick(): void {\n    if (this.sortable) {\n      this.onSortChange.emit({name: this.name, order: this._sortOrder});\n    }\n  }\n\n  isAscending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Ascending;\n  }\n\n  isDescending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Descending;\n  }\n\n}\n",
    "import { Component, Input, Output, EventEmitter, forwardRef, ChangeDetectionStrategy,\n         ChangeDetectorRef, ViewChild, OnDestroy, AfterViewInit,\n         ContentChildren, TemplateRef, AfterContentInit, QueryList, Inject,\n         Optional, ViewChildren, ElementRef, OnInit, AfterContentChecked } from '@angular/core';\nimport { DOCUMENT, DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\n\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n\nimport { TdDataTableRowComponent } from './data-table-row/data-table-row.component';\nimport { ITdDataTableSortChangeEvent, TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport enum TdDataTableSortingOrder {\n  Ascending = 'ASC',\n  Descending = 'DESC',\n}\n\nexport interface ITdDataTableColumnWidth {\n  min?: number;\n  max?: number;\n}\n\nexport interface ITdDataTableColumn {\n  name: string;\n  label: string;\n  tooltip?: string;\n  numeric?: boolean;\n  format?: (value: any) => any;\n  nested?: boolean;\n  sortable?: boolean;\n  hidden?: boolean;\n  filter?: boolean;\n  width?: ITdDataTableColumnWidth | number;\n}\n\nexport interface ITdDataTableSelectEvent {\n  row: any;\n  selected: boolean;\n  index: number;\n}\n\nexport interface ITdDataTableSelectAllEvent {\n  rows: any[];\n  selected: boolean;\n}\n\nexport interface ITdDataTableRowClickEvent {\n  row: any;\n  index: number;\n}\n\nexport interface IInternalColumnWidth {\n  value: number;\n  limit: boolean;\n  index: number;\n  min?: boolean;\n  max?: boolean;\n}\n\n/**\n * Constant to set the rows offset before and after the viewport\n */\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n/**\n * Constant to set default row height if none is provided\n */\nconst TD_VIRTUAL_DEFAULT_ROW_HEIGHT: number = 48;\n\nexport class TdDataTableBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdDataTableMixinBase = mixinControlValueAccessor(TdDataTableBase, []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdDataTableComponent),\n    multi: true,\n  }],\n  selector: 'td-data-table',\n  styles: [`:host{\n  display:block;\n  overflow:hidden; }\n  :host .td-data-table-scrollable{\n    position:relative;\n    overflow:auto;\n    height:calc(100% - 56px); }\n\ntable.td-data-table{\n  width:auto !important; }\n  table.td-data-table.mat-selectable tbody > tr.td-data-table-row{\n    -webkit-transition:background-color 0.2s;\n    transition:background-color 0.2s; }\n  table.td-data-table.mat-selectable .td-data-table-column:first-child > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable th.td-data-table-column:first-child > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable td.td-data-table-cell:first-child > .td-data-table-column-content-wrapper{\n    width:18px;\n    min-width:18px;\n    padding:0 24px; }\n  table.td-data-table.mat-selectable .td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2) > .td-data-table-column-content-wrapper{\n    padding-left:0; }\n  [dir='rtl'] table.td-data-table.mat-selectable .td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper, [dir='rtl']\n  table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper, [dir='rtl']\n  table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2) > .td-data-table-column-content-wrapper{\n    padding-right:0;\n    padding-left:28px; }\n  table.td-data-table td.mat-checkbox-cell,\n  table.td-data-table th.mat-checkbox-column{\n    min-width:42px;\n    width:42px;\n    font-size:0 !important; }\n    table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox,\n    table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox{\n      width:18px;\n      height:18px; }\n      ::ng-deep table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after, ::ng-deep\n      table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after{\n        width:11px !important;\n        height:4px !important; }\n    table.td-data-table td.mat-checkbox-cell mat-checkbox ::ng-deep .mat-checkbox-inner-container,\n    table.td-data-table th.mat-checkbox-column mat-checkbox ::ng-deep .mat-checkbox-inner-container{\n      width:18px;\n      height:18px;\n      margin:0; }\n`],\n  template: `<table td-data-table\n        [style.left.px]=\"columnsLeftScroll\"\n        [class.mat-selectable]=\"selectable\">\n  <thead class=\"td-data-table-head\">\n    <tr td-data-table-column-row>\n      <th td-data-table-column class=\"mat-checkbox-column\" *ngIf=\"selectable\">\n        <mat-checkbox\n          #checkBoxAll\n          *ngIf=\"multiple\"\n          [disabled]=\"!hasData\"\n          [indeterminate]=\"indeterminate && !allSelected && hasData\"\n          [checked]=\"allSelected && hasData\"\n          (click)=\"blockEvent($event); selectAll(!checkBoxAll.checked)\"\n          (keyup.enter)=\"selectAll(!checkBoxAll.checked)\"\n          (keyup.space)=\"selectAll(!checkBoxAll.checked)\"\n          (keydown.space)=\"blockEvent($event)\">\n        </mat-checkbox>\n      </th>\n      <th td-data-table-column\n          #columnElement\n          *ngFor=\"let column of columns; let i = index;\"\n          [style.min-width.px]=\"getColumnWidth(i)\"\n          [style.max-width.px]=\"getColumnWidth(i)\"\n          [name]=\"column.name\"\n          [numeric]=\"column.numeric\"\n          [active]=\"(column.sortable || sortable) && column === sortByColumn\"\n          [sortable]=\"column.sortable || (sortable && column.sortable !== false)\"\n          [sortOrder]=\"sortOrderEnum\"\n          [hidden]=\"column.hidden\"\n          (sortChange)=\"handleSort(column)\">\n          <span [matTooltip]=\"column.tooltip\">{{column.label}}</span>\n      </th>\n    </tr>\n  </thead>\n</table>\n<div #scrollableDiv class=\"td-data-table-scrollable\"\n      (scroll)=\"handleScroll($event)\">\n  <div [style.height.px]=\"totalHeight\"></div>\n  <table td-data-table\n          [style.transform]=\"offsetTransform\"\n          [style.position]=\"'absolute'\"\n          [class.mat-selectable]=\"selectable\"\n          [class.mat-clickable]=\"clickable\">\n    <tbody class=\"td-data-table-body\">\n      <tr td-data-table-row\n          #dtRow\n          [tabIndex]=\"selectable ? 0 : -1\"\n          [selected]=\"(clickable || selectable) && isRowSelected(row)\"\n          *ngFor=\"let row of virtualData; let rowIndex = index\"\n          (click)=\"handleRowClick(row, fromRow + rowIndex, $event)\"\n          (keyup)=\"selectable && _rowKeyup($event, row, rowIndex)\"\n          (keydown.space)=\"blockEvent($event)\"\n          (keydown.shift.space)=\"blockEvent($event)\"\n          (keydown.shift)=\"disableTextSelection()\"\n          (keyup.shift)=\"enableTextSelection()\">\n        <td td-data-table-cell class=\"mat-checkbox-cell\" *ngIf=\"selectable\">\n          <mat-pseudo-checkbox\n            [state]=\"dtRow.selected ? 'checked' : 'unchecked'\"\n            (mousedown)=\"disableTextSelection()\"\n            (mouseup)=\"enableTextSelection()\"\n            stopRowClick\n            (click)=\"select(row, $event, fromRow + rowIndex)\">\n          </mat-pseudo-checkbox>\n        </td>\n        <td td-data-table-cell\n            [numeric]=\"column.numeric\"\n            [hidden]=\"column.hidden\"\n            *ngFor=\"let column of columns; let i = index\"\n            [style.min-width.px]=\"getColumnWidth(i)\"\n            [style.max-width.px]=\"getColumnWidth(i)\">\n          <span *ngIf=\"!getTemplateRef(column.name)\">{{column.format ? column.format(getCellValue(column, row)) : getCellValue(column, row)}}</span>\n          <ng-template\n            *ngIf=\"getTemplateRef(column.name)\"\n            [ngTemplateOutlet]=\"getTemplateRef(column.name)\"\n            [ngTemplateOutletContext]=\"{ value: getCellValue(column, row), row: row, column: column.name }\">\n          </ng-template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<ng-content></ng-content>\n`,\n  inputs: ['value'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdDataTableComponent extends _TdDataTableMixinBase implements IControlValueAccessor, OnInit,\n                                          AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n\n  /** responsive width calculations */\n  private _resizeSubs: Subscription;\n  private _rowsChangedSubs: Subscription;\n  private _hostWidth: number = 0;\n\n  get hostWidth(): number {\n    // if the checkboxes are rendered, we need to remove their width\n    // from the total width to calculate properly\n    if (this.selectable) {\n      return this._hostWidth - 42;\n    }\n    return this._hostWidth;\n  }\n\n  private _widths: IInternalColumnWidth[] = [];\n  private _onResize: Subject<void> = new Subject<void>();\n\n  /** column header reposition and viewpoort */\n  private _verticalScrollSubs: Subscription;\n  private _horizontalScrollSubs: Subscription;\n  private _scrollHorizontalOffset: number = 0;\n\n  private _onHorizontalScroll: Subject<number> = new Subject<number>();\n  private _onVerticalScroll: Subject<number> = new Subject<number>();\n\n  // Array of cached row heights to allow dynamic row heights\n  private _rowHeightCache: number[] = [];\n  // Total pseudo height of all the elements\n  private _totalHeight: number = 0;\n  // Total host height for the viewport\n  private _hostHeight: number = 0;\n  // Scrolled vertical pixels\n  private _scrollVerticalOffset: number = 0;\n  // Style to move the content a certain offset depending on scrolled offset\n  private _offsetTransform: SafeStyle;\n\n  // Variables that set from and to which rows will be rendered\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  /**\n   * Returns the offset style with a proper calculation on how much it should move\n   * over the y axis of the total height\n   */\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  /**\n   * Returns the assumed total height of the rows\n   */\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  /**\n   * Returns the initial row to render in the viewport\n   */\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  /**\n   * Returns the last row to render in the viewport\n   */\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  private _valueChangesSubs: Subscription;\n  /** internal attributes */\n  private _data: any[];\n  // data virtually iterated by component\n  private _virtualData: any[];\n  private _columns: ITdDataTableColumn[];\n  private _selectable: boolean = false;\n  private _clickable: boolean = false;\n  private _multiple: boolean = true;\n  private _allSelected: boolean = false;\n  private _indeterminate: boolean = false;\n\n  /** sorting */\n  private _sortable: boolean = false;\n  private _sortBy: ITdDataTableColumn;\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  /** shift select */\n  private _shiftPreviouslyPressed: boolean = false;\n  private _lastSelectedIndex: number = -1;\n  private _firstSelectedIndex: number = -1;\n  private _firstCheckboxValue: boolean = false;\n\n  /** template fetching support */\n  private _templateMap: Map<string, TemplateRef<any>> = new Map<string, TemplateRef<any>>();\n  @ContentChildren(TdDataTableTemplateDirective) _templates: QueryList<TdDataTableTemplateDirective>;\n\n  @ViewChild('scrollableDiv') _scrollableDiv: ElementRef;\n\n  @ViewChildren('columnElement') _colElements: QueryList<TdDataTableColumnComponent>;\n\n  @ViewChildren(TdDataTableRowComponent) _rows: QueryList<TdDataTableRowComponent>;\n\n  /**\n   * Returns scroll position to reposition column headers\n   */\n  get columnsLeftScroll(): number {\n    return this._scrollHorizontalOffset * -1;\n  }\n\n  /**\n   * Returns true if all values are selected.\n   */\n  get allSelected(): boolean {\n    return this._allSelected;\n  }\n\n  /**\n   * Returns true if all values are not deselected\n   * and at least one is.\n   */\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n\n  /**\n   * data?: {[key: string]: any}[]\n   * Sets the data to be rendered as rows.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    this._rowHeightCache = [];\n    Promise.resolve().then(() => {\n      this.refresh();\n      // scroll back to the top if the data has changed\n      this._scrollableDiv.nativeElement.scrollTop = 0;\n    });\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  /**\n   * columns?: ITdDataTableColumn[]\n   * Sets additional column configuration. [ITdDataTableColumn.name] has to exist in [data] as key.\n   * Defaults to [data] keys.\n   */\n  @Input('columns')\n  set columns(cols: ITdDataTableColumn[]) {\n    this._columns = cols;\n  }\n  get columns(): ITdDataTableColumn[] {\n    if (this._columns) {\n      return this._columns;\n    }\n\n    if (this.hasData) {\n      this._columns = [];\n      // if columns is undefined, use key in [data] rows as name and label for column headers.\n      let row: any = this._data[0];\n      Object.keys(row).forEach((k: string) => {\n        if (!this._columns.find((c: any) => c.name === k)) {\n          this._columns.push({ name: k, label: k });\n        }\n      });\n      return this._columns;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * selectable?: boolean\n   * Enables row selection events, hover and selected row states.\n   * Defaults to 'false'\n   */\n  @Input('selectable')\n  set selectable(selectable: boolean) {\n    this._selectable = coerceBooleanProperty(selectable);\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  /**\n   * clickable?: boolean\n   * Enables row click events, hover.\n   * Defaults to 'false'\n   */\n  @Input('clickable')\n  set clickable(clickable: boolean) {\n    this._clickable = coerceBooleanProperty(clickable);\n  }\n  get clickable(): boolean {\n    return this._clickable;\n  }\n\n  /**\n   * multiple?: boolean\n   * Enables multiple row selection. [selectable] needs to be enabled.\n   * Defaults to 'false'\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable')\n  set sortable(sortable: boolean) {\n    this._sortable = coerceBooleanProperty(sortable);\n  }\n  get sortable(): boolean {\n    return this._sortable;\n  }\n\n  /**\n   * sortBy?: string\n   * Sets the active sort column. [sortable] needs to be enabled.\n   */\n  @Input('sortBy')\n  set sortBy(columnName: string) {\n    if (!columnName) {\n      return;\n    }\n    const column: ITdDataTableColumn = this.columns.find((c: any) => c.name === columnName);\n    if (!column) {\n      throw new Error('[sortBy] must be a valid column name');\n    }\n\n    this._sortBy = column;\n  }\n  get sortByColumn(): ITdDataTableColumn {\n    return this._sortBy;\n  }\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of the [sortBy] column. [sortable] needs to be enabled.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n  get sortOrderEnum(): TdDataTableSortingOrder {\n    return this._sortOrder;\n  }\n\n  get hasData(): boolean {\n    return this._data && this._data.length > 0;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                                      new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  /**\n   * rowSelect?: function\n   * Event emitted when a row is selected/deselected. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectEvent] implemented object.\n   */\n  @Output('rowSelect') onRowSelect: EventEmitter<ITdDataTableSelectEvent> = new EventEmitter<ITdDataTableSelectEvent>();\n\n  /**\n   * rowClick?: function\n   * Event emitted when a row is clicked.\n   * Emits an [ITdDataTableRowClickEvent] implemented object.\n   */\n  @Output('rowClick') onRowClick: EventEmitter<ITdDataTableRowClickEvent> = new EventEmitter<ITdDataTableRowClickEvent>();\n\n  /**\n   * selectAll?: function\n   * Event emitted when all rows are selected/deselected by the all checkbox. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectAllEvent] implemented object.\n   */\n  @Output('selectAll') onSelectAll: EventEmitter<ITdDataTableSelectAllEvent> =\n                                    new EventEmitter<ITdDataTableSelectAllEvent>();\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * compareWith?: function(row, model): boolean\n   * Allows custom comparison between row and model to see if row is selected or not\n   * Default comparation is by reference\n   */\n  @Input('compareWith') compareWith: (row: any, model: any) => boolean = (row: any, model: any) => {\n    return row === model;\n  }\n\n  /**\n   * Initialize observable for resize and scroll events\n   */\n  ngOnInit(): void {\n    // initialize observable for resize calculations\n    this._resizeSubs = this._onResize.asObservable().subscribe(() => {\n      if (this._rows) {\n        this._rows.toArray().forEach((row: TdDataTableRowComponent, index: number) => {\n          this._rowHeightCache[this.fromRow + index] = row.height + 1;\n        });\n      }\n      this._calculateWidths();\n      this._calculateVirtualRows();\n    });\n    // initialize observable for scroll column header reposition\n    this._horizontalScrollSubs = this._onHorizontalScroll.asObservable()\n      .subscribe((horizontalScroll: number) => {\n      this._scrollHorizontalOffset = horizontalScroll;\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for virtual scroll rendering\n    this._verticalScrollSubs = this._onVerticalScroll.asObservable()\n      .subscribe((verticalScroll: number) => {\n      this._scrollVerticalOffset = verticalScroll;\n      this._calculateVirtualRows();\n      this._changeDetectorRef.markForCheck();\n    });\n    this._valueChangesSubs = this.valueChanges.subscribe((value: any) => {\n      this.refresh();\n    });\n  }\n\n  /**\n   * Loads templates and sets them in a map for faster access.\n   */\n  ngAfterContentInit(): void {\n    for (let i: number = 0; i < this._templates.toArray().length; i++) {\n      this._templateMap.set(\n        this._templates.toArray()[i].tdDataTableTemplate,\n        this._templates.toArray()[i].templateRef,\n      );\n    }\n  }\n\n  /**\n   * Checks hosts native elements widths to see if it has changed (resize check)\n   */\n  ngAfterContentChecked(): void {\n    if (this._elementRef.nativeElement) {\n      let newHostWidth: number = this._elementRef.nativeElement.getBoundingClientRect().width;\n      // if the width has changed then we throw a resize event.\n      if (this._hostWidth !== newHostWidth) {\n        this._hostWidth = newHostWidth;\n        this._onResize.next();\n      }\n    }\n    if (this._scrollableDiv.nativeElement) {\n      let newHostHeight: number = this._scrollableDiv.nativeElement.getBoundingClientRect().height;\n      // if the height of the viewport has changed, then we mark for check\n      if (this._hostHeight !== newHostHeight) {\n        this._hostHeight = newHostHeight;\n        this._calculateVirtualRows();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Registers to an observable that checks if all rows have been rendered\n   * so we can start calculating the widths\n   */\n  ngAfterViewInit(): void {\n    this._rowsChangedSubs = this._rows.changes.pipe(\n      debounceTime(0),\n    ).subscribe(() => {\n      this._onResize.next();\n    });\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Unsubscribes observables when data table is destroyed\n   */\n  ngOnDestroy(): void {\n    if (this._resizeSubs) {\n      this._resizeSubs.unsubscribe();\n    }\n    if (this._horizontalScrollSubs) {\n      this._horizontalScrollSubs.unsubscribe();\n    }\n    if (this._verticalScrollSubs) {\n      this._verticalScrollSubs.unsubscribe();\n    }\n    if (this._rowsChangedSubs) {\n      this._rowsChangedSubs.unsubscribe();\n    }\n    if (this._valueChangesSubs) {\n      this._valueChangesSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * Method that gets executed every time there is a scroll event\n   * Calls the scroll observable\n   */\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let horizontalScroll: number = element.scrollLeft;\n      if (this._scrollHorizontalOffset !== horizontalScroll) {\n        this._onHorizontalScroll.next(horizontalScroll);\n      }\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._onVerticalScroll.next(verticalScroll);\n      }\n    }\n  }\n\n  /**\n   * Returns the width needed for the columns via index\n   */\n  getColumnWidth(index: number): number {\n    if (this._widths[index]) {\n      return this._widths[index].value;\n    }\n    return undefined;\n  }\n\n  getCellValue(column: ITdDataTableColumn, value: any): string {\n    if (column.nested === undefined || column.nested) {\n      return this._getNestedValue(column.name, value);\n    }\n    return value[column.name];\n  }\n\n  /**\n   * Getter method for template references\n   */\n   getTemplateRef(name: string): TemplateRef<any> {\n     return this._templateMap.get(name);\n   }\n\n  /**\n   * Clears model (ngModel) of component by removing all values in array.\n   */\n  clearModel(): void {\n    this.value.splice(0, this.value.length);\n  }\n\n  /**\n   * Refreshes data table and rerenders [data] and [columns]\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n    this._calculateWidths();\n    this._calculateCheckboxState();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Selects or clears all rows depending on 'checked' value.\n   */\n  selectAll(checked: boolean): void {\n    let toggledRows: any[] = [];\n    if (checked) {\n      this._data.forEach((row: any) => {\n        // skiping already selected rows\n        if (!this.isRowSelected(row)) {\n          this.value.push(row);\n          // checking which ones are being toggled\n          toggledRows.push(row);\n        }\n      });\n      this._allSelected = true;\n      this._indeterminate = true;\n    } else {\n      this._data.forEach((row: any) => {\n        // checking which ones are being toggled\n        if (this.isRowSelected(row)) {\n          toggledRows.push(row);\n          let modelRow: any = this.value.filter((val: any) => {\n            return this.compareWith(row, val);\n          })[0];\n          let index: number = this.value.indexOf(modelRow);\n          if (index > -1) {\n            this.value.splice(index, 1);\n          }\n        }\n      });\n      this._allSelected = false;\n      this._indeterminate = false;\n    }\n    this.onSelectAll.emit({rows: toggledRows, selected: checked});\n  }\n\n  /**\n   * Checks if row is selected\n   */\n  isRowSelected(row: any): boolean {\n    // compare items by [compareWith] function\n    return this.value ? this.value.filter((val: any) => {\n      return this.compareWith(row, val);\n    }).length > 0 : false;\n  }\n\n  /**\n   * Selects or clears a row depending on 'checked' value if the row 'isSelectable'\n   * handles cntrl clicks and shift clicks for multi-select\n   */\n  select(row: any, event: Event, currentSelected: number): void {\n    if (this.selectable) {\n      this.blockEvent(event);\n      // Check to see if Shift key is selected and need to select everything in between\n      let mouseEvent: MouseEvent = event as MouseEvent;\n      if (this.multiple && mouseEvent && mouseEvent.shiftKey && this._lastSelectedIndex > -1) {\n        let firstIndex: number = currentSelected;\n        let lastIndex: number = this._lastSelectedIndex;\n        if (currentSelected > this._lastSelectedIndex) {\n          firstIndex = this._lastSelectedIndex;\n          lastIndex = currentSelected;\n        }\n        // if clicking a checkbox behind the initial check, then toggle all selections expect the initial checkbox\n        // else the checkboxes clicked are all after the initial one\n        if ((this._firstSelectedIndex >= currentSelected && this._lastSelectedIndex > this._firstSelectedIndex) ||\n           (this._firstSelectedIndex <= currentSelected && this._lastSelectedIndex < this._firstSelectedIndex)) {\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            if (this._firstSelectedIndex !== i) {\n              this._doSelection(this._data[i], i);\n            }\n          }\n        } else if ((this._firstSelectedIndex > currentSelected) || (this._firstSelectedIndex < currentSelected)) {\n          // change indexes depending on where the next checkbox is selected (before or after)\n          if (this._firstSelectedIndex > currentSelected) {\n            lastIndex--;\n          } else if (this._firstSelectedIndex < currentSelected) {\n            firstIndex++;\n          }\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            let rowSelected: boolean = this.isRowSelected(this._data[i]);\n            // if row is selected and first checkbox was selected\n            // or if row was unselected and first checkbox was unselected\n            // we ignore the toggle\n            if ((this._firstCheckboxValue && !rowSelected) ||\n                (!this._firstCheckboxValue && rowSelected)) {\n              this._doSelection(this._data[i], i);\n            } else if (this._shiftPreviouslyPressed) {\n              // else if the checkbox selected was in the middle of the last selection and the first selection\n              // then we undo the selections\n              if ((currentSelected >= this._firstSelectedIndex && currentSelected <= this._lastSelectedIndex) ||\n                  (currentSelected <= this._firstSelectedIndex && currentSelected >= this._lastSelectedIndex)) {\n                this._doSelection(this._data[i], i);\n              }\n            }\n          }\n        }\n        this._shiftPreviouslyPressed = true;\n      // if shift wasnt pressed, then we take the element checked as the first row\n      // incase the next click uses shift\n      } else if (mouseEvent && !mouseEvent.shiftKey) {\n        this._firstCheckboxValue = this._doSelection(row, currentSelected);\n        this._shiftPreviouslyPressed = false;\n        this._firstSelectedIndex = currentSelected;\n      }\n      this._lastSelectedIndex = currentSelected;\n    }\n  }\n\n  /**\n   * Overrides the onselectstart method of the document so other text on the page\n   * doesn't get selected when doing shift selections.\n   */\n  disableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = function(): boolean {\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Resets the original onselectstart method.\n   */\n  enableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = undefined;\n    }\n  }\n\n  /**\n   * emits the onRowClickEvent when a row is clicked\n   * if clickable is true and selectable is false then select the row\n   */\n  handleRowClick(row: any, index: number, event: Event): void {\n    if (this.clickable) {\n      // ignoring linting rules here because attribute it actually null or not there\n      // can't check for undefined\n      const srcElement: any = event.srcElement || event.currentTarget;\n      /* tslint:disable-next-line */\n      if (srcElement.getAttribute('stopRowClick') === null) {\n        this.onRowClick.emit({\n          row: row,\n          index: index,\n        });\n      }\n    }\n  }\n\n  /**\n   * Method handle for sort click event in column headers.\n   */\n  handleSort(column: ITdDataTableColumn): void {\n    if (this._sortBy === column) {\n      this._sortOrder = this._sortOrder === TdDataTableSortingOrder.Ascending ?\n        TdDataTableSortingOrder.Descending : TdDataTableSortingOrder.Ascending;\n    } else {\n      this._sortBy = column;\n      this._sortOrder = TdDataTableSortingOrder.Ascending;\n    }\n    this.onSortChange.next({ name: this._sortBy.name, order: this._sortOrder });\n  }\n\n  /**\n   * Handle all keyup events when focusing a data table row\n   */\n  _rowKeyup(event: KeyboardEvent, row: any, index: number): void {\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        /** if user presses enter or space, the row should be selected */\n        if (this.selectable) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case UP_ARROW:\n        /**\n         * if users presses the up arrow, we focus the prev row\n         * unless its the first row\n         */\n        if (index > 0) {\n          this._rows.toArray()[index - 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index >= 0) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case DOWN_ARROW:\n        /**\n         * if users presses the down arrow, we focus the next row\n         * unless its the last row\n         */\n        if (index < (this._rows.toArray().length - 1)) {\n          this._rows.toArray()[index + 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index < this._data.length) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to prevent the default events\n   */\n  blockEvent(event: Event): void {\n    event.preventDefault();\n  }\n\n  private _getNestedValue(name: string, value: any): string {\n    if (!(value instanceof Object) || !name) {\n      return value;\n    }\n    if (name.indexOf('.') > -1) {\n      let splitName: string[] = name.split(/\\.(.+)/, 2);\n      return this._getNestedValue(splitName[1], value[splitName[0]]);\n    } else {\n      return value[name];\n    }\n  }\n\n  /**\n   * Does the actual Row Selection\n   */\n  private _doSelection(row: any, rowIndex: number): boolean {\n    let wasSelected: boolean = this.isRowSelected(row);\n    if (!wasSelected) {\n      if (!this._multiple) {\n        this.clearModel();\n      }\n      this.value.push(row);\n    } else {\n      // compare items by [compareWith] function\n      row = this.value.filter((val: any) => {\n        return this.compareWith(row, val);\n      })[0];\n      let index: number = this.value.indexOf(row);\n      if (index > -1) {\n        this.value.splice(index, 1);\n      }\n    }\n    this._calculateCheckboxState();\n    this.onRowSelect.emit({row: row, index: rowIndex, selected: !wasSelected});\n    this.onChange(this.value);\n    return !wasSelected;\n  }\n\n  /**\n   * Calculate all the state of all checkboxes\n   */\n  private _calculateCheckboxState(): void {\n    if (this._data) {\n      this._allSelected = typeof this._data.find((d: any) => !this.isRowSelected(d)) === 'undefined';\n      this._indeterminate = false;\n      for (let row of this._data) {\n        if (!this.isRowSelected(row)) {\n          continue;\n        }\n        this._indeterminate = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Calculates the widths for columns and cells depending on content\n   */\n  private _calculateWidths(): void {\n    if (this._colElements && this._colElements.length) {\n      this._widths = [];\n      this._colElements.forEach((col: TdDataTableColumnComponent, index: number) => {\n        this._adjustColumnWidth(index, this._calculateWidth());\n      });\n      this._adjustColumnWidhts();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Adjusts columns after calculation to see if they need to be recalculated.\n   */\n  private _adjustColumnWidhts(): void {\n    let fixedTotalWidth: number = 0;\n    // get the number of total columns that have flexible widths (not fixed or hidden)\n    let flexibleWidths: number = this._widths.filter((width: IInternalColumnWidth, index: number) => {\n      if (this.columns[index].hidden) {\n        return false;\n      }\n      if (width.limit || width.max || width.min) {\n        fixedTotalWidth += width.value;\n      }\n      return !width.limit && !width.max && !width.min;\n    }).length;\n    // calculate how much pixes are left that could be spread across\n    // the flexible columns\n    let recalculateHostWidth: number = 0;\n    if (fixedTotalWidth < this.hostWidth) {\n      recalculateHostWidth = this.hostWidth - fixedTotalWidth;\n    }\n    // if we have flexible columns and pixels to spare on them\n    // we try and spread the pixels across them\n    if (flexibleWidths && recalculateHostWidth) {\n      let newValue: number = Math.floor(recalculateHostWidth / flexibleWidths);\n      let adjustedNumber: number = 0;\n      // adjust the column widths with the spread pixels\n      this._widths.forEach((colWidth: IInternalColumnWidth) => {\n        if (this._widths[colWidth.index].max && this._widths[colWidth.index].value > newValue ||\n            this._widths[colWidth.index].min && this._widths[colWidth.index].value < newValue ||\n            !this._widths[colWidth.index].limit) {\n          this._adjustColumnWidth(colWidth.index, newValue);\n          adjustedNumber++;\n        }\n      });\n      // if there are still columns that need to be recalculated, we start over\n      let newFlexibleWidths: number = this._widths.filter((width: IInternalColumnWidth) => {\n        return !width.limit && !width.max;\n      }).length;\n      if (newFlexibleWidths !== adjustedNumber && newFlexibleWidths !== flexibleWidths) {\n        this._adjustColumnWidhts();\n      }\n    }\n  }\n\n  /**\n   * Adjusts a single column to see if it can be recalculated\n   */\n  private _adjustColumnWidth(index: number, value: number): void {\n    this._widths[index] = {\n      value: value,\n      index: index,\n      limit: false,\n      min: false,\n      max: false,\n    };\n    // flag to see if we need to skip the min width projection\n    // depending if a width or min width has been provided\n    let skipMinWidthProjection: boolean = false;\n    if (this.columns[index]) {\n      // if the provided width has min/max, then we check to see if we need to set it\n      if (typeof this.columns[index].width === 'object') {\n        let widthOpts: ITdDataTableColumnWidth = <ITdDataTableColumnWidth>this.columns[index].width;\n        // if the column width is less than the configured min, we override it\n        skipMinWidthProjection = (widthOpts && !!widthOpts.min);\n        if (widthOpts && widthOpts.min >= this._widths[index].value) {\n          this._widths[index].value = widthOpts.min;\n          this._widths[index].min = true;\n        // if the column width is more than the configured max, we override it\n        } else if (widthOpts && widthOpts.max <= this._widths[index].value) {\n          this._widths[index].value = widthOpts.max;\n          this._widths[index].max = true;\n        }\n      // if it has a fixed width, then we just set it\n      } else if (typeof this.columns[index].width === 'number') {\n        this._widths[index].value = <number>this.columns[index].width;\n        skipMinWidthProjection = this._widths[index].limit = true;\n      }\n    }\n    // if there wasn't any width or min width provided, we set a min to what the column width min should be\n    if (!skipMinWidthProjection &&\n        this._widths[index].value < this._colElements.toArray()[index].projectedWidth) {\n      this._widths[index].value = this._colElements.toArray()[index].projectedWidth;\n      this._widths[index].min = true;\n      this._widths[index].limit = false;\n    }\n  }\n\n  /**\n   * Generic method to calculate column width\n   */\n  private _calculateWidth(): number {\n    let renderedColumns: ITdDataTableColumn[] = this.columns.filter((col: ITdDataTableColumn) => !col.hidden);\n    return Math.floor(this.hostWidth / renderedColumns.length);\n  }\n\n  /**\n   * Method to calculate the rows to be rendered in the viewport\n   */\n  private _calculateVirtualRows(): void {\n    let scrolledRows: number = 0;\n    if (this._data) {\n      this._totalHeight = 0;\n      let rowHeightSum: number = 0;\n      // loop through all rows to see if we have their height cached\n      // and sum them all to calculate the total height\n      this._data.forEach((d: any, i: number) => {\n        // iterate through all rows at first and assume all\n        // rows are the same height as the first one\n        if (!this._rowHeightCache[i]) {\n          this._rowHeightCache[i] = this._rowHeightCache[0] || TD_VIRTUAL_DEFAULT_ROW_HEIGHT;\n        }\n        rowHeightSum += this._rowHeightCache[i];\n        // check how many rows have been scrolled\n        if (this._scrollVerticalOffset - rowHeightSum > 0) {\n          scrolledRows++;\n        }\n      });\n      this._totalHeight = rowHeightSum;\n      // set the initial row to be rendered taking into account the row offset\n      let fromRow: number = scrolledRows - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n\n      let hostHeight: number = this._hostHeight;\n      let index: number = 0;\n      // calculate how many rows can fit in the viewport\n      while (hostHeight > 0) {\n        hostHeight -= this._rowHeightCache[this.fromRow + index];\n        index++;\n      }\n      // set the last row to be rendered taking into account the row offset\n      let range: number = (index - 1) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      // if last row is greater than the total length, then we use the total length\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    // calculate the proper offset depending on how many rows have been scrolled\n    if (scrolledRows > TD_VIRTUAL_OFFSET) {\n      for (let index: number = 0; index < this.fromRow; index++) {\n        offset += this._rowHeightCache[index];\n      }\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n",
    "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdDataTableTemplate]ng-template'})\nexport class TdDataTableTemplateDirective extends TemplatePortalDirective {\n\n  @Input() tdDataTableTemplate: string;\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",
    "import { Component, Input, Output, Renderer2, ElementRef, ContentChildren, QueryList, HostListener } from '@angular/core';\n\nimport { TdDataTableCellComponent } from '../data-table-cell/data-table-cell.component';\nimport { TdDataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-column-row]',\n  styles: [`:host{\n  border-bottom-style:solid;\n  border-bottom-width:1px; }\n\n:host.td-data-table-row{\n  height:48px; }\n\n:host.td-data-table-column-row{\n  height:56px; }\n`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableColumnRowComponent {\n\n  constructor(protected _elementRef: ElementRef, protected _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column-row');\n  }\n\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-row]',\n  styles: [`:host{\n  border-bottom-style:solid;\n  border-bottom-width:1px; }\n\n:host.td-data-table-row{\n  height:48px; }\n\n:host.td-data-table-column-row{\n  height:56px; }\n`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableRowComponent {\n\n  private _selected: boolean = false;\n\n  @Input('selected')\n  set selected(selected: boolean) {\n    if (selected) {\n      this._renderer.addClass(this._elementRef.nativeElement, 'td-selected');\n    } else {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'td-selected');\n    }\n    this._selected = selected;\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  get height(): number {\n    let height: number = 48;\n    if (this._elementRef.nativeElement) {\n      height = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return height;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-row');\n  }\n\n  /**\n   * Listening to click event to explicitly focus the row element.\n   */\n  @HostListener('click')\n  clickListener(): void {\n    this.focus();\n  }\n\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n"
  ],
  "names": [
    "MatIconModule",
    "MatTooltipModule",
    "NgModule",
    "Renderer2",
    "DOWN_ARROW",
    "UP_ARROW",
    "SPACE",
    "ENTER",
    "coerceBooleanProperty",
    "Subject",
    "mixinControlValueAccessor",
    "Input",
    "Directive",
    "TemplatePortalDirective",
    "HostListener",
    "ElementRef",
    "Component"
  ],
  "mappings": ";;;;;;AIAA;;;;;;;;;;;;;AAgBA,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;KACpC,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;IAC5E,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAE/E,AAAO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5B,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;IACvC,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;CACxF;AAED,AAMC;AAED,AAQC;AAED,AAKC;AAED,AAEC;AAED,AAEC;AAED,AAOC;AAED,AA0BC;AAED,AAEC;AAED,AAAO,SAAS,QAAQ,CAAC,CAAC,EAAE;IACxB,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IAClE,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACxB,OAAO;QACH,IAAI,EAAE,YAAY;YACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;YACnC,OAAO,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;SAC3C;KACJ,CAAC;CACL;;;;;;AD7GD,IAAA,6BAAA,kBAAA,YAAA;;;;;IAsBE,SAAF,6BAAA,CAAA,WAAA,EAAA,SAAA,EAAA;QAAwB,IAAxB,CAAA,WAAmC,GAAX,WAAW,CAAY;QAAY,IAA3D,CAAA,SAAoE,GAAT,SAAS,CAAW;QAC3E,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,0BAA0B,CAAC,CAAC;KACrF;;;AAnBH,6BAAA,CAAW,UAAX,GAAA;;;gBAGE,QAAQ,EAAV,8BAAA;;;;;;;IASA,EAAA,IAAA,EAAAe,eAAA,GAAA;IACA,EAAA,IAAA,EAAAZ,cAAA,GAAU;CACV,CAAA,EAAA,CAAA;;;;;;;QAwBA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;;;;;IAyBE,MAAF,CAAA,cAAA,CAAA,uBAAA,CAAA,SAAA,EAAA,UAAA,EAAA;;;;QACI,GAAJ,EAAS,YAAT;YACA,OAAA,IAAA,CAAA,SAAA,CAAA;;;;;;QArBI,GAAJ,EAAA,UAAA,QAAA,EAAA;YACM,IAAI,QAAV,EAAoB;gBACpB,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA,aAAA,CAAA,CAAA;aAAW;iBACA;gBACX,IAAA,CAAA,SAAA,CAAA,WAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA,aAAA,CAAA,CAAA;aACS;;;;;KAET,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,uBAAA,CAAA,SAAA,EAAA,QAAA,EAAA;;;;;YAGA,qBAAA,MAAA,GAAA,EAAA,CAAA;YACA,IAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA;gBACY,MAAZ,GAAA,EAAA,IAAA,CAAA,WAAA,CAAwC,aAAxC,GAAA,qBAAA,EAAA,CAAA,MAAA,CAAA;aACA;YACA,OAAA,MAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;;;;;;;;;;;;;IAgBA,uBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;;;IAtDA,OAAA,uBAAA,CAAA;;AAEA,uBAAA,CAAU,UAAV,GAAA;IACA,EAAA,IAAA,EAAAa,cAAA,EAAA,IAAA,EAAA,CAAA;;;;;;;;AAUA,uBAAA,CAAU,cAAV,GAAA,YAAuC,EAAvC,OAAA;IACA,EAAA,IAAA,EAAAD,eAAA,GAAA;;;;IA1CA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAJ,UAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA;IAAA,eAAA,EAA4C,CAA5C,EAAA,IAAA,EAAAG,iBAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA;;;;;;;;;;;;;;;;CDOA,CAAAD,8BAAA,CAAA,CAA2C,CAA3C;AACA,4BAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAD,cAAA,EAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,kCAAA,EAAA,EAAA,EAAA;;;AANA,4BAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;;;;AAHA,4BAAA,CAAA,cAAA,GAAA;IAAA,qBAAA,EAAA,CAAwD,EAAxD,IAAA,EAAAD,UAAA,EAAA,EAAA;;;;;;;;;;CDAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAwEA,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;;;;;AAOA,IAAA,qBAAA,GAAAD,gCAAA,CAAA,eAAA,EAAA,EAAA,CAAA,CAAA;;;;;;;;;IAKA,SAAA,oBAAA,CAAA,SAAA,EAAA,WAA+D,EAA/D,aAA8E,EAAE,kBAAhF,EAAA;QA8IA,IAAA,KAAA,GAAA,MAAkC,CAAlC,IAAA,CAAA,IAAA,EAAA,kBAA+D,CAA/D,IAAA,IAAA,CAAA;;;;;;;QA+SA,KAAA,CAAA,uBAAA,GAEsB,CAFtB,CAAA;QAII,KAAK,CAAC,mBAAmB,GAA7B,IAAAD,eAAA,EAAA,CAAA;QAJoD,KAApD,CAAA,iBAAA,GAA6D,IAA7DA,eAAA,EAAA,CAAA;QACsB,KAAtB,CAAA,eAAA,GAAA,EAAA,CAAA;QACsB,KAAtB,CAAA,YAAmC,GAAb,CAAtB,CAAA;QA3SA,KAAA,CAAA,WAAA,GAAA,CAAA,CAAA;QAWA,KAAA,CAAA,qBAAA,GAAA,CAAA,CAAA;QACA,KAAA,CAAA,QAAA,GAAqC,CAArC,CAAA;QAKA,KAAA,CAAA,MAAA,GAAA,CAAA,CAAA;QAEA,KAAA,CAAA,WAAA,GAAA,KAAA,CAAA;QACA,KAAA,CAAA,UAAA,GAAA,KAAA,CAA+C;QAG/C,KAAA,CAAA,SAAA,GAAA,IAAA,CAAsC;QAEtC,KAAA,CAAA,YAAA,GAAkC,KAAlC,CAAA;QAEA,KAAA,CAAA,cAAiC,GAAjC,KAAA,CAAA;;;;QA6CA,KAAA,CAAA,SAAA,GAAA,KAAA,CAAsC;QACtC,KAAA,CAAA,UAAA,GAAA,uBAAA,CAAA,SAAA,CAAA;;;;;;;QAMA,KAAA,CAAA,mBAAA,GAAA,KAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAwNA,CAAA;;;;;;;QAeA,GAAA,EAAA,YAAA;;;;;;YApTA,OAAA,IAAA,CAAA,UAAA,CAAA;;;QAGI,YAAJ,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,iBAAA,EAAA;;;;;;;;SAkCA;QACI,UAAJ,EAAgB,IAAhB;QACA,YAAA,EAAA,IAAA;;;;;;;QAOA,GAAA,EAAA,YAAA;;;;;KAKA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,SAAA,EAAA;;;;;;YAMA,OAAA,IAAA,CAAA,QAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;;;;;;;;;;;;QA6CM,YAAN,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,mBAAA,EAAA;;;;;;YAMA,OAAA,IAAA,CAAA,uBAAA,GAAA,CAAA,CAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;;;;;;;;QAQI,GAAJ,EAAS,YAAY;YACb,OAAR,IAAA,CAAA,YAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAkB;;KAElB,CAAA,CAAA;IACA,MAAM,CAAC,cAAP,CAAA,oBAAA,CAAA,SAAA,EAAA,eAAA,EAAA;;;;;;QAGI,GAAJ,EAAA,YAAqB;YACrB,OAAA,IAAA,CAAA,cAAA,CAAA;;;;KAEA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,MAAA,EAAA;;;;;;;;;;;;;;;YAYA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA;YACQ,IAAI,CAAC,eAAb,GAAA,EAAA,CAAA;YACM,OAAO,CAAb,OAAA,EAAA,CAAA,IAAA,CAAA,YAAA;gBACA,KAAA,CAAA,OAAA,EAAA,CAAA;;gBAGU,KAAV,CAAA,cAAA,CAAA,aAAA,CAAA,SAAA,GAAA,CAAA,CAAA;;SAEA;QACA,UAAY,EAAZ,IAAkB;QAClB,YAAY,EAAZ,IAAkB;KAClB,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,aAAA,EAAA;;;;QAGA,GAAA,EAAW,YAAX;YACM,OAAO,IAAb,CAAA,YAAA,CAAA;SACK;QACL,UAAA,EAAA,IAAA;;;;;;;;YAQA,IAAA,KAAA,GAAA,IAAA,CAAoC;YAC5B,IAAR,IAAA,CAAA,QAAA,EAAA;;;;;;gBAGA,qBAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;gBACA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;;;;;;;;gBAQA,OAAA,EAAA,CAAA;aACS;;;;;;;;;;;;;;;IAYT,MAAA,CAAA,cAAgC,CAAhC,oBAAA,CAAA,SAAA,EAAA,YAAA,EAAA;;;;;;SAGA;;;;;;;;;;SAUA;QACI,UAAJ,EAAA,IAAA;;;;;;;QAIA,GAAA,EAAA,YAAA;;;;;;;;;;QAUA,GAAA,EAAA,UAAA,SAAA,EAAA;YACA,IAAA,CAAA,UAAA,GAAAD,8BAAA,CAAmD,SAAnD,CAAA,CAAA;SACA;QACA,UAAY,EAAZ,IAAA;QACA,YAAA,EAAA,IAAA;KAEA,CAAA,CAAA;;;;;QAEM,GAAN,EAAA,YAAA;YACA,OAAe,IAAf,CAAA,SAAA,CAAA;SACA;;;;;;;;QAQM,GAAN,EAAA,UAAqC,QAArC,EAAA;YACA,IAAA,CAAA,SAAA,GAAQA,8BAAR,CAAA,QAAA,CAAA,CAAA;SACA;QACA,UAAY,EAAZ,IAAA;QACA,YAAA,EAAA,IAAA;KAEA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,UAAA,EAAA;;;;;YAEA,OAAA,IAAA,CAAA,SAAA,CAAA;SACA;;;;;;;;;;;;QAwDA,YAAA,EAAA,IAAA;;IAEA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAoD,EAApD,QAA8D,EAA9D;;;;;;;QAOA,GAAA,EAAA,UAAA,UAAA,EAAA;YACA,IAAA,CAAA,UAAA,EAAA;;aAES;YACT,qBAAA,MAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,EAAA,OAAA,CAAA,CAAA,IAAA,KAAA,UAAA,CAAA,EAAA,CAAA,CAAA;YACM,IAAI,CAAC,MAAX,EAAA;gBACU,MAAV,IAAA,KAAA,CAAA,sCAAA,CAAA,CAAA;aACA;;SAEA;QACA,UAAA,EAAA,IAAkB;QAClB,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,cAAA,EAAA;;;;QAIA,GAAO,EAAP,YAAA;YACA,OAAA,IAAA,CAAA,OAAA,CAAA;;;;;IAKE,MAAF,CAAA,cAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,WAAA,EAAA;;;;;;;;;YAYA,qBAAA,SAAA,GAAA,KAAA,GAAA,KAAA,CAAA,WAAA,EAAA,GAAA,KAAA,CAAA;YACQ,IAAI,SAAZ,KAAA,MAAA,IAAA,SAAA,KAAA,KAAA,EAAA;gBACA,MAAA,IAAA,KAAA,CAAA,wCAAA,CAAA,CAAA;;YAEM,IAAI,CAAV,UAAA,GAAA,SAAA,KAAA,KAAA;gBACQ,uBAAR,CAAA,SAAA,GAAA,uBAAA,CAAA,UAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,oBAAuB,CAAvB,SAAA,EAAA,eAAA,EAAA;;;;QAIA,GAAA,EAAA,YAAA;YACA,OAAA,IAAA,CAAA,UAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;;;;;;QAMA,GAAA,EAAA,YAAA;YACQ,OAAR,IAAA,CAAA,KAAyB,IAAzB,IAAiC,CAAjC,KAAuC,CAAvC,MAA8C,GAA9C,CAAA,CAAmD;SAGnD;QACA,UAAA,EAAA,IAAA;QACI,YAAJ,EAAA,IAAA;KACG,CAAH,CAAA;;;;;IAKE,oBAAF,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;QACI,IAAI,KAAK,GAAb,IAAA,CAAA;;QAEA,IAAA,CAAA,WAAA,GAAA,IAAA,CAAA,SAAA,CAAA,YAAA,EAAA,CAAA,SAAA,CAAA,YAAA;YACQ,IAAI,KAAZ,CAAA,KAAA,EAAA;gBACU,KAAV,CAAA,KAAA,CAAA,OAAA,EAAA,CAAgC,OAAhC,CAAA,UAAA,GAAA,EAAA,KAAA,EAAA;oBACA,KAAA,CAAA,eAAA,CAAA,KAAA,CAAA,OAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,MAAA,GAAA,CAAA,CAAA;iBACa,CAAb,CAAA;aACA;YACA,KAAA,CAAA,gBAAA,EAAA,CAAA;YACQ,KAAK,CAAb,qBAAA,EAAA,CAAA;SACA,CAAA,CAAA;;QAEI,IAAI,CAAR,qBAA8B,GAA9B,IAAA,CAAA,mBAAA,CAAA,YAAA,EAAA;aACA,SAAA,CAAA,UAAA,gBAA2C,EAA3C;YACA,KAAA,CAAA,uBAAA,GAAA,gBAAA,CAAA;YACA,KAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,CAAA;;;;;;;YAMA,KAAe,CAAf,kBAAA,CAAA,YAAA,EAAA,CAAA;SACA,CAAA,CAAA;QACI,IAAI,CAAR,iBAAA,GAAA,IAAA,CAAA,YAAA,CAAA,SAAA,CAAA,UAAA,KAAA,EAAA;YACM,KAAN,CAAA,OAAA,EAAA,CAAA;SACA,CAAA,CAAA;KACA,CAAA;;;;;IAKA,oBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;QACA,KAAA,qBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,UAAA,CAAA,OAAA,EAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;YACA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,IAAA,CAAA,UAAA,CAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,IAAA,CAAA,UAAA,CAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA;;;;;;;IAMA,oBAAoB,CAAC,SAArB,CAAA,qBAAA,GAAA,YAAA;QACA,IAAM,IAAN,CAAA,WAAA,CAAA,aAAA,EAAsC;YACtC,qBAAA,YAAA,GAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,CAAA,KAAA,CAAA;;YAEA,IAAA,IAAA,CAAA,UAAA,KAAA,YAAA,EAAA;;;;;;YAEA,qBAAA,aAAA,GAAA,IAAA,CAAA,cAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,CAAA,MAAA,CAAA;;YAEM,IAAN,IAAA,CAAA,WAAA,KAAA,aAAA,EAAA;gBACA,IAAA,CAAA,WAAA,GAAA,aAAA,CAAA;gBACA,IAAgB,CAAC,qBAAjB,EAAA,CAAA;gBACA,IAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,CAAA;;;;;;;;;;;;;SAYA,CAAA,CAAA;QACI,IAAI,CAAC,qBAAqB,EAA9B,CAAA;KACG,CAAH;;;;;IAKE,oBAAF,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;QACI,IAAI,IAAR,CAAA,WAAA,EAAA;YACQ,IAAR,CAAA,WAAA,CAAyB,WAAzB,EAAA,CAAA;SACA;QACI,IAAI,IAAR,CAAA,qBAAA,EAAA;YACA,IAAA,CAAA,qBAAA,CAAA,WAAA,EAAA,CAAA;;;;;;YAKA,IAAA,CAAA,gBAAA,CAAA,WAAA,EAAA,CAAA;SACA;QACI,IAAI,IAAR,CAAA,iBAAA,EAAA;YACM,IAAI,CAAC,iBAAX,CAAkC,WAAlC,EAAA,CAAA;;KAEA,CAAA;;;;;;;IAOA,oBAAA,CAAA,SAA4B,CAA5B,YAAA,GAAA,UAAA,KAAA,EAAA;QACA,qBAAA,OAAA,KAAA,KAAA,CAAA,MAAA,EAAA,CAAA;QAAA,IAAA,OAAA,EAAA;YACM,qBAAN,gBAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;gBAEQ,IAAI,CAAZ,mBAAA,CAAA,IAAqC,CAArC,gBAAA,CAAA,CAAA;aACA;YACA,qBAAA,cAAA,GAAA,OAAmC,CAAnC,SAAA,CAAA;YACA,IAAA,IAAA,CAAA,qBAAA,KAAmC,cAAnC,EAAA;gBACA,IAAA,CAAW,iBAAX,CAAA,IAAA,CAAA,cAAA,CAAA,CAAA;aACA;SACA;KACA,CAAA;;;;;;IAMA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAA,KAAA,EAAA;QACI,IAAI,IAAR,CAAA,OAAoB,CAAC,KAAK,CAA1B,EAAA;YACA,OAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAAA;;;;;;;;;IAQA,oBAAkB,CAAlB,SAAA,CAA6B,YAA7B,GAAA,UAAA,MAAA,EAAA,KAAA,EAAA;QACA,IAAA,MAAA,CAAA,MAAA,KAA0B,SAA1B,IAAA,MAAA,CAAA,MAAA,EAAA;YACA,OAAA,IAAA,CAAA,eAAA,CAAA,MAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;;;;;;;;IAME,oBAAF,CAAA,SAAA,CAAA,cAAA,GAAA,UAAA,IAAA,EAAA;QACI,OAAJ,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA;KACA,CAAA;;;;;IAKA,oBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;QACA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;KACA,CAAA;;;;;IAKA,oBAAA,CAAiB,SAAjB,CAAA,OAAA,GAAqC,YAArC;QACA,IAAA,CAAA,qBAAA,EAAA,CAAA;QACA,IAAA,CAAA,gBAAA,EAAA,CAAA;QACA,IAAA,CAAA,uBAAA,EAAA,CAAA;QACA,IAAA,CAAA,kBAAA,CAAkB,YAAlB,EAAgC,CAAhC;KACA,CAAA;;;;;;IAKA,oBAAY,CAAZ,SAAA,CAAuB,SAAvB,GAAA,UAAA,OAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QAAA,qBAAqB,WAArB,GAAA,EAAA,CAAA;QACA,IAAA,OAAA,EAAA;YACA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;;gBAEA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAgB,EAAhB;;;;iBAIA;aACA,CAAA,CAAA;YACA,IAAA,CAAA,YAAA,GAAkB,IAAlB,CAAA;YACA,IAAA,CAAA,cAAA,GAAA,IAAA,CAAA;SAAA;;;;gBAIA,IAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,EAAA;oBACA,WAAA,CAAgB,IAAI,CAAC,GAArB,CAAA,CAAA;oBACA,qBAAA,QAAA,GAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA;wBACA,OAAA,KAAA,CAAA,WAAA,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA;qBACW,CAAX,CAAA,CAAA,CAAA,CAAA;oBACA,qBAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;oBACY,IAAZ,KAAA,GAAA,CAAA,CAAA,EAAA;;;iBAGA;aAAA,CAAA,CAAA;YACA,IAAQ,CAAR,YAAA,GAAA,KAAA,CAAA;YACA,IAAQ,CAAR,cAAA,GAAA,KAAA,CAAA;SACA;QACA,IAAA,CAAO,WAAP,CAAA,IAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,QAAA,EAAA,OAAA,EAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;;QASI,OAAJ,IAAA,CAAA,KAAA,GAAwB,IAAxB,CAAA,KAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA;YACM,OAAN,KAAA,CAAA,WAAA,CAAA,GAAkC,EAAlC,GAAA,CAAA,CAAA;SACA,CAAA,CAAA,MAAA,GAAA,CAAA,GAAA,KAAqB,CAArB;KACA,CAAA;;;;;;;;;IASA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,GAAA,EAAA,KAAA,EAAA,eAAA,EAAA;QACA,IAAA,IAAA,CAAA,UAAA,EAAA;YACA,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;;iBAMA;;;;qBAIA,IAAA,CAAA,mBAAsB,IAAtB,eAA8C,IAAI,IAAlD,CAAuD,kBAAvD,GAAA,IAAA,CAAA,mBAAA,CAAA,EAAA;;wBAEA,IAAA,IAAA,CAAA,mBAAA,KAAA,CAAA,EAAsD;4BACtD,IAAwB,CAAxB,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;yBACe;qBACf;iBACS;qBACT,IAAA,CAAA,IAAA,CAAA,mBAAA,GAAA,eAAA,MAAA,IAAA,CAAA,mBAAA,GAAA,eAAA,CAAA,EAAA;;oBAEA,IAAA,IAAA,CAAA,mBAAA,GAAA,eAAA,EAAA;;;;;;oBAKA,KAAA,qBAAA,CAAA,GAAA,UAAA,EAAA,CAAA,IAAA,SAAA,EAAA,CAAA,EAAA,EAAA;wBACoB,qBAApB,WAAA,GAAA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA;;;;wBAGA,IAAA,CAAA,IAAA,CAAA,mBAAA,IAAA,CAAA,WAAA;6BACA,CAAA,IAA4B,CAA5B,mBAAA,IAAA,WAAA,CAAA,EAAA;4BACA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAyD,CAAC;yBAC1D;6BACA,IAA6B,IAAI,CAAjC,uBAAA,EAA2D;;;;;;;;;iBAM3D;gBACY,IAAZ,CAAiB,uBAAjB,GAAA,IAAA,CAAA;;;;iBAIA,IAAA,UAAA,IAA2B,CAA3B,UAAA,CAAA,QAAA,EAAA;gBACA,IAAU,CAAV,mBAAA,GAAiC,IAAjC,CAAsC,YAAtC,CAAmD,GAAG,EAAtD,eAAA,CAAA,CAAA;gBACA,IAAA,CAAA,uBAAA,GAAA,KAAA,CAAA;gBACQ,IAAR,CAAA,mBAAA,GAAA,eAAA,CAAA;aACA;;;;;;;;;IASA,oBAAgB,CAAC,SAAjB,CAA2B,oBAA3B,GAAA,YAA8D;QAC9D,IAAA,IAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAS,SAAT,CAAA,aAAA,GAAA,YAAA;gBACQ,OAAR,KAAA,CAAA;aACA,CAAA;;;;;;;IAOA,oBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;QACA,IAAA,IAAQ,CAAR,SAAA,EAAA;YACA,IAAQ,CAAR,SAAA,CAAA,aAAA,GAAmC,SAAS,CAA5C;SACA;KACA,CAAA;;;;;;;;;;QAUA,IAAA,IAAA,CAAA,SAAA,EAAA;;;;;;;;oBAI0B,KAA1B,EAAA,KAAA;iBACA,CAAA,CAAe;aACf;SACK;KACL,CAAA;;;;;;IAKA,oBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA,MAAA,EAAA;;;;;;;;SAMA;QACI,IAAJ,CAAA,YAAA,CAAA,IAAA,CAAA,EAAA,IAAA,EAAA,IAA+B,CAA/B,OAAA,CAAA,IAAA,EAAA,KAAA,EAAqD,IAArD,CAAA,UAAA,EAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;IAOA,oBAAA,CAAA,SAAA,CAA6B,SAA7B,GAAA,UAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA;QACA,QAAQ,KAAR,CAAA,OAAA;YACA,KAAWD,cAAX,CAAA;YACM,KAAND,cAAA;;gBAEQ,IAAI,IAAZ,CAAA,UAAA,EAAA;oBACA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,OAAA,GAAA,KAAA,CAAA,EAAA,IAAA,CAAA,OAAA,GAAA,KAAA,CAAA,CAAA;iBACA;gBACA,MAAA;YACQ,KAARD,iBAAqB;;;;;;;;gBAQrB,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA;gBACY,IAAZ,IAAoB,CAApB,UAAA,IAAA,IAAA,CAAA,QAAA,IAAA,KAAA,CAAA,QAAA,IAAA,IAAA,CAAA,OAAA,GAAA,KAAA,IAAA,CAAA,EAAA;oBACA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAqC,KAArC,CAA2C,IAA3C,CAAgD,OAAhD,GAAA,KAAA,CAAA,EAAA,IAAA,CAAA,OAAmF,GAAnF,KAAA,CAAA,CAAA;iBACW;gBACX,MAAA;YACA,KAAAD,mBAAA;;;;;gBAKA,IAAA,KAAA,IAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,MAAA,GAAA,CAAA,CAAA,EAAA;oBACA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA;;;;;;gBAMA,MAAA;YACQ,QAAR;SACA;KACA,CAAA;;;;;;;;;;;;;;IAcA,oBAAA,CAAA,SAAA,CAAA,eAAqC,GAArC,UAAA,IAAsD,EAAtD,KAAmF,EAAnF;QACA,IAAM,EAAN,KAAA,YAAA,MAAA,CAAA,IAAoC,CAApC,IAAA,EAAA;YACA,OAAA,KAAA,CAAA;SACA;QACA,IAAM,IAAI,CAAV,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAA8B;YAC9B,qBAAA,SAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA,CAAA,CAAA;YACA,OAAA,IAAA,CAAA,eAAA,CAAA,SAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SACA;aACA;;;KAGA,CAAA;;;;;;;IAOA,oBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAA,GAAA,EAAA,QAAA,EAA4D;QAC5D,IAAM,KAAN,GAAA,IAAA,CAAA;;QAEA,IAAM,CAAN,WAAkB,EAAlB;YACA,IAAQ,CAAR,IAAA,CAAA,SAAA,EAAyB;gBACzB,IAAY,CAAZ,UAAA,EAAyB,CAAzB;aACA;YACA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;SACA;aACA;;;gBAGA,OAAA,KAAA,CAAA,WAAA,CAAA,GAAA,EAAA,GAAA,CAA2B,CAA3B;aACA,CAAA,CAAA,CAAQ,CAAR,CAAA;YACA,qBAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;YACM,IAAI,KAAV,GAAA,CAAA,CAAA,EAAA;gBACQ,IAAI,CAAC,KAAb,CAAA,MAAA,CAAA,KAAA,EAAA,CAAkC,CAAC,CAAnC;aACO;SACF;;;;;;;;;;IAQL,oBAAkB,CAAlB,SAAA,CAAA,uBAAA,GAAA,YAAA;QACA,IAAM,KAAK,GAAX,IAAkB,CAAlB;QACA,IAAM,IAAN,CAAW,KAAX,EAAkB;YACZ,IAAN,CAAW,YAAX,GAAA,OAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,EAAA,OAAA,CAAA,KAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,KAAA,WAAA,CAAA;YACM,IAAN,CAAW,cAAX,GAAA,KAAA,CAAA;YACA,IAAA;;;oBAGA,IAAA,CAAA,IAAQ,CAAR,aAAA,CAAA,GAAA,CAAA,EAAA;wBACoB,SAAS;;oBAE7B,IAAA,CAAA,cAAA,GAAoC,IAApC,CAAA;oBACA,MAAA;;aAEA;YACA,OAAA,KAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAmC,KAAnC,EAA0C,CAA1C,EAAA;oBACU;gBACV,IAAU;;iBAED;wBAAT,EAAA,IAAA,GAAA,EAAA,MAAA,GAAA,CAAA,KAAA,CAA6C,EAA7C;aACA;SACA;QACA,IAAA,GAAA,EAAS,EAAT,CAAA;;;;;;IAKA,oBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;;YAEQ,IAAR,CAAA,OAAA,GAAA,EAAA,CAAA;YACQ,IAAI,CAAC,YAAb,CAA0B,OAAO,CAAjC,UAAA,GAAA,EAAA,KAAsD,EAAtD;gBACU,KAAV,CAAA,kBAAkC,CAAlC,KAAA,EAAA,KAAA,CAAA,eAAA,EAAA,CAAA,CAAmE;aACnE,CAAA,CAAA;YACM,IAAI,CAAC,mBAAX,EAAA,CAAA;YACA,IAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,CAAA;;;;;;;IAOA,oBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;QACI,IAAJ,KAAA,GAAgB,IAAhB,CAAqB;;;;;;aAMrB;YACA,IAAA,KAAA,CAAA,KAAA,IAAA,KAAA,CAAA,GAAA,IAA+B,KAA/B,CAAA,GAAA,EAAA;gBACY,eAAZ,IAAA,KAAA,CAAA,KAAA,CAAA;aACA;YACM,OAAN,CAAA,KAAA,CAAA,KAAA,IAAA,CAAA,KAAA,CAAA,GAAsB,IAAY,CAAC,KAAnC,CAAA,GAAA,CAAA;;;;;;YAMA,oBAAA,GAAA,IAAA,CAAA,SAAA,GAAA,eAAA,CAAA;SACA;;;;YAIA,qBAAA,UAAA,GAAsC,IAAtC,CAAA,KAAA,CAAA,oBAAA,GAAA,cAAA,CAAA,CAAA;YACA,qBAAA,gBAAA,GAAA,CAAA,CAAA;;YAEA,IAAA,CAAA,OAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA;gBACU,IAAV,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,GAAA,IAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,KAAA,GAAA,UAAA;;oBAEA,CAAA,KAAA,CAAA,OAAA,CAAA,QAA4B,CAA5B,KAAA,CAAA,CAAA,KAAA,EAA2C;oBAC3C,KAAmB,CAAnB,kBAAA,CAAA,QAA+C,CAAC,KAAhD,EAAA,UAAA,CAAA,CAAA;oBAEA,gBAAA,EAAA,CAAA;iBACA;;;YAGA,qBAAA,iBAA0C,GAA1C,IAAA,CAAA,OAAA,CAA0D,MAAM,CAAC,UAAjE,KAAA,EAAA;gBACQ,OAAO,CAAC,KAAhB,CAAA,KAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA;aACO,CAAP,CAAA,MAAA,CAAA;;gBAEA,IAAA,CAAA,mBAAA,EAA2B,CAA3B;aACA;;KAEA,CAAA;;;;;;;IAMA,oBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAA,KAAA,EAAA,KAAA,EAAA;QAAA,IAAA,CAAW,OAAX,CAAA,KAAA,CAAA,GAAA;YACM,KAAK,EAAX,KAAA;YACM,KAAK,EAAX,KAAA;YACM,KAAK,EAAX,KAAA;YACA,GAAA,EAAA,KAAA;YAEA,GAAA,EAAA,KAAA;;;;QAIA,qBAAA,sBAAA,GAA8C,KAA9C,CAAA;QACA,IAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,EAAA;;YAGQ,IAAR,OAAA,IAAA,CAAA,OAAA,CAAgC,KAAhC,CAAA,CAAA,KAAA,KAAA,QAAA,EAAA;gBACY,qBAAZ,SAAA,IAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAAA,CAAA;;gBAEA,sBAAA,IAAA,SAAA,IAAA,CAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA;;;oBAGA,IAAA,CAAqB,OAArB,CAAA,KAAA,CAAA,CAAA,GAAA,GAAA,IAAA,CAAA;;iBAEA;;;;iBAtiCA;;aAEA;iBACA,IAAA,OAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAA2B,CAAC,KAA5B,KAAA,QAAA,EAAA;gBACA,IAAA,CAAA,OAAA,CAAS,KAAT,CAAe,CAAf,KAAA,qBAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAAA,CAAA;gBACA,sBAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,KAAA,GAAA,IAAA,CAAA;aACA;SACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA8CA,qBAAA,UAAA,GAAA,IAAA,CAAA,WAAA,CAAA;YACA,qBAAA,KAAA,GAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqYA,IAAA,0BAAA,kBAAA,YAAA;;;;;;QA9MA,IAAA,CAAA,WAAA,GAAG,WAAH,CAAA;QAEA,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;QAEA,IAAA,CAAA,UAAA,GAAA,uBAAA,CAAgB,SAAhB,CAAA;;;;;QA+FA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA;;;;;;QA0FA,IAAA,CAAA,QAAA,GAAA,KAAA,CAAA;;;;;;;;;;;;;;;;;;;QD/LA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA,sBAAA,CAAA,CAAA;KAAA;IAAA,MAAA,CAAA,cAAuD,CAAvD,0BAAA,CAAA,SAAA,EAAA,gBAAA,EAAA;;;;;;gBAnEA,OAAA,EAAA,IAAA,CAAA,cAAA,CAAA,aAAA,GAAA,qBAAA,EAAA,CAAA,KAAA,CAAA;;;;;;KAOA,CAAA,CAAA;;;;;;;;;;;;gBAcA,MAAA,IAAA,KAAA,CAAA,wCAAA,CAAA,CAAA;;;;;;QAwBA,YAAA,EAAA,IAAA;KAuBA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,0BAAA,CAAA,SAAA,EAAA,eAAA,EAAA;;;;QAhFM,GAAN,EAAA,YAAA;YACQ,OAAR,IAAA,CAAA,QAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;QACI,YAAJ,EAAA,IAAA;KACG,CAAH,CAAA;;;;;;;;QAmCM,UAAU,EAAhB,IAAA;QACI,YAAJ,EAAA,IAAA;KACA,CAAA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,0BAAA,CAAA,SAAA,EAAA,YAAA,EAAA;;;;;;;;QAgBM,YAAN,EAAA,IAAA;KACA,CAAA,CAAA;;;;;QAIM,GAAN,EAAA,YAAA;YACA,OAAe,IAAf,CAAA,OAAA,CAAA;;;;;;;;;;;YASA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,IAAA,CAAA,UAAA,EAAA,CAAA,CAAA;SACA;;;;;;QAWA,OAAa,IAAb,CAAA,UAAA,KAAA,uBAAA,CAAA,SAAA,CAAA;KACA,CAAA;;;;;;;IAKE,OAAF,0BAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,0BAAA,CAAA,UAAA,GAAA;;;;gBAEc,MAAd,EAAA,CAAA,w6OAAA,CAAA;gBACA,QAAA,EAAA,+jBAAA;aACA,EAAA,EAAA;;;AA5UA,0BAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;;IAEA,EAAA,IAAA,EAAAD,cAAA,GAAU;CACV,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2MA,UAAA,EAAA,2BAAA;CACA,CAAA;;;;;;;;;;;;;;;;;;;AAmBA,uBAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAD,aAAA,EAAA,IAAA,EAAA,CAAA;;;;oBA5OAD,wBAAA;oBAAAD,kBAAA;;;gBAiPA,YAAA,EAAA;oBAaA,aAAA;iBAOA;gBAOA,OAAG,EAAH;oBAOA,aAAA;iBAOA;gBAgBA,SAAA,EAAA;oBAGA,mBAAA;iBAKA;aAKA,EAAA,EAAA;CAKA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
