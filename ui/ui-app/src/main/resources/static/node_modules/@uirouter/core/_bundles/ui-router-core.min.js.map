{
  "version": 3,
  "file": "ui-router-core.min.js",
  "sources": [
    "@uirouter/core/common/hof.ts",
    "@uirouter/core/common/glob.ts",
    "@uirouter/core/state/stateObject.ts",
    "@uirouter/core/common/predicates.ts",
    "@uirouter/core/common/coreservices.ts",
    "@uirouter/core/common/common.ts",
    "@uirouter/core/transition/rejectFactory.ts",
    "@uirouter/core/common/queue.ts",
    "@uirouter/core/common/trace.ts",
    "@uirouter/core/transition/interface.ts",
    "@uirouter/core/state/targetState.ts",
    "@uirouter/core/transition/transitionHook.ts",
    "@uirouter/core/transition/hookRegistry.ts",
    "@uirouter/core/transition/hookBuilder.ts",
    "@uirouter/core/params/paramType.ts",
    "@uirouter/core/params/param.ts",
    "@uirouter/core/path/pathNode.ts",
    "@uirouter/core/path/pathUtils.ts",
    "@uirouter/core/resolve/resolvable.ts",
    "@uirouter/core/resolve/interface.ts",
    "@uirouter/core/resolve/resolveContext.ts",
    "@uirouter/core/transition/transition.ts",
    "@uirouter/core/common/strings.ts",
    "@uirouter/core/params/paramTypes.ts",
    "@uirouter/core/params/stateParams.ts",
    "@uirouter/core/state/stateBuilder.ts",
    "@uirouter/core/state/stateMatcher.ts",
    "@uirouter/core/state/stateQueueManager.ts",
    "@uirouter/core/state/stateRegistry.ts",
    "@uirouter/core/url/urlMatcher.ts",
    "@uirouter/core/url/urlMatcherFactory.ts",
    "@uirouter/core/url/urlRule.ts",
    "@uirouter/core/url/urlRouter.ts",
    "@uirouter/core/view/view.ts",
    "@uirouter/core/globals.ts",
    "@uirouter/core/url/urlService.ts",
    "@uirouter/core/router.ts",
    "@uirouter/core/hooks/coreResolvables.ts",
    "@uirouter/core/hooks/redirectTo.ts",
    "@uirouter/core/hooks/onEnterExitRetain.ts",
    "@uirouter/core/hooks/resolve.ts",
    "@uirouter/core/hooks/views.ts",
    "@uirouter/core/hooks/updateGlobals.ts",
    "@uirouter/core/hooks/url.ts",
    "@uirouter/core/hooks/lazyLoad.ts",
    "@uirouter/core/transition/transitionEventType.ts",
    "@uirouter/core/hooks/ignoredTransition.ts",
    "@uirouter/core/hooks/invalidTransition.ts",
    "@uirouter/core/transition/transitionService.ts",
    "@uirouter/core/state/stateService.ts",
    "@uirouter/core/vanilla/q.ts",
    "@uirouter/core/vanilla/injector.ts",
    "@uirouter/core/vanilla/utils.ts",
    "@uirouter/core/vanilla/baseLocationService.ts",
    "@uirouter/core/vanilla/hashLocationService.ts",
    "@uirouter/core/vanilla/memoryLocationService.ts",
    "@uirouter/core/vanilla/pushStateLocationService.ts",
    "@uirouter/core/vanilla/memoryLocationConfig.ts",
    "@uirouter/core/vanilla/browserLocationConfig.ts",
    "@uirouter/core/vanilla/plugins.ts",
    "@uirouter/core/interface.ts"
  ],
  "sourcesContent": [
    "/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @module common_hof\n */ /** */\n\nimport { Predicate } from './common';\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  const initial_args = [].slice.apply(arguments, [1]);\n  const func_args_length = fn.length;\n\n  function curried(args: any[]) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n\n\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  const args = arguments;\n  const start = args.length - 1;\n  return function() {\n    let i = start, result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) =>\n    (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, _val: any, obj: any) => obj && obj[name] === _val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) =>\n    pipe.apply(null, name.split('.').map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not: (fn: Predicate<any>) => Predicate<any> = (fn: Predicate<any>) =>\n    (...args: any[]) => !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true) as boolean;\n\n// tslint:disable-next-line:variable-name\nexport const any = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false) as boolean;\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is = <T> (ctor: { new(...args): T }) =>\n    (obj: any): obj is T =>\n        (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp: any) => Predicate<any> = (value: any) => (other: any) =>\n    value === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?: any[]): Function {\n  return (obj: any) =>\n      obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x: any) {\n    for (let i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n",
    "/**\n * @coreapi\n * @module core\n */\n/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n\n  /** Returns true if the string has glob-like characters in it */\n  static is(text: string) {\n    return !!/[!,*]+/.exec(text);\n  }\n\n  /** Returns a glob from the string, or null if the string isn't Glob-like */\n  static fromString(text: string) {\n    return Glob.is(text) ? new Glob(text) : null;\n  }\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    const regexpString = this.text.split('.')\n        .map(seg => {\n          if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n          if (seg === '*')  return '\\\\.[^.]*';\n          return                   '\\\\.' + seg;\n        }).join('');\n\n    this.regexp = new RegExp('^' + regexpString + '$');\n  }\n\n  matches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n}\n",
    "/**\n * @coreapi\n * @module state\n */\n/** for typedoc */\nimport { StateDeclaration, _ViewDeclaration, _StateDeclaration, LazyLoadResult } from './interface';\nimport { defaults, values, find, inherit } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { Param } from '../params/param';\nimport { UrlMatcher } from '../url/urlMatcher';\nimport { Resolvable } from '../resolve/resolvable';\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { TargetState } from './targetState';\nimport { Transition } from '../transition/transition';\nimport { Glob } from '../common/glob';\nimport { isObject, isFunction } from '../common/predicates';\n\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nexport class StateObject {\n  /** The parent [[StateObject]] */\n  public parent: StateObject;\n\n  /** The name used to register the state */\n  public name: string;\n\n  /** Prototypally inherits from [[StateDeclaration.abstract]] */\n  public abstract: boolean;\n\n  /** Prototypally inherits from [[StateDeclaration.resolve]] */\n  public resolve: ({ [key: string]: (string|any[]|Function) }|any[]);\n\n  /** A list of [[Resolvable]] objects.  The internal representation of [[resolve]]. */\n  public resolvables: Resolvable[];\n\n  /** Prototypally inherits from [[StateDeclaration.resolvePolicy]] */\n  public resolvePolicy: any;\n\n  /** A compiled URLMatcher which detects when the state's URL is matched */\n  public url: UrlMatcher;\n\n  /** The parameters for the state, built from the URL and [[StateDeclaration.params]] */\n  public params: { [key: string]: Param };\n\n  /**\n   * The views for the state.\n   * Note: `@uirouter/core` does not register a builder for views.\n   * The framework specific code should register a `views` builder.\n   */\n  public views: { [key: string]: _ViewDeclaration; };\n\n  /**\n   * The original [[StateDeclaration]] used to build this [[StateObject]].\n   * Note: `this` object also prototypally inherits from the `self` declaration object.\n   */\n  public self: StateDeclaration;\n\n  /** The nearest parent [[StateObject]] which has a URL */\n  public navigable: StateObject;\n\n  /** The parent [[StateObject]] objects from this state up to the root */\n  public path: StateObject[];\n\n  /**\n   * Prototypally inherits from [[StateDeclaration.data]]\n   * Note: This is the only field on the [[StateDeclaration]] which is mutated.\n   * The definition object's `data` field is replaced with a new object\n   * which prototypally inherits from the parent state definition's `data` field.\n   */\n  public data: any;\n\n  /**\n   * An object containing the parent States' names as keys and\n   * true as their values.\n   */\n  public includes: { [name: string]: boolean };\n\n  /** Prototypally inherits from [[StateDeclaration.onExit]] */\n  public onExit: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onRetain]] */\n  public onRetain: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onEnter]] */\n  public onEnter: TransitionStateHookFn;\n\n  /** Prototypally inherits from [[StateDeclaration.lazyLoad]] */\n  public lazyLoad: (transition: Transition, state: StateDeclaration) => Promise<LazyLoadResult>;\n\n  /** Prototypally inherits from [[StateDeclaration.redirectTo]] */\n  redirectTo: (\n      string |\n      (($transition$: Transition) => TargetState) |\n      { state: (string|StateDeclaration), params: { [key: string]: any }}\n  );\n\n  /** @hidden */\n  __stateObjectCache: {\n    /** Might be null */\n    nameGlob?: Glob,\n  };\n\n  /**\n   * Create a state object to put the private/internal implementation details onto.\n   * The object's prototype chain looks like:\n   * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n   *\n   * @param stateDecl the user-supplied State Declaration\n   * @returns {StateObject} an internal State object\n   */\n  static create(stateDecl: _StateDeclaration): StateObject {\n    stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n\n    const state = inherit(inherit(stateDecl, StateObject.prototype)) as StateObject;\n    stateDecl.$$state = () => state;\n    state.self = stateDecl;\n    state.__stateObjectCache = {\n      nameGlob: Glob.fromString(state.name), // might return null\n    };\n    return state;\n  }\n\n  /** Predicate which returns true if the object is an class with @State() decorator */\n  static isStateClass = (stateDecl: _StateDeclaration): stateDecl is ({ new (): StateDeclaration }) =>\n    isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n\n  /** Predicate which returns true if the object is an internal [[StateObject]] object */\n  static isState = (obj: any): obj is StateObject =>\n    isObject(obj['__stateObjectCache']);\n\n\n  /** @deprecated use State.create() */\n  constructor(config?: StateDeclaration) {\n    return StateObject.create(config || {});\n  }\n\n  /**\n   * Returns true if the provided parameter is the same state.\n   *\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: StateObject|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @deprecated this does not properly handle dot notation\n   * @returns Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    const name = this.parent.fqn();\n    return name ? name + '.' + this.name : this.name;\n  }\n\n  /**\n   * Returns the root node of this state's tree.\n   *\n   * @returns The root of this state's tree.\n   */\n  root(): StateObject {\n    return this.parent && this.parent.root() || this;\n  }\n\n  /**\n   * Gets the state's `Param` objects\n   *\n   * Gets the list of [[Param]] objects owned by the state.\n   * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n   * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n   *\n   * @param opts options\n   */\n  parameters(opts?: { inherit?: boolean, matchingKeys?: any }): Param[] {\n    opts = defaults(opts, { inherit: true, matchingKeys: null });\n    const inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params))\n        .filter(param => !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id));\n  }\n\n  /**\n   * Returns a single [[Param]] that is owned by the state\n   *\n   * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n   * @param id the name of the [[Param]] to return\n   * @param opts options\n   */\n  parameter(id: string, opts: { inherit?: boolean } = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n",
    "/** Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_predicates\n */\n/** */\nimport { and, not, pipe, prop, or } from './hof';\nimport { Predicate } from './common'; // has or is using\nimport { StateObject } from '../state/stateObject';\n\nconst toStr = Object.prototype.toString;\nconst tis = (t: string) => (x: any) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = (o: any) => o === null;\nexport const isNullOrUndefined = or(isNull, isUndefined);\nexport const isFunction: (x: any) => x is Function = <any> tis('function');\nexport const isNumber: (x: any) => x is number = <any> tis('number');\nexport const isString = <(x: any) => x is string> tis('string');\nexport const isObject = (x: any) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x: any) => x is Date = <any> ((x: any) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x: any) => x is RegExp = <any> ((x: any) => toStr.call(x) === '[object RegExp]');\nexport const isState: (x: any) => x is StateObject = StateObject.isState;\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val: any) {\n  if (isArray(val) && val.length) {\n    const head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = <(x: any) => x is Promise<any>> and(isObject, pipe(prop('then'), isFunction));\n\n",
    "/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n/** for typedoc */\nimport { IInjectable, Obj } from './common';\nimport { Disposable } from '../interface';\nimport { UrlParts } from '../url/interface';\n\nexport let notImplemented = (fnname: string) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded.`);\n};\n\nconst services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n};\n\nexport interface $QLikeDeferred {\n  resolve: (val?: any) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<any>;\n}\n\nexport interface $QLike {\n  when<T>(value?: T | PromiseLike<T>): Promise<T>;\n  reject<T>(reason: any): Promise<T>;\n  defer(): $QLikeDeferred;\n  all(promises: { [key: string]: Promise<any> }): Promise<any>;\n  all(promises: Promise<any>[]): Promise<any[]>;\n}\n\nexport interface $InjectorLike {\n  strictDi?: boolean;\n  get(token: any): any;\n  get<T>(token: any): T;\n  has(token: any): boolean;\n  invoke(fn: IInjectable, context?: any, locals?: Obj): any;\n  annotate(fn: IInjectable, strictDi?: boolean): any[];\n}\n\nexport interface CoreServices {\n  $q: $QLike;\n  $injector: $InjectorLike;\n}\n\nexport interface LocationServices extends Disposable {\n  /**\n   * Gets the current url string\n   *\n   * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n   *\n   * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n   * have a base HREF prepended ([[PushStateLocationServices]]).\n   *\n   * The raw URL in the browser might be:\n   *\n   * ```\n   * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * or\n   *\n   * ```\n   * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * then this method returns:\n   *\n   * ```\n   * /internal/path/123?param1=foo#anchor\n   * ```\n   *\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(); // \"/some/path?query=value#anchor\"\n   * ```\n   *\n   * @returns the current value of the url, as a string.\n   */\n  url(): string;\n\n  /**\n   * Updates the url, or gets the current url\n   *\n   * Updates the url, changing it to the value in `newurl`\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(\"/some/path?query=value#anchor\", true);\n   * ```\n   *\n   * @param newurl The new value for the URL.\n   *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n   *               It should not include the protocol, site, port, or base path of an absolute HREF.\n   * @param replace When true, replaces the current history entry (instead of appending it) with this new url\n   * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n   * @return the url (after potentially being processed)\n   */\n  url(newurl: string, replace?: boolean, state?: any): string;\n\n  /**\n   * Gets the path part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n   *\n   * @return the path portion of the url\n   */\n  path(): string;\n\n  /**\n   * Gets the search part of the current url as an object\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n   *\n   * @return the search (querystring) portion of the url, as an object\n   */\n  search(): { [key: string]: any };\n\n  /**\n   * Gets the hash part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n   *\n   * @return the hash (anchor) portion of the url\n   */\n  hash(): string;\n\n  /**\n   * Registers a url change handler\n   *\n   * #### Example:\n   * ```js\n   * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n   * ```\n   *\n   * @param callback a function that will be called when the url is changing\n   * @return a function that de-registers the callback\n   */\n  onChange(callback: Function): Function;\n}\n\n/**\n * This service returns the location configuration\n *\n * This service returns information about the location configuration.\n * This service is primarily used when building URLs (e.g., for `hrefs`)\n */\nexport interface LocationConfig extends Disposable {\n  /**\n   * Gets the port, e.g., `80`\n   *\n   * @return the port number\n   */\n  port(): number;\n  /**\n   * Gets the protocol, e.g., `http`\n   *\n   * @return the protocol\n   */\n  protocol(): string;\n  /**\n   * Gets the host, e.g., `localhost`\n   *\n   * @return the protocol\n   */\n  host(): string;\n  /**\n   * Gets the base Href, e.g., `http://localhost/approot/`\n   *\n   * @return the application's base href\n   */\n  baseHref(): string;\n  /**\n   * Returns true when running in pushstate mode\n   *\n   * @return true when running in pushstate mode\n   */\n  html5Mode(): boolean;\n  /**\n   * Gets the hashPrefix (when not running in pushstate mode)\n   *\n   * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the \"hashbang\" portion.\n   *\n   * @return the hash prefix\n   */\n  hashPrefix(): string;\n  /**\n   * Sets the hashPrefix (when not running in pushstate mode)\n   *\n   * @return the new hash prefix\n   */\n  hashPrefix(newprefix: string): string;\n}\n\nexport { services };\n",
    "/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @preferred\n * @module common\n */\n/** for typedoc */\nimport { isFunction, isString, isArray, isRegExp, isDate } from './predicates';\nimport { all, any, prop, curry, not } from './hof';\nimport { services } from './coreservices';\nimport { StateObject } from '../state/stateObject';\n\ndeclare const global;\nexport const root: any = (typeof self === 'object' && self.self === self && self) ||\n  (typeof global === 'object' && global.global === global && global) || this;\nconst angular = root.angular || {};\n\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const forEach = angular.forEach || _forEach;\nexport const extend = Object.assign || _extend;\nexport const equals = angular.equals || _equals;\nexport function identity(x: any) { return x; }\nexport function noop(): any {}\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (x?: X) => boolean;\n/**\n * An ng1-style injectable\n *\n * This could be a (non-minified) function such as:\n * ```js\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an explicitly annotated function (minify safe)\n * ```js\n * injectableFunction.$inject = [ 'SomeDependency' ];\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an array style annotated function (minify safe)\n * ```js\n * ['SomeDependency', function injectableFunction(SomeDependency) {\n *\n * }];\n * ```\n *\n * @publicapi\n */\nexport type IInjectable = (Function|any[]);\n\nexport interface Obj extends Object {\n  [key: string]: any;\n}\n\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n */\nexport function createProxyFunctions(source: Function, target: Obj, bind: Function, fnNames?: string[], latebind = false): Obj {\n  const bindFunction = (fnName) =>\n      source()[fnName].bind(bind());\n\n  const makeLateRebindFn = fnName => function lateRebindFunction() {\n    target[fnName] = bindFunction(fnName);\n    return target[fnName].apply(null, arguments);\n  };\n\n  fnNames = fnNames || Object.keys(source());\n\n  return fnNames.reduce((acc, name) => {\n    acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n    return acc;\n  }, target);\n}\n\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent: Obj, extra?: Obj) =>\n    extend(Object.create(parent), extra);\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray: typeof _inArray = curry(_inArray) as any;\nexport function _inArray(array: any[], obj: any): boolean;\nexport function _inArray(array: any[]): (obj: any) => boolean;\nexport function _inArray(array, obj?): any {\n  return array.indexOf(obj) !== -1;\n}\n\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexport const removeFrom: typeof _removeFrom = curry(_removeFrom) as any;\nexport function _removeFrom<T>(array: T[], obj: T): T[];\nexport function _removeFrom<T>(array: T[]): (obj: T) => T[];\nexport function _removeFrom(array, obj?) {\n  const idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n}\n\n/** pushes a values to an array and returns the value */\nexport const pushTo: typeof _pushTo = curry(_pushTo) as any;\nexport function _pushTo<T>(arr: T[], val: T): T ;\nexport function _pushTo<T>(arr: T[]): (val: T) => T ;\nexport function _pushTo(arr, val?): any {\n  return (arr.push(val), val);\n}\n\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\nexport const deregAll = (functions: Function[]) =>\n    functions.slice().forEach(fn => {\n      typeof fn === 'function' && fn();\n      removeFrom(functions, fn);\n    });\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts, ...defaultsList: Obj[]) {\n  const _defaultsList = defaultsList.concat({}).reverse();\n  const defaultVals = extend.apply(null, _defaultsList);\n  return extend({}, defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo: Obj, item: Obj) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first: StateObject, second: StateObject) {\n  const path: StateObject[] = [];\n\n  for (const n in first.path) { // tslint:disable-line:forin\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, propNames: string[]): Obj {\n  const objCopy = {};\n  for (const _prop in obj) {\n    if (propNames.indexOf(_prop) !== -1) {\n      objCopy[_prop] = obj[_prop];\n    }\n  }\n  return objCopy;\n}\n\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, propNames: string[]): Obj {\n  return Object.keys(obj)\n      .filter(not(inArray(propNames)))\n      .reduce((acc, key) => (acc[key] = obj[key], acc), {});\n}\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck<T>(collection: Obj[], propName: string): T[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection: any, propName: string): any {\n  return map(collection, <Mapper<any, string>> prop(propName));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (t: T, key?: number) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (t: T, key?: string) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: any, callback: Function): T {\n  const arr = isArray(collection), result: any = arr ? [] : {};\n  const accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection: any, callback: any) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>, target?: typeof collection) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>, target?: typeof collection): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>, target?: typeof collection): { [key: string]: U };\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any, target: typeof collection): any {\n  target = target || (isArray(collection) ? [] : {});\n  forEach(collection, (item, i) => target[i] = callback(item, i));\n  return target;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj: Obj) =>\n    Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem: any) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem: any) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem: any[]) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem: any) =>\n    isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nexport function pushR(arr: any[], obj: any) {\n  arr.push(obj);\n  return arr;\n}\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = <T> (acc: T[], token: T): T[] =>\n    inArray(acc, token) ? acc : pushR(acc, token);\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport const assertPredicate: <T> (predicate: Predicate<T>, errMsg: (string|Function)) => Predicate<T> = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n *\n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\nexport const assertMap: <T, U> (mapFn: (t: T) => U, errMsg: (string|Function)) => (t: T) => U = assertFn;\nexport function assertFn(predicateOrMap: Function, errMsg: (string|Function) = 'assert failure'): any {\n  return (obj) => {\n    const result = predicateOrMap(obj);\n    if (!result) {\n      throw new Error(isFunction(errMsg) ? (<Function> errMsg)(obj) : errMsg);\n    }\n    return result;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (obj: Obj) =>\n    Object.keys(obj).map(key => [ key, obj[key]] );\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...args: any[]): any[] {\n  if (args.length === 0) return [];\n  const maxArrayLen = args.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  const result = [];\n\n  for (let i = 0; i < maxArrayLen; i++) {\n    // This is a hot function\n    // Unroll when there are 1-4 arguments\n    switch (args.length) {\n      case 1: result.push([args[0][i]]); break;\n      case 2: result.push([args[0][i], args[1][i]]); break;\n      case 3: result.push([args[0][i], args[1][i], args[2][i]]); break;\n      case 4: result.push([args[0][i], args[1][i], args[2][i], args[3][i]]); break;\n      default:\n        result.push(args.map(array => array[i])); break;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key: string, value: any;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error('invalid parameters to applyPairs');\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n\n/**\n * shallow copy from src to dest\n */\nexport function copy(src: Obj, dest?: Obj) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj: (any[]|any), cb: (el, idx?) => void, _this: Obj) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\n/** Like Object.assign() */\nexport function _extend(toObj: Obj, ...fromObjs: Obj[]): any;\nexport function _extend(toObj: Obj): any {\n  for (let i = 1; i < arguments.length; i++) {\n    const obj = arguments[i];\n    if (!obj) continue;\n    const keys = Object.keys(obj);\n\n    for (let j = 0; j < keys.length; j++) {\n      toObj[keys[j]] = obj[keys[j]];\n    }\n  }\n\n  return toObj;\n}\n\nfunction _equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  const t1 = typeof o1, t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  const predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  const keys: { [i: string]: boolean } = {};\n  for (const key in o1) { // tslint:disable-line:forin\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (const key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1: any[], a2: any[]) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) =>\n    promise.catch(e => 0) && promise;\nexport const silentRejection = (error: any) =>\n    silenceUncaughtInPromise(services.$q.reject(error));\n",
    "/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n'use strict';\nimport { extend, silentRejection } from '../common/common';\nimport { stringify } from '../common/strings';\nimport { is } from '../common/hof';\n\nexport enum RejectType {\n  SUPERSEDED = 2, ABORTED = 3, INVALID = 4, IGNORED = 5, ERROR = 6,\n}\n\n/** @hidden */\nlet id = 0;\n\nexport class Rejection {\n  $id = id++;\n  type: number;\n  message: string;\n  detail: any;\n  redirected: boolean;\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isRejectionPromise(obj: any): boolean {\n    return obj && (typeof obj.then === 'function') && is(Rejection)(obj._transitionRejection);\n  }\n\n  /** Returns a Rejection due to transition superseded */\n  static superseded(detail?: any, options?: any): Rejection {\n    const message = 'The transition has been superseded by a different transition';\n    const rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a Rejection due to redirected transition */\n  static redirected(detail?: any): Rejection {\n    return Rejection.superseded(detail, { redirected: true });\n  }\n\n  /** Returns a Rejection due to invalid transition */\n  static invalid(detail?: any): Rejection {\n    const message = 'This transition is invalid';\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a Rejection due to ignored transition */\n  static ignored(detail?: any): Rejection {\n    const message = 'The transition was ignored';\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static aborted(detail?: any): Rejection {\n    const message = 'The transition has been aborted';\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static errored(detail?: any): Rejection {\n    const message = 'The transition errored';\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n\n  /**\n   * Returns a Rejection\n   *\n   * Normalizes a value as a Rejection.\n   * If the value is already a Rejection, returns it.\n   * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n   *\n   * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n   */\n  static normalize(detail?: Rejection | Error | any): Rejection {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  }\n\n  constructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = (d: any) =>\n        d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    const detail = detailString(this.detail);\n    const { $id, type, message } = this;\n    return `Transition Rejection($id: ${$id} type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise(): Promise<any> {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n}\n",
    "/** @module common */\nimport { pushTo } from './common';\n\nexport class Queue<T> {\n  private _evictListeners: ((item: T) => void)[] = [];\n  public onEvict = pushTo(this._evictListeners);\n\n  constructor(private _items: T[] = [], private _limit: number = null) { }\n\n  enqueue(item: T) {\n    const items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) this.evict();\n    return item;\n  }\n\n  evict(): T {\n    const item: T = this._items.shift();\n    this._evictListeners.forEach(fn => fn(item));\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    const current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    const idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n",
    "/**\n * # Transition tracing (debug)\n *\n * Enable transition tracing to print transition information to the console,\n * in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n *\n * ### ES6\n * ```js\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * ### CJS\n * ```js\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * ### Globals\n * ```js\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * ### Angular 1:\n * ```js\n * app.run($trace => $trace.enable());\n * ```\n *\n * @coreapi\n * @module trace\n */\n/* tslint:disable:no-console */\nimport { parse } from '../common/hof';\nimport { isFunction, isNumber } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { ViewTuple } from '../view';\nimport { ActiveUIView, ViewConfig, ViewContext } from '../view/interface';\nimport { stringify, functionToString, maxLength, padString } from './strings';\nimport { Resolvable } from '../resolve/resolvable';\nimport { PathNode } from '../path/pathNode';\nimport { PolicyWhen } from '../resolve/interface';\nimport { TransitionHook } from '../transition/transitionHook';\nimport { HookResult } from '../transition/interface';\nimport { StateObject } from '../state/stateObject';\n\n/** @hidden */\nfunction uiViewString (uiview: ActiveUIView) {\n    if (!uiview) return 'ui-view (defunct)';\n    const state = uiview.creationContext ? uiview.creationContext.name || '(root)' : '(none)';\n    return `[ui-view#${uiview.id} ${uiview.$type}:${uiview.fqn} (${uiview.name}@${state})]`;\n}\n\n/** @hidden */\nconst viewConfigString = (viewConfig: ViewConfig) => {\n  const view = viewConfig.viewDecl;\n  const state = view.$context.name || '(root)';\n  return `[View#${viewConfig.$id} from '${state}' state]: target ui-view: '${view.$uiViewName}@${view.$uiViewContextAnchor}'`;\n};\n\n/** @hidden */\nfunction normalizedCat(input: Category|string): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n/** @hidden */\nconst consoleLog = Function.prototype.bind.call(console.log, console);\n\n/** @hidden */\nconst consoletable = isFunction(console.table) ? console.table.bind(console) : consoleLog.bind(console);\n\n\n/**\n * Trace categories Enum\n *\n * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nexport enum Category {\n  RESOLVE, TRANSITION, HOOK, UIVIEW, VIEWCONFIG,\n}\n\n/** @hidden */\nconst _tid = parse('$id');\n\n/** @hidden */\nconst _rid = parse('router.$id');\n\n/** @hidden */\nconst transLbl = (trans) => `Transition #${_tid(trans)}-${_rid(trans)}`;\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  /** @hidden */\n  approximateDigests: number;\n\n  /** @hidden */\n  private _enabled: { [key: string]: boolean } = {};\n\n  /** @hidden */\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n   /** @hidden */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = <any> Object.keys(Category)\n          .map(k => parseInt(k, 10))\n          .filter(k => !isNaN(k))\n          .map(key => Category[key]);\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```js\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: (Category|string|number)[]);\n  enable(...categories: any[]) { this._set(true, categories); }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```js\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: (Category|string|number)[]);\n  disable(...categories: any[]) { this._set(false, categories); }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```js\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: (Category|string|number)): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** @internalapi called by ui-router code */\n  traceTransitionStart(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: Started  -> ${stringify(trans)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: Ignored  <> ${stringify(trans)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceHookInvocation(step: TransitionHook, trans: Transition, options: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    const event = parse('traceData.hookType')(options) || 'internal',\n        context = parse('traceData.context.state.name')(options) || parse('traceData.context')(options) || 'unknown',\n        name = functionToString((step as any).registeredHook.callback);\n    console.log(`${transLbl(trans)}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceHookResult(hookResult: HookResult, trans: Transition, transitionOptions: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    console.log(`${transLbl(trans)}:   <- Hook returned: ${maxLength(200, stringify(hookResult))}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    console.log(`${transLbl(trans)}:         Resolving ${path} (${when})`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    console.log(`${transLbl(trans)}:               <- Resolved  ${resolvable} to: ${maxLength(200, stringify(resolvable.data))}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceError(reason: any, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: <- Rejected ${stringify(trans)}, reason: ${reason}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceSuccess(finalState: StateObject, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: <- Success  ${stringify(trans)}, final state: ${finalState.name}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceUIViewEvent(event: string, viewData: ActiveUIView, extra = '') {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceUIViewConfigUpdated(viewData: ActiveUIView, context: ViewContext) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent('Updating', viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceUIViewFill(viewData: ActiveUIView, html: string) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent('Fill', viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceViewSync(pairs: ViewTuple[]) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    const uivheader = 'uiview component fqn';\n    const cfgheader = 'view config state (view name)';\n    const mapping = pairs.map(({ uiView, viewConfig }) => {\n      const uiv = uiView && uiView.fqn;\n      const cfg = viewConfig && `${viewConfig.viewDecl.$context.name}: (${viewConfig.viewDecl.$name})`;\n      return { [uivheader]: uiv, [cfgheader]: cfg };\n    }).sort((a, b) => (a[uivheader] || '').localeCompare(b[uivheader] || ''));\n\n    consoletable(mapping);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * #### Example:\n * ```js\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nconst trace = new Trace();\nexport { trace };\n",
    "/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\nimport { StateDeclaration } from '../state/interface';\nimport { Predicate } from '../common/common';\n\nimport { Transition } from './transition';\nimport { StateObject } from '../state/stateObject';\nimport { PathNode } from '../path/pathNode';\nimport { TargetState } from '../state/targetState';\nimport { RegisteredHook } from './hookRegistry';\n\n/**\n * The TransitionOptions object can be used to change the behavior of a transition.\n *\n * It is passed as the third argument to [[StateService.go]], [[StateService.transitionTo]].\n * It can also be used with a `uiSref`.\n */\nexport interface TransitionOptions {\n  /**\n   * This option changes how the Transition interacts with the browser's location bar (URL).\n   *\n   * - If `true`, it will update the url in the location bar.\n   * - If `false`, it will not update the url in the location bar.\n   * - If it is the string `\"replace\"`, it will update the url and also replace the last history record.\n   *\n   * @default `true`\n   */\n  location    ?: (boolean|string);\n\n  /**\n   * When transitioning to relative path (e.g '`^`'), this option defines which state to be relative from.\n   * @default `$state.current`\n   */\n  relative    ?: (string|StateDeclaration|StateObject);\n\n  /**\n   * This option sets whether or not the transition's parameter values should be inherited from\n   * the current parameter values.\n   *\n   * - If `true`, it will inherit parameter values from the current parameter values.\n   * - If `false`, only the parameters which are provided to `transitionTo` will be used.\n   *\n   * @default `false`\n   */\n  inherit     ?: boolean;\n\n  /**\n   * @deprecated\n   */\n  notify      ?: boolean;\n\n  /**\n   * This option may be used to force states which are currently active to reload.\n   *\n   * During a normal transition, a state is \"retained\" if:\n   * - It was previously active\n   * - The state's parameter values have not changed\n   * - All the parent states' parameter values have not changed\n   *\n   * Forcing a reload of a state will cause it to be exited and entered, which will:\n   * - Refetch that state's resolve data\n   * - Exit the state (onExit hook)\n   * - Re-enter the state (onEnter hook)\n   * - Re-render the views (controllers and templates)\n   *\n   * - When `true`, the destination state (and all parent states) will be reloaded.\n   * - When it is a string and is the name of a state, or when it is a State object,\n   *   that state and any children states will be reloaded.\n   *\n   * @default `false`\n   */\n  reload      ?: (boolean|string|StateDeclaration|StateObject);\n  /**\n   * You can define your own Transition Options inside this property and use them, e.g., from a Transition Hook\n   */\n  custom      ?: any;\n  /** @internalapi */\n  reloadState ?: (StateObject);\n  /** @internalapi\n   * If this transition is a redirect, this property should be the original Transition (which was redirected to this one)\n   */\n  redirectedFrom?: Transition;\n  /** @internalapi */\n  current     ?: () => Transition;\n  /** @internalapi */\n  source      ?: 'sref' | 'url' | 'redirect' | 'otherwise' | 'unknown';\n}\n\n/** @internalapi */\nexport interface TransitionHookOptions {\n  current             ?: () => Transition;  // path?\n  transition          ?: Transition;\n  hookType            ?: string;\n  target              ?: any;\n  traceData           ?: any;\n  bind                ?: any;\n  stateHook           ?: boolean;\n}\n\n/**\n * TreeChanges encapsulates the various Paths that are involved in a Transition.\n *\n * Get a TreeChanges object using [[Transition.treeChanges]]\n *\n * A UI-Router Transition is from one Path in a State Tree to another Path.  For a given Transition,\n * this object stores the \"to\" and \"from\" paths, as well as subsets of those: the \"retained\",\n * \"exiting\" and \"entering\" paths.\n *\n * Each path in TreeChanges is an array of [[PathNode]] objects. Each PathNode in the array corresponds to a portion\n * of a nested state.\n *\n * For example, if you had a nested state named `foo.bar.baz`, it would have three\n * portions, `foo, bar, baz`.  If you transitioned **to** `foo.bar.baz` and inspected the [[TreeChanges.to]]\n * Path, you would find a node in the array for each portion: `foo`, `bar`, and `baz`.\n *\n * ---\n *\n * @todo show visual state tree\n */\nexport interface TreeChanges {\n  /** @nodoc */\n  [key: string]: PathNode[];\n\n  /** The path of nodes in the state tree that the transition is coming *from* */\n  from: PathNode[];\n\n  /** The path of nodes in the state tree that the transition is going *to* */\n  to: PathNode[];\n\n  /**\n   * The path of active nodes that the transition is retaining.\n   *\n   * These nodes are neither exited, nor entered.\n   * Before and after the transition is successful, these nodes are active.\n   */\n  retained: PathNode[];\n\n  /**\n   * The path of active nodes that the transition is retaining with updated \"to params\" applied.\n   *\n   * These nodes are neither exited, nor entered.\n   * Before and after the transition is successful, these nodes are active.\n   *\n   * This is a shallow copy of [[retained]], but with new (dynamic) parameter values from [[to]] applied.\n   */\n  retainedWithToParams: PathNode[];\n\n  /**\n   * The path of previously active nodes that the transition is exiting.\n   *\n   * After the Transition is successful, these nodes are no longer active.\n   *\n   * Note that a state that is being reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  exiting: PathNode[];\n\n  /**\n   * The path of nodes that the transition is entering.\n   *\n   * After the Transition is successful, these nodes will be active.\n   * Because they are entering, they have their resolves fetched, `onEnter` hooks run, and their views\n   * (component(s) or controller(s)+template(s)) refreshed.\n   *\n   * Note that a state that is reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  entering: PathNode[];\n}\n\nexport type IHookRegistration = (matchCriteria: HookMatchCriteria, callback: HookFn, options?: HookRegOptions) => Function;\n\n/**\n * The signature for Transition Hooks.\n *\n * Transition hooks are callback functions that hook into the lifecycle of transitions.\n * As a transition runs, it reaches certain lifecycle events.\n * As each event occurs, the hooks which are registered for the event are called (in priority order).\n *\n * A transition hook may alter a Transition by returning a [[HookResult]].\n *\n * #### See:\n *\n * - [[IHookRegistry.onBefore]]\n * - [[IHookRegistry.onStart]]\n * - [[IHookRegistry.onFinish]]\n * - [[IHookRegistry.onSuccess]]\n * - [[IHookRegistry.onError]]\n *\n * @param transition the current [[Transition]]\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n *\n */\nexport interface TransitionHookFn {\n  (transition: Transition): HookResult;\n}\n\n/**\n * The signature for Transition State Hooks.\n *\n * A function which hooks into a lifecycle event for a specific state.\n *\n * Transition State Hooks are callback functions that hook into the lifecycle events of specific states during a transition.\n * As a transition runs, it may exit some states, retain (keep) states, and enter states.\n * As each lifecycle event occurs, the hooks which are registered for the event and that state are called (in priority order).\n *\n * #### See:\n *\n * - [[IHookRegistry.onExit]]\n * - [[IHookRegistry.onRetain]]\n * - [[IHookRegistry.onEnter]]\n *\n * @param transition the current [[Transition]]\n * @param state the [[StateObject]] that the hook is bound to\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n */\nexport interface TransitionStateHookFn {\n  (transition: Transition, state: StateDeclaration): HookResult;\n}\n\n/**\n * The signature for Transition onCreate Hooks.\n *\n * Transition onCreate Hooks are callbacks that allow customization or preprocessing of\n * a Transition before it is returned from [[TransitionService.create]]\n *\n * @param transition the [[Transition]] that was just created\n * @return a [[Transition]] which will then be returned from [[TransitionService.create]]\n */\nexport interface TransitionCreateHookFn {\n  (transition: Transition): void;\n}\n\nexport type HookFn = (TransitionHookFn|TransitionStateHookFn|TransitionCreateHookFn);\n\n/**\n * The return value of a [[TransitionHookFn]] or [[TransitionStateHookFn]]\n *\n * When returned from a [[TransitionHookFn]] or [[TransitionStateHookFn]], these values alter the running [[Transition]]:\n *\n * - `false`: the transition will be cancelled.\n * - [[TargetState]]: the transition will be redirected to the new target state (see: [[StateService.target]])\n * - `Promise`: the transition will wait for the promise to resolve or reject\n *    - If the promise is rejected (or resolves to `false`), the transition will be cancelled\n *    - If the promise resolves to a [[TargetState]], the transition will be redirected\n *    - If the promise resolves to anything else, the transition will resume\n * - Anything else: the transition will resume\n */\nexport type HookResult = (boolean | TargetState | void | Promise<boolean|TargetState|void>);\n\n/**\n * These options may be provided when registering a Transition Hook (such as `onStart`)\n */\nexport interface HookRegOptions {\n  /**\n   * Sets the priority of the registered hook\n   *\n   * Hooks of the same type (onBefore, onStart, etc) are invoked in priority order.  A hook with a higher priority\n   * is invoked before a hook with a lower priority.\n   *\n   * The default hook priority is 0\n   */\n  priority?: number;\n\n  /**\n   * Specifies what `this` is bound to during hook invocation.\n   */\n  bind?: any;\n\n  /**\n   * Limits the number of times that the hook will be invoked.\n   * Once the hook has been invoked this many times, it is automatically deregistered.\n   */\n  invokeLimit?: number;\n}\n\n/**\n * This interface specifies the api for registering Transition Hooks.  Both the\n * [[TransitionService]] and also the [[Transition]] object itself implement this interface.\n * Note: the Transition object only allows hooks to be registered before the Transition is started.\n */\nexport interface IHookRegistry {\n  /** @hidden place to store the hooks */\n  _registeredHooks: { [key: string]: RegisteredHook[] };\n\n  /**\n   * Registers a [[TransitionHookFn]], called *before a transition starts*.\n   *\n   * Registers a transition lifecycle hook, which is invoked before a transition even begins.\n   * This hook can be useful to implement logic which prevents a transition from even starting, such\n   * as authentication, redirection\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onBefore` hooks are invoked *before a Transition starts*.\n   * No resolves have been fetched yet.\n   * Each `onBefore` hook is invoked synchronously, in the same call stack as [[StateService.transitionTo]].\n   * The registered `onBefore` hooks are invoked in priority order.\n   *\n   * Note: during the `onBefore` phase, additional hooks can be added to the specific [[Transition]] instance.\n   * These \"on-the-fly\" hooks only affect the currently running transition..\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * If any hook modifies the transition *synchronously* (by throwing, returning `false`, or returning\n   * a [[TargetState]]), the remainder of the hooks are skipped.\n   * If a hook returns a promise, the remainder of the `onBefore` hooks are still invoked synchronously.\n   * All promises are resolved, and processed asynchronously before the `onStart` phase of the Transition.\n   *\n   * ### Examples\n   *\n   * #### Default Substate\n   *\n   * This example redirects any transition from 'home' to 'home.dashboard'.  This is commonly referred to as a\n   * \"default substate\".\n   *\n   * @example\n   * ```js\n   * // ng2\n   * transitionService.onBefore({ to: 'home' }, (trans: Transition) =>\n   *     trans.router.stateService.target(\"home.dashboard\"));\n   * ```\n   *\n   * #### Data Driven Default Substate\n   *\n   * This example provides data-driven default substate functionality. It matches on a transition to any state\n   * which has `defaultSubstate: \"some.sub.state\"` defined.  See: [[Transition.to]] which returns the \"to state\"\n   * definition.\n   *\n   * @example\n   * ```js\n   * // ng1\n   * // state declaration\n   * {\n   *   name: 'home',\n   *   template: '<div ui-view/>',\n   *   defaultSubstate: 'home.dashboard'\n   * }\n   *\n   * var criteria = {\n   *   to: function(state) {\n   *     return state.defaultSubstate != null;\n   *   }\n   * }\n   *\n   * $transitions.onBefore(criteria, function(trans: Transition) {\n   *   var substate = trans.to().defaultSubstate;\n   *   return trans.router.stateService.target(substate);\n   * });\n   * ```\n   *\n   *\n   * #### Require authentication\n   *\n   * This example cancels a transition to a state which requires authentication, if the user is not currently authenticated.\n   *\n   * This example assumes a state tree where all states which require authentication are children of a parent `'requireauth'` state.\n   * This example assumes `MyAuthService` synchronously returns a boolean from `isAuthenticated()`.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onBefore( { to: 'requireauth.**' }, function(trans) {\n   *   var myAuthService = trans.injector().get('MyAuthService');\n   *   // If isAuthenticated returns false, the transition is cancelled.\n   *   return myAuthService.isAuthenticated();\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onBefore(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called when a transition starts.\n   *\n   * Registers a transition lifecycle hook, which is invoked as a transition starts running.\n   * This hook can be useful to perform some asynchronous action before completing a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onStart` hooks are invoked asynchronously when the Transition starts running.\n   * This happens after the `onBefore` phase is complete.\n   * At this point, the Transition has not yet exited nor entered any states.\n   * The registered `onStart` hooks are invoked in priority order.\n   *\n   * Note: A built-in `onStart` hook with high priority is used to fetch any eager resolve data.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Example\n   *\n   * #### Login during transition\n   *\n   * This example intercepts any transition to a state which requires authentication, when the user is\n   * not currently authenticated.  It allows the user to authenticate asynchronously, then resumes the\n   * transition.  If the user did not authenticate successfully, it redirects to the \"guest\" state, which\n   * does not require authentication.\n   *\n   * This example assumes:\n   * - a state tree where all states which require authentication are children of a parent `'auth'` state.\n   * - `MyAuthService.isAuthenticated()` synchronously returns a boolean.\n   * - `MyAuthService.authenticate()` presents a login dialog, and returns a promise which is resolved\n   *   or rejected, whether or not the login attempt was successful.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onStart( { to: 'auth.**' }, function(trans) {\n   *   var $state = trans.router.stateService;\n   *   var MyAuthService = trans.injector().get('MyAuthService');\n   *\n   *   // If the user is not authenticated\n   *   if (!MyAuthService.isAuthenticated()) {\n   *\n   *     // Then return a promise for a successful login.\n   *     // The transition will wait for this promise to settle\n   *\n   *     return MyAuthService.authenticate().catch(function() {\n   *\n   *       // If the authenticate() method failed for whatever reason,\n   *       // redirect to a 'guest' state which doesn't require auth.\n   *       return $state.target(\"guest\");\n   *     });\n   *   }\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onStart(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is entered.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being entered.\n   *\n   * Since this hook is run only when the specific state is being *entered*, it can be useful for\n   * performing tasks when entering a submodule/feature area such as initializing a stateful service,\n   * or for guarding access to a submodule/feature area.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onEnter` hooks generally specify `{ entering: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onEnter` hooks are invoked when the Transition is entering a state.\n   * States are entered after the `onRetain` phase is complete.\n   * If more than one state is being entered, the parent state is entered first.\n   * The registered `onEnter` hooks for a state are invoked in priority order.\n   *\n   * Note: A built-in `onEnter` hook with high priority is used to fetch lazy resolve data for states being entered.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onEnter` hooks using the [[TransitionService]], you may define an `onEnter` hook\n   * directly on a state declaration (see: [[StateDeclaration.onEnter]]).\n   *\n   *\n   * ### Examples\n   *\n   * #### Audit Log\n   *\n   * This example uses a service to log that a user has entered the admin section of an app.\n   * This assumes that there are substates of the \"admin\" state, such as \"admin.users\", \"admin.pages\", etc.\n   * @example\n   * ```\n   *\n   * $transitions.onEnter({ entering: 'admin' }, function(transition, state) {\n   *   var AuditService = trans.injector().get('AuditService');\n   *   AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   * }\n   * ```\n   *\n   * #### Audit Log (inside a state declaration)\n   *\n   * The `onEnter` inside this state declaration is syntactic sugar for the previous Audit Log example.\n   * ```\n   * {\n   *   name: 'admin',\n   *   component: 'admin',\n   *   onEnter: function($transition$, $state$) {\n   *     var AuditService = $transition$.injector().get('AuditService');\n   *     AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   *   }\n   * }\n   * ```\n   *\n   * Note: A state declaration's `onEnter` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onEnter(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is retained/kept.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) for\n   * a specific state that was previously active will remain active (is not being entered nor exited).\n   *\n   * This hook is invoked when a state is \"retained\" or \"kept\".\n   * It means the transition is coming *from* a substate of the retained state *to* a substate of the retained state.\n   * This hook can be used to perform actions when the user moves from one substate to another, such as between steps in a wizard.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onRetain` hooks generally specify `{ retained: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onRetain` hooks are invoked after any `onExit` hooks have been fired.\n   * If more than one state is retained, the child states' `onRetain` hooks are invoked first.\n   * The registered `onRetain` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onRetain` hooks using the [[TransitionService]], you may define an `onRetain` hook\n   * directly on a state declaration (see: [[StateDeclaration.onRetain]]).\n   *\n   * Note: A state declaration's `onRetain` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onRetain(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is exited.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being exited.\n   *\n   * Since this hook is run only when the specific state is being *exited*, it can be useful for\n   * performing tasks when leaving a submodule/feature area such as cleaning up a stateful service,\n   * or for preventing the user from leaving a state or submodule until some criteria is satisfied.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onExit` hooks generally specify `{ exiting: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onExit` hooks are invoked when the Transition is exiting a state.\n   * States are exited after any `onStart` phase is complete.\n   * If more than one state is being exited, the child states are exited first.\n   * The registered `onExit` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onExit` hooks using the [[TransitionService]], you may define an `onExit` hook\n   * directly on a state declaration (see: [[StateDeclaration.onExit]]).\n   *\n   * Note: A state declaration's `onExit` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onExit(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called *just before a transition finishes*.\n   *\n   * Registers a transition lifecycle hook, which is invoked just before a transition finishes.\n   * This hook is a last chance to cancel or redirect a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onFinish` hooks are invoked after the `onEnter` phase is complete.\n   * These hooks are invoked just before the transition is \"committed\".\n   * Each hook is invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onFinish(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a successful transition completed.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition successfully completes.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onSuccess` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If the Transition is successful and its promise is resolved, then the `onSuccess` hooks are invoked.\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   * The `onSuccess` hooks are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onSuccess(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a transition has errored.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition has been rejected for any reason.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * The `onError` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If a Transition fails, its promise is rejected and the `onError` hooks are invoked.\n   * The `onError` hooks are invoked in priority order.\n   *\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   *\n   * A transition \"errors\" if it was started, but failed to complete (for any reason).\n   * A *non-exhaustive list* of reasons a transition can error:\n   *\n   * - A transition was cancelled because a new transition started while it was still running (`Transition superseded`)\n   * - A transition was cancelled by a Transition Hook returning false\n   * - A transition was redirected by a Transition Hook returning a [[TargetState]]\n   * - A Transition Hook or resolve function threw an error\n   * - A Transition Hook returned a rejected promise\n   * - A resolve function returned a rejected promise\n   *\n   * To check the failure reason, inspect the return value of [[Transition.error]].\n   *\n   * Note: `onError` should be used for targeted error handling, or error recovery.\n   * For simple catch-all error reporting, use [[StateService.defaultErrorHandler]].\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onError(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Returns all the registered hooks of a given `hookName` type\n   *\n   * #### Example:\n   * ```\n   * $transitions.getHooks(\"onEnter\")\n   * ```\n   */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/** A predicate type which tests if a [[StateObject]] passes some test. Returns a boolean. */\nexport type IStateMatch = Predicate<StateObject>;\n\n/**\n * This object is used to configure whether or not a Transition Hook is invoked for a particular transition,\n * based on the Transition's \"to state\" and \"from state\".\n *\n * Each property (`to`, `from`, `exiting`, `retained`, and `entering`) can be a state [[Glob]] string,\n * a boolean, or a function that takes a state and returns a boolean (see [[HookMatchCriterion]])\n *\n * All properties are optional.  If any property is omitted, it is replaced with the value `true`, and always matches.\n * To match any transition, use an empty criteria object `{}`.\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from the `parent` state and going to the `parent.child` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.child'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any substate of `parent` and going directly to the `parent` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any substate of `mymodule`\n * var match = {\n *   to: 'mymodule.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any state that has `data.authRequired`\n * // set to a truthy value.\n * var match = {\n *   to: function(state) {\n *     return state.data != null && state.data.authRequired === true;\n *   }\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition that is exiting `parent.child`\n * var match = {\n *   exiting: 'parent.child'\n * }\n * ```\n */\nexport interface HookMatchCriteria {\n  [key: string]: HookMatchCriterion | undefined;\n\n  /** A [[HookMatchCriterion]] to match the destination state */\n  to?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match the original (from) state */\n  from?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match any state that would be exiting */\n  exiting?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match any state that would be retained */\n  retained?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match any state that would be entering */\n  entering?: HookMatchCriterion;\n}\n\nexport interface IMatchingNodes {\n  [key: string]: PathNode[];\n\n  to: PathNode[];\n  from: PathNode[];\n  exiting: PathNode[];\n  retained: PathNode[];\n  entering: PathNode[];\n}\n\n/** @hidden */\nexport interface RegisteredHooks {\n  [key: string]: RegisteredHook[];\n}\n\n/** @hidden */\nexport interface PathTypes {\n  [key: string]: PathType;\n\n  to: PathType;\n  from: PathType;\n  exiting: PathType;\n  retained: PathType;\n  entering: PathType;\n}\n\n/** @hidden */\nexport interface PathType {\n  name: string;\n  scope: TransitionHookScope;\n}\n\n/**\n * Hook Criterion used to match a transition.\n *\n * A [[Glob]] string that matches the name of a state.\n *\n * Or, a function with the signature `function(state) { return matches; }`\n * which should return a boolean to indicate if a state matches.\n *\n * Or, `true` to always match\n */\nexport type HookMatchCriterion = (string|IStateMatch|boolean);\n\nexport enum TransitionHookPhase { CREATE, BEFORE, RUN, SUCCESS, ERROR }\nexport enum TransitionHookScope { TRANSITION, STATE }\n",
    "/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\nimport { StateDeclaration, StateOrName, TargetStateDef } from './interface';\nimport { TransitionOptions } from '../transition/interface';\nimport { StateObject } from './stateObject';\nimport { isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { extend } from '../common';\nimport { StateRegistry } from './stateRegistry';\nimport { RawParams } from '../params';\n\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nexport class TargetState {\n  private _definition: StateObject;\n  private _params: RawParams;\n  private _options: TransitionOptions;\n\n  /** Returns true if the object has a state property that might be a state or state name */\n  static isDef = (obj): obj is TargetStateDef =>\n    obj && obj.state && (isString(obj.state) || isString(obj.state.name));\n\n  /**\n   * The TargetState constructor\n   *\n   * Note: Do not construct a `TargetState` manually.\n   * To create a `TargetState`, use the [[StateService.target]] factory method.\n   *\n   * @param _stateRegistry The StateRegistry to use to look up the _definition\n   * @param _identifier An identifier for a state.\n   *    Either a fully-qualified state name, or the object used to define the state.\n   * @param _params Parameters for the target state\n   * @param _options Transition options.\n   *\n   * @internalapi\n   */\n  constructor(\n    private _stateRegistry: StateRegistry,\n    private _identifier: StateOrName,\n    _params?: RawParams,\n    _options?: TransitionOptions,\n  ) {\n    this._identifier = _identifier;\n    this._params = extend({}, _params || {});\n    this._options = extend({}, _options || {});\n    this._definition = _stateRegistry.matcher.find(_identifier, this._options.relative);\n  }\n\n  /** The name of the state this object targets */\n  name(): string {\n    return this._definition && this._definition.name || <string> this._identifier;\n  }\n\n  /** The identifier used when creating this TargetState */\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  /** The target parameter values */\n  params(): RawParams {\n    return this._params;\n  }\n\n  /** The internal state object (if it was found) */\n  $state(): StateObject {\n    return this._definition;\n  }\n\n  /** The internal state declaration (if it was found) */\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  /** The target options */\n  options() {\n    return this._options;\n  }\n\n  /** True if the target state was found */\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  /** True if the object is valid */\n  valid(): boolean {\n    return !this.error();\n  }\n\n  /** If the object is invalid, returns the reason why */\n  error(): string {\n    const base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      const stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${stringify(this.params())}`;\n  }\n\n  /**\n   * Returns a copy of this TargetState which targets a different state.\n   * The new TargetState has the same parameter values and transition options.\n   *\n   * @param state The new state that should be targeted\n   */\n  withState(state: StateOrName): TargetState {\n    return new TargetState(this._stateRegistry, state, this._params, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified parameter values.\n   *\n   * @param params the new parameter values to use\n   * @param replace When false (default) the new parameter values will be merged with the current values.\n   *                When true the parameter values will be used instead of the current values.\n   */\n  withParams(params: RawParams, replace = false): TargetState {\n    const newParams: RawParams = replace ? params : extend({}, this._params, params);\n    return new TargetState(this._stateRegistry, this._identifier, newParams, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified Transition Options.\n   *\n   * @param options the new options to use\n   * @param replace When false (default) the new options will be merged with the current options.\n   *                When true the options will be used instead of the current options.\n   */\n  withOptions(options: TransitionOptions, replace = false): TargetState {\n    const newOpts = replace ? options : extend({}, this._options, options);\n    return new TargetState(this._stateRegistry, this._identifier, this._params, newOpts);\n  }\n}\n",
    "/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nimport { TransitionHookOptions, HookResult, TransitionHookPhase } from './interface';\nimport { defaults, noop, silentRejection } from '../common/common';\nimport { fnToString, maxLength } from '../common/strings';\nimport { isPromise } from '../common/predicates';\nimport { is, parse } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { Rejection } from './rejectFactory';\nimport { TargetState } from '../state/targetState';\nimport { Transition } from './transition';\nimport { TransitionEventType } from './transitionEventType';\nimport { RegisteredHook } from './hookRegistry';\nimport { StateDeclaration } from '../state/interface';\n\nconst defaultOptions: TransitionHookOptions = {\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null,\n};\n\nexport type GetResultHandler = (hook: TransitionHook) => ResultHandler;\nexport type GetErrorHandler  = (hook: TransitionHook) => ErrorHandler;\n\nexport type ResultHandler = (result: HookResult)      => Promise<HookResult>;\nexport type ErrorHandler  = (error: any)              => Promise<any>;\n\n/** @hidden */\nexport class TransitionHook {\n  type: TransitionEventType;\n\n  /**\n   * These GetResultHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  static HANDLE_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) =>\n      hook.handleHookResult(result);\n\n  /**\n   * If the result is a promise rejection, log it.\n   * Otherwise, ignore the result.\n   */\n  static LOG_REJECTED_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) => {\n    isPromise(result) && result.catch(err =>\n        hook.logError(Rejection.normalize(err)));\n    return undefined;\n  }\n\n  /**\n   * These GetErrorHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  static LOG_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) =>\n      hook.logError(error);\n\n  static REJECT_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) =>\n      silentRejection(error);\n\n  static THROW_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) => {\n    throw error;\n  }\n\n  /**\n   * Chains together an array of TransitionHooks.\n   *\n   * Given a list of [[TransitionHook]] objects, chains them together.\n   * Each hook is invoked after the previous one completes.\n   *\n   * #### Example:\n   * ```js\n   * var hooks: TransitionHook[] = getHooks();\n   * let promise: Promise<any> = TransitionHook.chain(hooks);\n   *\n   * promise.then(handleSuccess, handleError);\n   * ```\n   *\n   * @param hooks the list of hooks to chain together\n   * @param waitFor if provided, the chain is `.then()`'ed off this promise\n   * @returns a `Promise` for sequentially invoking the hooks (in order)\n   */\n  static chain(hooks: TransitionHook[], waitFor?: Promise<any>): Promise<any> {\n    // Chain the next hook off the previous\n    const createHookChainR = (prev: Promise<any>, nextHook: TransitionHook) =>\n      prev.then(() => nextHook.invokeHook());\n    return hooks.reduce(createHookChainR, waitFor || services.$q.when());\n  }\n\n\n  /**\n   * Invokes all the provided TransitionHooks, in order.\n   * Each hook's return value is checked.\n   * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n   * If no hook returns a promise, then all hooks are processed synchronously.\n   *\n   * @param hooks the list of TransitionHooks to invoke\n   * @param doneCallback a callback that is invoked after all the hooks have successfully completed\n   *\n   * @returns a promise for the async result, or the result of the callback\n   */\n  static invokeHooks<T>(hooks: TransitionHook[], doneCallback: (result?: HookResult) => T): Promise<any> | T {\n    for (let idx = 0; idx < hooks.length; idx++) {\n      const hookResult = hooks[idx].invokeHook();\n\n      if (isPromise(hookResult)) {\n        const remainingHooks = hooks.slice(idx + 1);\n\n        return TransitionHook.chain(remainingHooks, hookResult)\n          .then(doneCallback);\n      }\n    }\n\n    return doneCallback();\n  }\n\n  /**\n   * Run all TransitionHooks, ignoring their return value.\n   */\n  static runAllHooks(hooks: TransitionHook[]): void {\n    hooks.forEach(hook => hook.invokeHook());\n  }\n\n  constructor(private transition: Transition,\n              private stateContext: StateDeclaration,\n              private registeredHook: RegisteredHook,\n              private options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n    this.type = registeredHook.eventType;\n  }\n\n  private isSuperseded = () =>\n    this.type.hookPhase === TransitionHookPhase.RUN && !this.options.transition.isActive();\n\n  logError(err): any {\n    this.transition.router.stateService.defaultErrorHandler()(err);\n  }\n\n  invokeHook(): Promise<HookResult> | void {\n    const hook = this.registeredHook;\n    if (hook._deregistered) return;\n\n    const notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    const options = this.options;\n    trace.traceHookInvocation(this, this.transition, options);\n\n    const invokeCallback = () =>\n        hook.callback.call(options.bind, this.transition, this.stateContext);\n\n    const normalizeErr = err =>\n        Rejection.normalize(err).toPromise();\n\n    const handleError = err =>\n        hook.eventType.getErrorHandler(this)(err);\n\n    const handleResult = result =>\n        hook.eventType.getResultHandler(this)(result);\n\n    try {\n      const result = invokeCallback();\n\n      if (!this.type.synchronous && isPromise(result)) {\n        return result.catch(normalizeErr)\n            .then(handleResult, handleError);\n      } else {\n        return handleResult(result);\n      }\n    } catch (err) {\n      // If callback throws (synchronously)\n      return handleError(Rejection.normalize(err));\n    } finally {\n      if (hook.invokeLimit && ++hook.invokeCount >= hook.invokeLimit) {\n        hook.deregister();\n      }\n    }\n  }\n\n  /**\n   * This method handles the return value of a Transition Hook.\n   *\n   * A hook can return false (cancel), a TargetState (redirect),\n   * or a promise (which may later resolve to false or a redirect)\n   *\n   * This also handles \"transition superseded\" -- when a new transition\n   * was started while the hook was still running\n   */\n  handleHookResult(result: HookResult): Promise<HookResult> {\n    const notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    // Hook returned a promise\n    if (isPromise(result)) {\n      // Wait for the promise, then reprocess with the resulting value\n      return result.then(val => this.handleHookResult(val));\n    }\n\n    trace.traceHookResult(result, this.transition, this.options);\n\n    // Hook returned false\n    if (result === false) {\n      // Abort this Transition\n      return Rejection.aborted('Hook aborted transition').toPromise();\n    }\n\n    const isTargetState = is(TargetState);\n    // hook returned a TargetState\n    if (isTargetState(result)) {\n      // Halt the current Transition and redirect (a new Transition) to the TargetState.\n      return Rejection.redirected(result).toPromise();\n    }\n  }\n\n\n  /**\n   * Return a Rejection promise if the transition is no longer current due\n   * to a stopped router (disposed), or a new transition has started and superseded this one.\n   */\n  private getNotCurrentRejection() {\n    const router = this.transition.router;\n\n    // The router is stopped\n    if (router._disposed) {\n      return Rejection.aborted(`UIRouter instance #${router.$id} has been stopped (disposed)`).toPromise();\n    }\n\n    if (this.transition._aborted) {\n      return Rejection.aborted().toPromise();\n    }\n\n    // This transition is no longer current.\n    // Another transition started while this hook was still running.\n    if (this.isSuperseded()) {\n      // Abort this transition\n      return Rejection.superseded(this.options.current()).toPromise();\n    }\n  }\n\n  toString() {\n    const { options, registeredHook } = this;\n    const event = parse('traceData.hookType')(options) || 'internal',\n        context = parse('traceData.context.state.name')(options) || parse('traceData.context')(options) || 'unknown',\n        name = fnToString(registeredHook.callback);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n\n}\n",
    "/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\nimport { isString, isFunction, Glob, extend, removeFrom, tail, values, identity, mapObj } from '../common';\nimport { PathNode } from '../path/pathNode';\nimport {\n  TransitionStateHookFn, TransitionHookFn, TransitionHookPhase, // has or is using\n  TransitionHookScope, IHookRegistry, PathType,\n} from './interface';\n\nimport { HookRegOptions, HookMatchCriteria, TreeChanges, HookMatchCriterion, IMatchingNodes, HookFn } from './interface';\nimport { StateObject } from '../state/stateObject';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionService } from './transitionService';\n\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: StateObject, criterion: HookMatchCriterion) {\n  const toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state: StateObject) {\n    const globStrings = <string[]> toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      const glob = new Glob(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const matchFn = <any> (isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state);\n}\n\n/**\n * @internalapi\n * The registration data for a registered transition hook\n */\nexport class RegisteredHook {\n  priority: number;\n  bind: any;\n  invokeCount = 0;\n  invokeLimit: number;\n  _deregistered = false;\n\n  constructor(public tranSvc: TransitionService,\n              public eventType: TransitionEventType,\n              public callback: HookFn,\n              public matchCriteria: HookMatchCriteria,\n              public removeHookFromRegistry: (hook: RegisteredHook) => void,\n              options: HookRegOptions = {} as any) {\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n    this.invokeLimit = options.invokeLimit;\n  }\n\n  /**\n   * Gets the matching [[PathNode]]s\n   *\n   * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n   * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n   *\n   * Returning `null` is significant to distinguish between the default\n   * \"match-all criterion value\" of `true` compared to a `() => true` function,\n   * when the nodes is an empty array.\n   *\n   * This is useful to allow a transition match criteria of `entering: true`\n   * to still match a transition, even when `entering === []`.  Contrast that\n   * with `entering: (state) => true` which only matches when a state is actually\n   * being entered.\n   */\n  private _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion): PathNode[] {\n    if (criterion === true) return nodes;\n    const matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Gets the default match criteria (all `true`)\n   *\n   * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n   *\n   * ```js\n   * {\n   *   to: true,\n   *   from: true,\n   *   entering: true,\n   *   exiting: true,\n   *   retained: true,\n   * }\n   */\n  private _getDefaultMatchCriteria(): HookMatchCriteria {\n    return mapObj(this.tranSvc._pluginapi._getPathTypes(), () => true);\n  }\n\n  /**\n   * Gets matching nodes as [[IMatchingNodes]]\n   *\n   * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n   *\n   * ```js\n   * let matches: IMatchingNodes = {\n   *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n   *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n   *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n   *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n   *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n   * };\n   * ```\n   */\n  private _getMatchingNodes(treeChanges: TreeChanges): IMatchingNodes {\n    const criteria = extend(this._getDefaultMatchCriteria(), this.matchCriteria);\n    const paths: PathType[] = values(this.tranSvc._pluginapi._getPathTypes());\n\n    return paths.reduce((mn: IMatchingNodes, pathtype: PathType) => {\n      // STATE scope criteria matches against every node in the path.\n      // TRANSITION scope criteria matches against only the last node in the path\n      const isStateHook = pathtype.scope === TransitionHookScope.STATE;\n      const path = treeChanges[pathtype.name] || [];\n      const nodes: PathNode[] = isStateHook ? path : [tail(path)];\n\n      mn[pathtype.name] = this._matchingNodes(nodes, criteria[pathtype.name]);\n      return mn;\n    }, {} as IMatchingNodes);\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges): IMatchingNodes {\n    const matches = this._getMatchingNodes(treeChanges);\n\n    // Check if all the criteria matched the TreeChanges object\n    const allMatched = values(matches).every(identity);\n    return allMatched ? matches : null;\n  }\n\n  deregister() {\n    this.removeHookFromRegistry(this);\n    this._deregistered = true;\n  }\n}\n\n/** @hidden Return a registration function of the requested type. */\nexport function makeEvent(registry: IHookRegistry, transitionService: TransitionService, eventType: TransitionEventType) {\n  // Create the object which holds the registered transition hooks.\n  const _registeredHooks = registry._registeredHooks = (registry._registeredHooks || {});\n  const hooks = _registeredHooks[eventType.name] = [];\n  const removeHookFn: (hook: RegisteredHook) => void = removeFrom(hooks);\n\n  // Create hook registration function on the IHookRegistry for the event\n  registry[eventType.name] = hookRegistrationFn;\n\n  function hookRegistrationFn(matchObject, callback, options = {}) {\n    const registeredHook = new RegisteredHook(transitionService, eventType, callback, matchObject, removeHookFn, options);\n    hooks.push(registeredHook);\n    return registeredHook.deregister.bind(registeredHook);\n  }\n\n  return hookRegistrationFn;\n}\n",
    "/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\nimport { extend, tail, assertPredicate, unnestR, identity } from '../common/common';\nimport { isArray } from '../common/predicates';\n\nimport {\n    TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IMatchingNodes,\n    TransitionHookPhase, TransitionHookScope,\n} from './interface';\n\nimport { Transition } from './transition';\nimport { TransitionHook } from './transitionHook';\nimport { StateObject } from '../state/stateObject';\nimport { PathNode } from '../path/pathNode';\nimport { TransitionService } from './transitionService';\nimport { TransitionEventType } from './transitionEventType';\nimport { RegisteredHook } from './hookRegistry';\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nexport class HookBuilder {\n  constructor(private transition: Transition) { }\n\n  buildHooksForPhase(phase: TransitionHookPhase): TransitionHook[] {\n    const $transitions = this.transition.router.transitionService;\n    return $transitions._pluginapi._getEvents(phase)\n        .map(type => this.buildHooks(type))\n        .reduce(unnestR, [])\n        .filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n   * - For each of the [[PathNode]]s, creates a TransitionHook\n   *\n   * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   */\n  buildHooks(hookType: TransitionEventType): TransitionHook[] {\n    const transition = this.transition;\n    const treeChanges = transition.treeChanges();\n\n    // Find all the matching registered hooks for a given hook type\n    const matchingHooks = this.getMatchingHooks(hookType, treeChanges);\n    if (!matchingHooks) return [];\n\n    const baseHookOptions = <TransitionHookOptions> {\n      transition: transition,\n      current: transition.options().current,\n    };\n\n    const makeTransitionHooks = (hook: RegisteredHook) => {\n       // Fetch the Nodes that caused this hook to match.\n       const matches: IMatchingNodes = hook.matches(treeChanges);\n       // Select the PathNode[] that will be used as TransitionHook context objects\n       const matchingNodes: PathNode[] = matches[hookType.criteriaMatchPath.name];\n\n       // Return an array of HookTuples\n       return matchingNodes.map(node => {\n         const _options = extend({\n           bind: hook.bind,\n           traceData: { hookType: hookType.name, context: node },\n         }, baseHookOptions);\n\n         const state = hookType.criteriaMatchPath.scope === TransitionHookScope.STATE ? node.state.self : null;\n         const transitionHook = new TransitionHook(transition, state, hook, _options);\n         return <HookTuple> { hook, node, transitionHook };\n       });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(tupleSort(hookType.reverseSort))\n        .map(tuple => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all RegisteredHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[RegisteredHook]]s\n   */\n  public getMatchingHooks(hookType: TransitionEventType, treeChanges: TreeChanges): RegisteredHook[] {\n    const isCreate = hookType.hookPhase === TransitionHookPhase.CREATE;\n\n    // Instance and Global hook registries\n    const $transitions = this.transition.router.transitionService;\n    const registries = isCreate ? [ $transitions ] : [ this.transition, $transitions ];\n\n    return registries.map((reg: IHookRegistry) => reg.getHooks(hookType.name))    // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookType.name}`)) // Sanity check\n        .reduce(unnestR, [])                                                      // Un-nest RegisteredHook[][] to RegisteredHook[] array\n        .filter(hook => hook.matches(treeChanges));                               // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple { hook: RegisteredHook, node: PathNode, transitionHook: TransitionHook }\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    const factor = reverseDepthSort ? -1 : 1;\n    const depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  };\n}\n",
    "/**\n * @coreapi\n * @module params\n */\n/** */\nimport { extend, filter, map } from '../common/common';\nimport { isArray, isDefined } from '../common/predicates';\nimport { ParamTypeDefinition } from './interface';\n\n/**\n * An internal class which implements [[ParamTypeDefinition]].\n *\n * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n * When a param type definition is registered, an instance of this class is created internally.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * #### Example:\n * ```js\n * var paramTypeDef = {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n *\n * var paramType = new ParamType(paramTypeDef);\n * ```\n * @internalapi\n */\nexport class ParamType implements ParamTypeDefinition {\n  /** @inheritdoc */\n  pattern: RegExp = /.*/;\n  /** The name/id of the parameter type */\n  name: string;\n  /** @inheritdoc */\n  raw: boolean;\n  /** @inheritdoc */\n  dynamic: boolean;\n  /** @inheritdoc */\n  inherit = true;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n   * @returns a new ParamType object\n   */\n  constructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean { return true; }\n  /** @inheritdoc */\n  encode(val: any, key?: string): (string|string[]) { return val; }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any { return val; }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean { return a == b; } // tslint:disable-line:triple-equals\n\n\n  $subPattern() {\n    const sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{ParamType:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val: any) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode: (boolean|'auto'), isSearch: boolean) {\n    if (!mode) return this;\n    if (mode === 'auto' && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new (<any> ArrayType)(this, mode);\n  }\n}\n\n/**\n * Wraps up a `ParamType` object to handle array values.\n * @internalapi\n */\nfunction ArrayType(type: ParamType, mode: (boolean|'auto')) {\n  // Wrap non-array value as array\n  function arrayWrap(val: any): any[] {\n    return isArray(val) ? val : (isDefined(val) ? [ val ] : []);\n  }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val: any) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === 'auto' ? val[0] : val;\n      default: return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback: (x: any) => any, allTruthyMode?: boolean) {\n    return function handleArray(val: any) {\n      if (isArray(val) && val.length === 0) return val;\n      const arr = arrayWrap(val);\n      const result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback: (l: any, r: any) => boolean) {\n    return function handleArray(val1: any, val2: any) {\n      const left = arrayWrap(val1), right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].forEach(name => {\n    const paramTypeFn = type[name].bind(type);\n    const wrapperFn: Function = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n    this[name] = wrapperFn(paramTypeFn);\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    inherit: type.inherit,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode,\n  });\n}\n",
    "/**\n * @coreapi\n * @module params\n */ /** for typedoc */\nimport { extend, filter, map, allTrueR } from '../common/common';\nimport { prop } from '../common/hof';\nimport { isInjectable, isDefined, isString, isArray, isUndefined } from '../common/predicates';\nimport { RawParams, ParamDeclaration } from '../params/interface';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypes } from './paramTypes';\nimport { UrlMatcherFactory } from '../url/urlMatcherFactory';\n\n/** @hidden */\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n/** @hidden */\nconst isShorthand = (cfg: ParamDeclaration) =>\n    ['value', 'type', 'squash', 'array', 'dynamic'].filter(hasOwn.bind(cfg || {})).length === 0;\n\n/** @internalapi */\nexport enum DefType {\n  PATH,\n  SEARCH,\n  CONFIG,\n}\n\n/** @hidden */\nfunction unwrapShorthand(cfg: ParamDeclaration): ParamDeclaration {\n  cfg = isShorthand(cfg) && { value: cfg } as any || cfg;\n\n  getStaticDefaultValue['__cacheable'] = true;\n  function getStaticDefaultValue() {\n    return cfg.value;\n  }\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue,\n  });\n}\n\n/** @hidden */\nfunction getType(cfg: ParamDeclaration, urlType: ParamType, location: DefType, id: string, paramTypes: ParamTypes) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type as string)) return paramTypes.type(cfg.type as string);\n  if (urlType) return urlType;\n  if (!cfg.type) {\n    const type = location === DefType.CONFIG ? 'any' :\n        location === DefType.PATH ? 'path' :\n        location === DefType.SEARCH ? 'query' : 'string';\n    return paramTypes.type(type);\n  }\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type as string);\n}\n\n/**\n * @internalapi\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config: ParamDeclaration, isOptional: boolean, defaultPolicy: (boolean|string)) {\n  const squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return defaultPolicy;\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\n/** @internalapi */\nfunction getReplace(config: ParamDeclaration, arrayMode: boolean, isOptional: boolean, squash: (string|boolean)) {\n  const defaultPolicy = [\n    { from: '', to: (isOptional || arrayMode ? undefined : '') },\n    { from: null, to: (isOptional || arrayMode ? undefined : '') },\n  ];\n\n  const replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n\n  const configuredKeys = map(replace, prop('from'));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\n\n/** @internalapi */\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  isOptional: boolean;\n  dynamic: boolean;\n  raw: boolean;\n  squash: (boolean|string);\n  replace: [{ to: any, from: any }];\n  inherit: boolean;\n  array: boolean;\n  config: any;\n  /** Cache the default value if it is a static value */\n  _defaultValueCache: {\n    defaultValue: any,\n  };\n\n  static values(params: Param[], values: RawParams = {}): RawParams {\n    const paramValues = {} as RawParams;\n    for (const param of params) {\n      paramValues[param.id] = param.value(values[param.id]);\n    }\n    return paramValues;\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1: RawParams = {}, values2: RawParams = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values: RawParams = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n\n  constructor(id: string, type: ParamType, config: ParamDeclaration, location: DefType, urlMatcherFactory: UrlMatcherFactory) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id, urlMatcherFactory.paramTypes);\n    const arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    const isOptional = config.value !== undefined || location === DefType.SEARCH;\n    const dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    const raw = isDefined(config.raw) ? !!config.raw : !!type.raw;\n    const squash = getSquashPolicy(config, isOptional, urlMatcherFactory.defaultSquashPolicy());\n    const replace = getReplace(config, arrayMode, isOptional, squash);\n    const inherit = isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      const arrayDefaults = { array: (location === DefType.SEARCH ? 'auto' : false) };\n      const arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, { id, type, location, isOptional, dynamic, raw, squash, replace, inherit, array: arrayMode, config });\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const getDefaultValue = () => {\n      if (this._defaultValueCache) return this._defaultValueCache.defaultValue;\n\n      if (!services.$injector) throw new Error('Injectable functions cannot be called at configuration time');\n\n      const defaultValue = services.$injector.invoke(this.config.$$fn);\n\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`);\n\n      if (this.config.$$fn['__cacheable']) {\n        this._defaultValueCache = { defaultValue };\n      }\n\n      return defaultValue;\n    };\n\n    const replaceSpecialValues = (val: any) => {\n      for (const tuple of this.replace) {\n        if (tuple.from === val) return tuple.to;\n      }\n      return val;\n    };\n\n    value = replaceSpecialValues(value);\n\n    return isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((isUndefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string> encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n}\n",
    "/** @module path */ /** for typedoc */\nimport { extend, applyPairs, find, allTrueR, pairs, arrayTuples } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { StateObject } from '../state/stateObject';\nimport { RawParams } from '../params/interface';\nimport { Param } from '../params/param';\nimport { Resolvable } from '../resolve/resolvable';\nimport { ViewConfig } from '../view/interface';\n\n/**\n * @internalapi\n *\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n  /** The state being entered, exited, or retained */\n  public state: StateObject;\n  /** The parameters declared on the state */\n  public paramSchema: Param[];\n  /** The parameter values that belong to the state */\n  public paramValues: { [key: string]: any };\n  /** The individual (stateful) resolvable objects that belong to the state */\n  public resolvables: Resolvable[];\n  /** The state's declared view configuration objects */\n  public views: ViewConfig[];\n\n  /**\n   * Returns a clone of the PathNode\n   * @deprecated use instance method `node.clone()`\n   */\n  static clone = (node: PathNode) => node.clone();\n\n  /** Creates a copy of a PathNode */\n  constructor(node: PathNode);\n  /** Creates a new (empty) PathNode for a State */\n  constructor(state: StateObject);\n  constructor(stateOrNode: any) {\n    if (stateOrNode instanceof PathNode) {\n      const node: PathNode = stateOrNode;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      const state: StateObject = stateOrNode;\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map(res => res.clone());\n    }\n  }\n\n  clone() {\n    return new PathNode(this);\n  }\n\n  /** Sets [[paramValues]] for the node, from the values of an object hash */\n  applyRawParams(params: RawParams): PathNode {\n    const getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  /** Gets a specific [[Param]] metadata that belongs to the node */\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq('id', name));\n  }\n\n  /**\n   * @returns true if the state and parameter values for another PathNode are\n   * equal to the state and param values for this PathNode\n   */\n  equals(node: PathNode, paramsFn?: GetParamsFn): boolean {\n    const diff = this.diff(node, paramsFn);\n    return diff && diff.length === 0;\n  }\n\n  /**\n   * Finds Params with different parameter values on another PathNode.\n   *\n   * Given another node (of the same state), finds the parameter values which differ.\n   * Returns the [[Param]] (schema objects) whose parameter values differ.\n   *\n   * Given another node for a different state, returns `false`\n   *\n   * @param node The node to compare to\n   * @param paramsFn A function that returns which parameters should be compared.\n   * @returns The [[Param]]s which differ, or null if the two nodes are for different states\n   */\n  diff(node: PathNode, paramsFn?: GetParamsFn): Param[] | false {\n    if (this.state !== node.state) return false;\n\n    const params: Param[] = paramsFn ? paramsFn(this) : this.paramSchema;\n    return Param.changed(params, this.paramValues, node.paramValues);\n  }\n}\n\n/** @hidden */\nexport type GetParamsFn = (pathNode: PathNode) => Param[];\n",
    "/** @module path */ /** for typedoc */\n\nimport {\n  extend, find, pick, omit, tail, mergeR, values, unnestR, Predicate, inArray, arrayTuples,\n} from '../common/common';\nimport { prop, propEq, not } from '../common/hof';\n\nimport { RawParams } from '../params/interface';\nimport { TreeChanges } from '../transition/interface';\nimport { ViewConfig } from '../view/interface';\nimport { _ViewDeclaration } from '../state/interface';\n\nimport { StateObject } from '../state/stateObject';\nimport { TargetState } from '../state/targetState';\nimport { GetParamsFn, PathNode } from './pathNode';\nimport { ViewService } from '../view/view';\nimport { Param } from '../params/param';\nimport { StateRegistry } from '../state';\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathUtils {\n  /** Given a PathNode[], create an TargetState */\n  static makeTargetState(registry: StateRegistry, path: PathNode[]): TargetState {\n    const state = tail(path).state;\n    return new TargetState(registry, state, path.map(prop('paramValues')).reduce(mergeR, {}), {});\n  }\n\n  static buildPath(targetState: TargetState) {\n    const toParams = targetState.params();\n    return targetState.$state().path.map(state => new PathNode(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n  static buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    const toPath: PathNode[] = PathUtils.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n\n  /**\n   * Creates ViewConfig objects and adds to nodes.\n   *\n   * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n   */\n  static applyViewConfigs($view: ViewService, path: PathNode[], states: StateObject[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path.filter(node => inArray(states, node.state)).forEach(node => {\n      const viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n      const subPath = PathUtils.subPath(path, n => n === node);\n      const viewConfigs: ViewConfig[][] = viewDecls.map(view => $view.createViewConfig(subPath, view));\n      node.views = viewConfigs.reduce(unnestR, []);\n    });\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n    function nodeParamVals(path: PathNode[], state: StateObject): RawParams {\n      const node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    const noInherit = fromPath.map(node => node.paramSchema)\n        .reduce(unnestR, [])\n        .filter(param => !param.inherit)\n        .map(prop('id'));\n\n    /**\n     * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    function makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      const incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      const fromParamVals = omit(nodeParamVals(fromPath, toNode.state) || {}, noInherit);\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      const ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return <PathNode[]> toPath.map(makeInheritedParamsNode);\n  }\n\n  static nonDynamicParams = (node: PathNode): Param[] =>\n      node.state.parameters({ inherit: false })\n          .filter(param => !param.dynamic);\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: StateObject): TreeChanges {\n    const max = Math.min(fromPath.length, toPath.length);\n    let keep = 0;\n\n    const nodesMatch = (node1: PathNode, node2: PathNode) =>\n        node1.equals(node2, PathUtils.nonDynamicParams);\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      const cloned = retainedNode.clone();\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: PathNode[], retained: PathNode[], exiting: PathNode[], entering: PathNode[], to: PathNode[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    const retainedWithToParams  = retained.map(applyToParams);\n    entering              = toPath.slice(keep);\n    to                    = (retainedWithToParams).concat(entering);\n\n    return { from, to, retained, retainedWithToParams, exiting, entering };\n  }\n\n  /**\n   * Returns a new path which is: the subpath of the first path which matches the second path.\n   *\n   * The new path starts from root and contains any nodes that match the nodes in the second path.\n   * It stops before the first non-matching node.\n   *\n   * Nodes are compared using their state property and their parameter values.\n   * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n   *\n   * @param pathA the first path\n   * @param pathB the second path\n   * @param paramsFn a function which returns the parameters to consider when comparing\n   *\n   * @returns an array of PathNodes from the first path which match the nodes in the second path\n   */\n  static matching(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): PathNode[] {\n    let done = false;\n    const tuples: PathNode[][] = arrayTuples(pathA, pathB);\n    return tuples.reduce((matching, [nodeA, nodeB]) => {\n      done = done || !nodeA.equals(nodeB, paramsFn);\n      return done ? matching : matching.concat(nodeA);\n    }, []);\n  }\n\n  /**\n   * Returns true if two paths are identical.\n   *\n   * @param pathA\n   * @param pathB\n   * @param paramsFn a function which returns the parameters to consider when comparing\n   * @returns true if the the states and parameter values for both paths are identical\n   */\n  static equals(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): boolean {\n    return pathA.length === pathB.length &&\n        PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;\n  }\n\n  /**\n   * Return a subpath of a path, which stops at the first matching node\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node,\n   * stopping when the first node matches the predicate.\n   *\n   * @param path a path of [[PathNode]]s\n   * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n   * @returns a subpath up to the matching node, or undefined if no match is found\n   */\n  static subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    const node = find(path, predicate);\n    const elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: PathNode[]) =>\n      path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n",
    "/**\n * @coreapi\n * @module resolve\n */ /** for typedoc */\nimport { extend, equals, inArray, identity } from '../common/common';\nimport { services } from '../common/coreservices';\nimport { trace } from '../common/trace';\nimport { ResolvePolicy, ResolvableLiteral, resolvePolicies } from './interface';\n\nimport { ResolveContext } from './resolveContext';\nimport { stringify } from '../common/strings';\nimport { isFunction, isObject } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { StateObject } from '../state/stateObject';\nimport { PathNode } from '../path/pathNode';\nimport { isNullOrUndefined } from '../common/predicates';\n\n\n// TODO: explicitly make this user configurable\nexport let defaultResolvePolicy: ResolvePolicy = {\n  when: 'LAZY',\n  async: 'WAIT',\n};\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved = false;\n  promise: Promise<any> = undefined;\n\n  static fromData = (token: any, data: any) =>\n    new Resolvable(token, () => data, null, null, data);\n\n  /** This constructor creates a Resolvable copy */\n  constructor(resolvable: Resolvable)\n\n  /** This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object */\n  constructor(resolvable: ResolvableLiteral)\n\n  /**\n   * This constructor creates a new `Resolvable`\n   *\n   * #### Example:\n   * ```js\n   * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n   *\n   * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n   *\n   * var resolvable1Clone = new Resolvable(resolvable1);\n   * ```\n   *\n   * @param token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n   *              When this token is used during injection, the resolved value will be injected.\n   * @param resolveFn The function that returns the resolved value, or a promise for the resolved value\n   * @param deps An array of dependencies, which will be injected into the `resolveFn`\n   * @param policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n   * @param data Pre-resolved data. If the resolve value is already known, it may be provided here.\n   */\n  constructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any)\n  constructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (isNullOrUndefined(arg1)) throw new Error('new Resolvable(): token argument is required');\n      if (!isFunction(resolveFn)) throw new Error('new Resolvable(): resolveFn argument must be a function');\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && (arg1.hasOwnProperty('resolveFn') || arg1.hasOwnProperty('data'))) {\n      const literal = <ResolvableLiteral> arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n\n  getPolicy(state: StateObject): ResolvePolicy {\n    const thisPolicy = this.policy || {};\n    const statePolicy = state && state.resolvePolicy || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    };\n  }\n\n  /**\n   * Asynchronously resolve this Resolvable's data\n   *\n   * Given a ResolveContext that this Resolvable is found in:\n   * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n   * and update the Resolvable's state\n   */\n  resolve(resolveContext: ResolveContext, trans?: Transition) {\n    const $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const getResolvableDependencies = () =>\n        $q.all(resolveContext.getDependencies(this).map(resolvable =>\n            resolvable.get(resolveContext, trans))) as Promise<any[]>;\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const invokeResolveFn = (resolvedDeps: any[]) =>\n        this.resolveFn.apply(null, resolvedDeps);\n\n    /**\n     * For RXWAIT policy:\n     *\n     * Given an observable returned from a resolve function:\n     * - enables .cache() mode (this allows multicast subscribers)\n     * - then calls toPromise() (this triggers subscribe() and thus fetches)\n     * - Waits for the promise, then return the cached observable (not the first emitted value).\n     */\n    const waitForRx = (observable$: any) => {\n      const cached = observable$.cache(1);\n      return cached.take(1).toPromise().then(() => cached);\n    };\n\n    // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n    const node: PathNode = resolveContext.findNode(this);\n    const state: StateObject = node && node.state;\n    const maybeWaitForRx = this.getPolicy(state).async === 'RXWAIT' ? waitForRx : identity;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const applyResolvedValue = (resolvedValue: any) => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      this.resolveFn = null;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return this.promise = $q.when()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(maybeWaitForRx)\n        .then(applyResolvedValue);\n  }\n\n  /**\n   * Gets a promise for this Resolvable's data.\n   *\n   * Fetches the data and returns a promise.\n   * Returns the existing promise if it has already been fetched once.\n   */\n  get(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n\n  toString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n\n  clone(): Resolvable {\n    return new Resolvable(this);\n  }\n}\n",
    "/**\n * # The Resolve subsystem\n *\n * This subsystem is an asynchronous, hierarchical Dependency Injection system.\n *\n * Typically, resolve is configured on a state using a [[StateDeclaration.resolve]] declaration.\n *\n * @coreapi\n * @module resolve\n */ /** for typedoc */\nimport { Resolvable } from './resolvable';\n\n/**\n * An interface which is similar to an Angular 2 `Provider`\n */\nexport interface ProviderLike {\n  provide: any,\n  useClass?: any,\n  useFactory?: Function,\n  useValue?: any,\n  useExisting?: any,\n  deps?: any[]\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be used in the [[StateDeclaration.resolve]] array to declare\n * async data that the state or substates require.\n *\n * #### Example:\n * ```js\n *\n * var state = {\n *   name: 'main',\n *   resolve: [\n *     { token: 'myData', deps: [MyDataApi], resolveFn: (myDataApi) => myDataApi.getData() },\n *   ],\n * }\n * ```\n */\nexport interface ResolvableLiteral {\n  /**\n   * A Dependency Injection token\n   *\n   * This Resolvable's DI token.\n   * The Resolvable will be injectable elsewhere using the token.\n   */\n  token: any;\n\n  /**\n   * A function which fetches the Resolvable's data\n   *\n   * A function which returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /**\n   * Defines the Resolve Policy\n   *\n   * A policy that defines when to invoke the resolve,\n   * and whether to wait for async and unwrap the data\n   */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens\n   *\n   * This is an array of Dependency Injection tokens for the dependencies of the [[resolveFn]].\n   *\n   * The DI tokens are references to other `Resolvables`, or to other\n   * services from the native DI system.\n   */\n  deps?: any[];\n\n  /** Pre-resolved data. */\n  data?: any\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * This object is the [[StateDeclaration.resolvePolicy]] property.\n *\n * #### Example:\n * ```js\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * - 1) Individual resolve definition\n * - 2) State definition\n * - 3) Global default\n *\n * #### Example:\n * ```js\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * var myResolvablePolicy = { async: \"RXWAIT\" }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default)\n   *   - Resolved as the resolve's state is being entered\n   * - `EAGER`\n   *   - Resolved as the transition is starting\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched when each state is entered.\n   * All of `main` resolves are processed before fetching `main.home` resolves.\n   * ```js\n   * var state = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   *\n   * var state = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   * ```\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched at the same time when the transition starts.\n   * This happens earlier in the lifecycle than when states are entered.\n   * All of the `main` and `main.home` resolves are fetched as soon as possible.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   *\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   * ```\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default)\n   *   - If a promise is returned from the resolveFn, wait for the promise before proceeding\n   *   - The unwrapped value from the promise\n   * - `NOWAIT`\n   *   - If a promise is returned from the resolve, do not wait for the promise.\n   *   - Any other value returned is wrapped in a promise.\n   *   - The promise will not be unwrapped.\n   *   - The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - `RXWAIT`\n   *   - When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n   *   - The Observable item will not be unwrapped.\n   *   - The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n   *\n   * #### Example:\n   * The `Transition` will not wait for the resolve promise(s) from `main` to settle before continuing.\n   * Resolves for `main` will be provided to components wrapped in a `Promise`.\n   *\n   * The `Transition` will wait for the `main.home` resolve promises.\n   * Resolved values will be unwrapped before being provided to components.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'NOWAIT' },\n   * }\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'WAIT' }, // default\n   * }\n   * ```\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = 'LAZY' | 'EAGER' ;\nexport type PolicyAsync = 'WAIT' | 'NOWAIT' | 'RXWAIT' ;\n\n/** @internalapi */\nexport let resolvePolicies = {\n  when: {\n    LAZY: 'LAZY',\n    EAGER: 'EAGER',\n  },\n  async: {\n    WAIT: 'WAIT',\n    NOWAIT: 'NOWAIT',\n    RXWAIT: 'RXWAIT',\n  },\n};\n",
    "/** @module resolve */\n/** for typedoc */\nimport { find, tail, uniqR, unnestR, inArray } from '../common/common';\nimport { propEq, not } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services, $InjectorLike } from '../common/coreservices';\nimport { resolvePolicies, PolicyWhen, ResolvePolicy } from './interface';\nimport { PathNode } from '../path/pathNode';\nimport { Resolvable } from './resolvable';\nimport { StateObject } from '../state/stateObject';\nimport { PathUtils } from '../path/pathUtils';\nimport { stringify } from '../common/strings';\nimport { Transition } from '../transition/transition';\nimport { UIInjector } from '../interface';\nimport { isUndefined } from '../common';\n\nconst whens = resolvePolicies.when;\nconst ALL_WHENS = [whens.EAGER, whens.LAZY];\nconst EAGER_WHENS = [whens.EAGER];\n\n// tslint:disable-next-line:no-inferrable-types\nexport const NATIVE_INJECTOR_TOKEN: string = 'Native Injector';\n\n/**\n * Encapsulates Dependency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n  _injector: UIInjector;\n\n  constructor(private _path: PathNode[]) { }\n\n  /** Gets all the tokens found in the resolve context, de-duplicated */\n  getTokens(): any[] {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map(r => r.token)), []).reduce(uniqR, []);\n  }\n\n  /**\n   * Gets the Resolvable that matches the token\n   *\n   * Gets the last Resolvable that matches the token in this context, or undefined.\n   * Throws an error if it doesn't exist in the ResolveContext\n   */\n  getResolvable(token: any): Resolvable {\n    const matching = this._path.map(node => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n\n  /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */\n  getPolicy(resolvable: Resolvable): ResolvePolicy {\n    const node = this.findNode(resolvable);\n    return resolvable.getPolicy(node.state);\n  }\n\n  /**\n   * Returns a ResolveContext that includes a portion of this one\n   *\n   * Given a state, this method creates a new ResolveContext from this one.\n   * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n   *\n   * #### Why\n   *\n   * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n   * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n   * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n   * This method is used to create a narrower context when injecting ancestor nodes.\n   *\n   * @example\n   * `let ABCD = new ResolveContext([A, B, C, D]);`\n   *\n   * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n   * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n   * However, `B` should only be able to access resolvables from `A`, `B`.\n   *\n   * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n   * `let AB = ABCD.subcontext(a)`\n   */\n  subContext(state: StateObject): ResolveContext {\n    return new ResolveContext(PathUtils.subPath(this._path, node => node.state === state));\n  }\n\n  /**\n   * Adds Resolvables to the node that matches the state\n   *\n   * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n   * The resolvable is added to the node matching the `state` parameter.\n   *\n   * These new resolvables are not automatically fetched.\n   * The calling code should either fetch them, fetch something that depends on them,\n   * or rely on [[resolvePath]] being called when some state is being entered.\n   *\n   * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n   *\n   * @param newResolvables the new Resolvables\n   * @param state Used to find the node to put the resolvable on\n   */\n  addResolvables(newResolvables: Resolvable[], state: StateObject) {\n    const node = <PathNode> find(this._path, propEq('state', state));\n    const keys = newResolvables.map(r => r.token);\n    node.resolvables = node.resolvables.filter(r => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n\n  /**\n   * Returns a promise for an array of resolved path Element promises\n   *\n   * @param when\n   * @param trans\n   * @returns {Promise<any>|any}\n   */\n  resolvePath(when: PolicyWhen = 'LAZY', trans?: Transition): Promise<{ token: any, value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    const whenOption: string = inArray(ALL_WHENS, when) ? when : 'LAZY';\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    const matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n\n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    const matchesPolicy = (acceptedVals: string[], whenOrAsync: 'when'|'async') =>\n        (resolvable: Resolvable) =>\n            inArray(acceptedVals, this.getPolicy(resolvable)[whenOrAsync]);\n\n    // Trigger all the (matching) Resolvables in the path\n    // Reduce all the \"WAIT\" Resolvables into an array\n    const promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      const nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));\n      const nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));\n      const wait = nodeResolvables.filter(not(matchesPolicy(['NOWAIT'], 'async')));\n\n      // For the matching Resolvables, start their async fetch process.\n      const subContext = this.subContext(node.state);\n      const getResult = (r: Resolvable) => r.get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then(value => ({ token: r.token, value: value }));\n      nowait.forEach(getResult);\n      return acc.concat(wait.map(getResult));\n    }, []);\n\n    // Wait for all the \"WAIT\" resolvables\n    return services.$q.all(promises);\n  }\n\n  injector(): UIInjector {\n    return this._injector || (this._injector = new UIInjectorImpl(this));\n  }\n\n  findNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n\n  /**\n   * Gets the async dependencies of a Resolvable\n   *\n   * Given a Resolvable, returns its dependencies as a Resolvable[]\n   */\n  getDependencies(resolvable: Resolvable): Resolvable[] {\n    const node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    const subPath: PathNode[] = PathUtils.subPath(this._path, x => x === node) || this._path;\n    const availableResolvables: Resolvable[] = subPath\n        .reduce((acc, _node) => acc.concat(_node.resolvables), []) // all of subpath's resolvables\n        .filter(res => res !== resolvable); // filter out the `resolvable` argument\n\n    const getDependency = (token: any) => {\n      const matching = availableResolvables.filter(r => r.token === token);\n      if (matching.length) return tail(matching);\n\n      const fromInjector = this.injector().getNative(token);\n      if (isUndefined(fromInjector)) {\n        throw new Error('Could not find Dependency Injection token: ' + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\nclass UIInjectorImpl implements UIInjector {\n  native: $InjectorLike;\n\n  constructor(public context: ResolveContext) {\n    this.native = this.get(NATIVE_INJECTOR_TOKEN) || services.$injector;\n  }\n\n  get(token: any) {\n    const resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (this.context.getPolicy(resolvable).async === 'NOWAIT') {\n        return resolvable.get(this.context);\n      }\n\n      if (!resolvable.resolved) {\n        throw new Error('Resolvable async .get() not complete:' + stringify(resolvable.token));\n      }\n      return resolvable.data;\n    }\n\n    return this.getNative(token);\n  }\n\n  getAsync(token: any) {\n    const resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(this.native.get(token));\n  }\n\n  getNative(token: any) {\n    return this.native && this.native.get(token);\n  }\n}\n",
    "/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { stringify } from '../common/strings';\nimport { map, find, extend, mergeR, tail, omit, arrayTuples, unnestR, identity, anyTrueR } from '../common/common';\nimport { isObject, isUndefined } from '../common/predicates';\nimport { prop, propEq, val, not, is } from '../common/hof';\nimport { StateDeclaration, StateOrName } from '../state/interface';\nimport {\n  TransitionOptions, TreeChanges, IHookRegistry, TransitionHookPhase, RegisteredHooks, HookRegOptions,\n  HookMatchCriteria, TransitionStateHookFn, TransitionHookFn,\n} from './interface'; // has or is using\nimport { TransitionHook } from './transitionHook';\nimport { matchState, makeEvent, RegisteredHook } from './hookRegistry';\nimport { HookBuilder } from './hookBuilder';\nimport { PathNode } from '../path/pathNode';\nimport { PathUtils } from '../path/pathUtils';\nimport { StateObject } from '../state/stateObject';\nimport { TargetState } from '../state/targetState';\nimport { Param } from '../params/param';\nimport { Resolvable } from '../resolve/resolvable';\nimport { ViewConfig } from '../view/interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { RawParams } from '../params/interface';\nimport { ResolvableLiteral } from '../resolve/interface';\n\n/** @hidden */\nconst stateSelf: (_state: StateObject) => StateDeclaration = prop('self');\n\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n\n  /** @hidden */\n  static diToken = Transition;\n\n  /**\n   * A unique identifier for the transition.\n   *\n   * This is an auto incrementing integer, starting from `0`.\n   */\n  $id: number;\n\n  /**\n   * A reference to the [[UIRouter]] instance\n   *\n   * This reference can be used to access the router services, such as the [[StateService]]\n   */\n  router: UIRouter;\n\n  /** @hidden */\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n  /**\n   * A boolean which indicates if the transition was successful\n   *\n   * After a successful transition, this value is set to true.\n   * After an unsuccessful transition, this value is set to false.\n   *\n   * The value will be undefined if the transition is not complete\n   */\n  success: boolean;\n  /** @hidden */\n  _aborted: boolean;\n  /** @hidden */\n  private _error: any;\n\n  /** @hidden Holds the hook registration functions such as those passed to Transition.onStart() */\n  _registeredHooks: RegisteredHooks = { };\n\n  /** @hidden */\n  private _options: TransitionOptions;\n  /** @hidden */\n  private _treeChanges: TreeChanges;\n  /** @hidden */\n  private _targetState: TargetState;\n  /** @hidden */\n  private _hookBuilder = new HookBuilder(this);\n\n\n  /** @hidden */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n\n  /** @hidden\n   * Creates the transition-level hook registration functions\n   * (which can then be used to register hooks)\n   */\n  private createTransitionHookRegFns() {\n    this.router.transitionService._pluginapi._getEvents()\n        .filter(type => type.hookPhase !== TransitionHookPhase.CREATE)\n        .forEach(type => makeEvent(this, this.router.transitionService, type));\n  }\n\n  /** @internalapi */\n  getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @internalapi\n   *\n   * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param router The [[UIRouter]] instance\n   */\n  constructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    this._targetState = targetState;\n\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = router.transitionService._transitionCount++;\n    const toPath = PathUtils.buildToPath(fromPath, targetState);\n    this._treeChanges = PathUtils.treeChanges(fromPath, toPath, this._options.reloadState);\n    this.createTransitionHookRegFns();\n\n    const onCreateHooks = this._hookBuilder.buildHooksForPhase(TransitionHookPhase.CREATE);\n    TransitionHook.invokeHooks(onCreateHooks, () => null);\n\n    this.applyViewConfigs(router);\n  }\n\n  private applyViewConfigs(router: UIRouter) {\n    const enteringStates = this._treeChanges.entering.map(node => node.state);\n    PathUtils.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n  }\n\n  /**\n   * @internalapi\n   *\n   * @returns the internal from [State] object\n   */\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  /**\n   * @internalapi\n   *\n   * @returns the internal to [State] object\n   */\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * Returns the state that the transition is coming *from*.\n   *\n   * @returns The state declaration object for the Transition's (\"from state\").\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * Returns the state that the transition is going *to*.\n   *\n   * @returns The state declaration object for the Transition's target state (\"to state\").\n   */\n  to(): StateDeclaration {\n    return this.$to().self;\n  }\n\n  /**\n   * Gets the Target State\n   *\n   * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n   *\n   * @returns the [[TargetState]] of this Transition\n   */\n  targetState() {\n    return this._targetState;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   * @deprecated\n   */\n  is(compare: (Transition|{to?: any, from?: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * Returns the parameter values for a transition as key/value pairs.\n   * This object is immutable.\n   *\n   * By default, returns the new parameter values (for the \"to state\").\n   *\n   * #### Example:\n   * ```js\n   * var toParams = transition.params();\n   * ```\n   *\n   * To return the previous parameter values,  supply `'from'` as the `pathname` argument.\n   *\n   * #### Example:\n   * ```js\n   * var fromParams = transition.params('from');\n   * ```\n   *\n   * @param pathname the name of the treeChanges path to get parameter values for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   *\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname?: string): any;\n  params<T>(pathname?: string): T;\n  params(pathname = 'to') {\n    return Object.freeze(this._treeChanges[pathname].map(prop('paramValues')).reduce(mergeR, {}));\n  }\n\n\n  /**\n   * Creates a [[UIInjector]] Dependency Injector\n   *\n   * Returns a Dependency Injector for the Transition's target state (to state).\n   * The injector provides resolve values which the target state has access to.\n   *\n   * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n   *\n   * #### Example:\n   * ```js\n   * .onEnter({ entering: 'myState' }, trans => {\n   *   var myResolveValue = trans.injector().get('myResolve');\n   *   // Inject a global service from the global/native injector (if it exists)\n   *   var MyService = trans.injector().get('MyService');\n   * })\n   * ```\n   *\n   * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.\n   * You can use [[UIInjector.getAsync]] to get a promise for the data.\n   * #### Example:\n   * ```js\n   * .onBefore({}, trans => {\n   *   return trans.injector().getAsync('myResolve').then(myResolveValue =>\n   *     return myResolveValue !== 'ABORT';\n   *   });\n   * });\n   * ```\n   *\n   * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n   * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.\n   * #### Example:\n   * ```js\n   * .onEnter({ to: 'foo.bar' }, trans => {\n   *   // returns result of `foo` state's `myResolve` resolve\n   *   // even though `foo.bar` also has a `myResolve` resolve\n   *   var fooData = trans.injector('foo').get('myResolve');\n   * });\n   * ```\n   *\n   * If you need resolve data from the exiting states, pass `'from'` as `pathName`.\n   * The resolve data from the `from` path will be returned.\n   * #### Example:\n   * ```js\n   * .onExit({ exiting: 'foo.bar' }, trans => {\n   *   // Gets the resolve value of `myResolve` from the state being exited\n   *   var fooData = trans.injector(null, 'from').get('myResolve');\n   * });\n   * ```\n   *\n   *\n   * @param state Limits the resolves provided to only the resolves the provided state has access to.\n   * @param pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.\n   *\n   * @returns a [[UIInjector]]\n   */\n  injector(state?: StateOrName, pathName = 'to'): UIInjector {\n    let path: PathNode[] = this._treeChanges[pathName];\n    if (state) path = PathUtils.subPath(path, node => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n\n  /**\n   * Gets all available resolve tokens (keys)\n   *\n   * This method can be used in conjunction with [[injector]] to inspect the resolve values\n   * available to the Transition.\n   *\n   * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n   * in the Transition's [[TreeChanges.to]] path.\n   *\n   * #### Example:\n   * This example logs all resolve values\n   * ```js\n   * let tokens = trans.getResolveTokens();\n   * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n   * ```\n   *\n   * #### Example:\n   * This example creates promises for each resolve value.\n   * This triggers fetches of resolves (if any have not yet been fetched).\n   * When all promises have all settled, it logs the resolve values.\n   * ```js\n   * let tokens = trans.getResolveTokens();\n   * let promise = tokens.map(token => trans.injector().getAsync(token));\n   * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n   * ```\n   *\n   * Note: Angular 1 users whould use `$q.all()`\n   *\n   * @param pathname resolve context's path name (e.g., `to` or `from`)\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveTokens(pathname = 'to'): any[] {\n    return new ResolveContext(this._treeChanges[pathname]).getTokens();\n  }\n\n  /**\n   * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n   *\n   * Allows a transition hook to dynamically add a Resolvable to this Transition.\n   *\n   * Use the [[Transition.injector]] to retrieve the resolved data in subsequent hooks ([[UIInjector.get]]).\n   *\n   * If a `state` argument is provided, the Resolvable is processed when that state is being entered.\n   * If no `state` is provided then the root state is used.\n   * If the given `state` has already been entered, the Resolvable is processed when any child state is entered.\n   * If no child states will be entered, the Resolvable is processed during the `onFinish` phase of the Transition.\n   *\n   * The `state` argument also scopes the resolved data.\n   * The resolved data is available from the injector for that `state` and any children states.\n   *\n   * #### Example:\n   * ```js\n   * transitionService.onBefore({}, transition => {\n   *   transition.addResolvable({\n   *     token: 'myResolve',\n   *     deps: ['MyService'],\n   *     resolveFn: myService => myService.getData()\n   *   });\n   * });\n   * ```\n   *\n   * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n   * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n   */\n  addResolvable(resolvable: Resolvable|ResolvableLiteral, state: StateOrName = ''): void {\n    resolvable = is(Resolvable)(resolvable) ? resolvable : new Resolvable(resolvable);\n\n    const stateName: string = (typeof state === 'string') ? state : state.name;\n    const topath = this._treeChanges.to;\n    const targetNode = find(topath, node => node.state.name === stateName);\n    const resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([resolvable as Resolvable], targetNode.state);\n  }\n\n  /**\n   * Gets the transition from which this transition was redirected.\n   *\n   * If the current transition is a redirect, this method returns the transition that was redirected.\n   *\n   * #### Example:\n   * ```js\n   * let transitionA = $state.go('A').transition\n   * transitionA.onStart({}, () => $state.target('B'));\n   * $transitions.onSuccess({ to: 'B' }, (trans) => {\n   *   trans.to().name === 'B'; // true\n   *   trans.redirectedFrom() === transitionA; // true\n   * });\n   * ```\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  redirectedFrom(): Transition {\n    return this._options.redirectedFrom || null;\n  }\n\n  /**\n   * Gets the original transition in a redirect chain\n   *\n   * A transition might belong to a long chain of multiple redirects.\n   * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n   *\n   * #### Example:\n   * ```js\n   * // states\n   * registry.register({ name: 'A', redirectTo: 'B' });\n   * registry.register({ name: 'B', redirectTo: 'C' });\n   * registry.register({ name: 'C', redirectTo: 'D' });\n   * registry.register({ name: 'D' });\n   *\n   * let transitionA = $state.go('A').transition\n   *\n   * $transitions.onSuccess({ to: 'D' }, (trans) => {\n   *   trans.to().name === 'D'; // true\n   *   trans.redirectedFrom().to().name === 'C'; // true\n   *   trans.originalTransition() === transitionA; // true\n   *   trans.originalTransition().to().name === 'A'; // true\n   * });\n   * ```\n   *\n   * @returns The original Transition that started a redirect chain\n   */\n  originalTransition(): Transition {\n    const rf = this.redirectedFrom();\n    return (rf && rf.originalTransition()) || this;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname = 'entering', state?: StateObject): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop('views')).filter(identity).reduce(unnestR, []);\n  }\n\n  /**\n   * Return the transition's tree changes\n   *\n   * A transition goes from one state/parameters to another state/parameters.\n   * During a transition, states are entered and/or exited.\n   *\n   * This function returns various branches (paths) which represent the changes to the\n   * active state tree that are caused by the transition.\n   *\n   * @param pathname The name of the tree changes path to get:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   */\n  treeChanges(pathname: string): PathNode[];\n  treeChanges(): TreeChanges;\n  treeChanges(pathname?: string) {\n    return pathname ? this._treeChanges[pathname] : this._treeChanges;\n  }\n\n  /**\n   * Creates a new transition that is a redirection of the current one.\n   *\n   * This transition can be returned from a [[TransitionService]] hook to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @internalapi\n   *\n   * @returns Returns a new [[Transition]] instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let redirects = 1, trans: Transition = this;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((trans = trans.redirectedFrom()) != null) {\n      if (++redirects > 20) throw new Error(`Too many consecutive Transition redirects (20+)`);\n    }\n\n    const redirectOpts: TransitionOptions = { redirectedFrom: this, source: 'redirect' };\n    // If the original transition was caused by URL sync, then use { location: 'replace' }\n    // on the new transition (unless the target state explicitly specifies location: false).\n    // This causes the original url to be replaced with the url for the redirect target\n    // so the original url disappears from the browser history.\n    if (this.options().source === 'url' && targetState.options().location !== false) {\n      redirectOpts.location = 'replace';\n    }\n\n    const newOptions = extend({}, this.options(), targetState.options(), redirectOpts);\n    targetState = targetState.withOptions(newOptions, true);\n\n    const newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    const originalEnteringNodes = this._treeChanges.entering;\n    const redirectEnteringNodes = newTransition._treeChanges.entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const nodeIsReloading = (reloadState: StateObject) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    const matchingEnteringNodes: PathNode[] = PathUtils.matching(redirectEnteringNodes, originalEnteringNodes, PathUtils.nonDynamicParams)\n        .filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n\n  /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    const tc = this._treeChanges;\n\n    /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n    // If user explicitly wants a reload\n    if (this._options.reload) return undefined;\n    // If any states are exiting or entering\n    if (tc.exiting.length || tc.entering.length) return undefined;\n    // If to/from path lengths differ\n    if (tc.to.length !== tc.from.length) return undefined;\n    // If the to/from paths are different\n    const pathsDiffer: boolean = arrayTuples(tc.to, tc.from)\n        .map(tuple => tuple[0].state !== tuple[1].state)\n        .reduce(anyTrueR, false);\n    if (pathsDiffer) return undefined;\n\n    // Find any parameter values that differ\n    const nodeSchemas: Param[][] = tc.to.map((node: PathNode) => node.paramSchema);\n    const [toValues, fromValues] = [tc.to, tc.from].map(path => path.map(x => x.paramValues));\n    const tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    const changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    return !!this._ignoredReason();\n  }\n\n  /** @hidden */\n  _ignoredReason(): 'SameAsCurrent'|'SameAsPending'|undefined {\n    const pending = this.router.globals.transition;\n    const reloadState = this._options.reloadState;\n\n    const same = (pathA, pathB) => {\n      if (pathA.length !== pathB.length) return false;\n      const matching = PathUtils.matching(pathA, pathB);\n      return pathA.length === matching.filter(node => !reloadState || !node.state.includes[reloadState.name]).length;\n    };\n\n    const newTC = this.treeChanges();\n    const pendTC = pending && pending.treeChanges();\n\n    if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting)) return 'SameAsPending';\n    if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to)) return 'SameAsCurrent';\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @internalapi\n   *\n   * @returns a promise for a successful transition.\n   */\n  run(): Promise<any> {\n    const runAllHooks = TransitionHook.runAllHooks;\n\n    // Gets transition hooks array for the given phase\n    const getHooksFor = (phase: TransitionHookPhase) =>\n        this._hookBuilder.buildHooksForPhase(phase);\n\n    // When the chain is complete, then resolve or reject the deferred\n    const transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runAllHooks(getHooksFor(TransitionHookPhase.SUCCESS));\n    };\n\n    const transitionError = (reason: any) => {\n      trace.traceError(reason, this);\n      this.success = false;\n      this._deferred.reject(reason);\n      this._error = reason;\n      runAllHooks(getHooksFor(TransitionHookPhase.ERROR));\n    };\n\n    const runTransition = () => {\n      // Wait to build the RUN hook chain until the BEFORE hooks are done\n      // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n      const allRunHooks = getHooksFor(TransitionHookPhase.RUN);\n      const done = () => services.$q.when(undefined);\n      return TransitionHook.invokeHooks(allRunHooks, done);\n    };\n\n    const startTransition = () => {\n      const globals = this.router.globals;\n\n      globals.lastStartedTransitionId = this.$id;\n      globals.transition = this;\n      globals.transitionHistory.enqueue(this);\n\n      trace.traceTransitionStart(this);\n\n      return services.$q.when(undefined);\n    };\n\n    const allBeforeHooks = getHooksFor(TransitionHookPhase.BEFORE);\n    TransitionHook.invokeHooks(allBeforeHooks, startTransition)\n        .then(runTransition)\n        .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n\n  /** Checks if this transition is currently active/running. */\n  isActive = () =>\n      this.router.globals.transition === this;\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error() || this.success !== undefined;\n  }\n\n  /**\n   * Aborts this transition\n   *\n   * Imperative API to abort a Transition.\n   * This only applies to Transitions that are not yet complete.\n   */\n  abort() {\n    // Do not set flag if the transition is already complete\n    if (isUndefined(this.success))  {\n      this._aborted = true;\n    }\n  }\n\n  /**\n   * The Transition error reason.\n   *\n   * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n   * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n   *\n   * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n   */\n  error() {\n    const state: StateObject = this.$to();\n\n    if (state.self.abstract)\n      return `Cannot transition to abstract state '${state.name}'`;\n\n    const paramDefs = state.parameters(), values = this.params();\n    const invalidParams = paramDefs.filter(param => !param.validates(values[param.id]));\n    if (invalidParams.length) {\n      return `Param values not valid for state '${state.name}'. Invalid params: [ ${invalidParams.map(param => param.id).join(', ')} ]`;\n    }\n\n    if (this.success === false)\n      return this._error;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString () {\n    const fromStateOrName = this.from();\n    const toStateOrName = this.to();\n\n    const avoidEmptyHash = (params: RawParams) =>\n      (params['#'] !== null && params['#'] !== undefined) ? params : omit(params, ['#']);\n\n    // (X) means the to state is invalid.\n    const id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = stringify(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n        toValid = this.valid() ? '' : '(X) ',\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = stringify(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n",
    "/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_strings\n */ /** */\n\nimport { isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { IInjectable, identity, Obj, tail, pushR } from './common';\nimport { pattern, is, not, val, invoke } from './hof';\nimport { Transition } from '../transition/transition';\nimport { Resolvable } from '../resolve/resolvable';\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + '...';\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += ' ';\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n      .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, $1 => '-' + $1.toLowerCase()); // replace rest\n}\n\nfunction _toJson(obj: Obj) {\n  return JSON.stringify(obj);\n}\n\nfunction _fromJson(json: string) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n\n\nfunction promiseToString(p: Promise<any>) {\n  return `Promise(${JSON.stringify(p)})`;\n}\n\nexport function functionToString(fn: Function) {\n  const fnStr = fnToString(fn);\n  const namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  const toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  const fnName = fn['name'] || '';\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  const _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || 'undefined';\n}\n\nlet stringifyPatternFn: (val: any) => string = null;\nconst stringifyPattern = function(value: any) {\n  const isRejection = Rejection.isRejectionPromise;\n\n  stringifyPatternFn = <any> stringifyPatternFn || pattern([\n    [not(isDefined),  val('undefined')],\n    [isNull,          val('null')],\n    [isPromise,       val('[Promise]')],\n    [isRejection,     (x: any) => x._transitionRejection.toString()],\n    [is(Rejection),   invoke('toString')],\n    [is(Transition),  invoke('toString')],\n    [is(Resolvable),  invoke('toString')],\n    [isInjectable,    functionToString],\n    [val(true),       identity],\n  ]);\n\n  return stringifyPatternFn(value);\n};\n\nexport function stringify(o: any) {\n  const seen: any[] = [];\n\n  function format(value: any) {\n    if (isObject(value)) {\n      if (seen.indexOf(value) !== -1) return '[circular ref]';\n      seen.push(value);\n    }\n    return stringifyPattern(value);\n  }\n\n  return JSON.stringify(o, (key, value) => format(value)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string): string[] => {\n  if (!str) return ['', ''];\n  const idx = str.indexOf(char);\n  if (idx === -1) return [str, ''];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\nexport const hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport const stripLastPathElement = (str: string) => str.replace(/\\/[^/]*$/, '');\nexport const splitHash = beforeAfterSubstr('#');\nexport const splitQuery = beforeAfterSubstr('?');\nexport const splitEqual = beforeAfterSubstr('=');\nexport const trimHashVal = (str: string) => str ? str.replace(/^#/, '') : '';\n\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nexport function splitOnDelim(delim: string) {\n  const re = new RegExp('(' + delim + ')', 'g');\n  return (str: string) =>\n      str.split(re).filter(identity);\n}\n\n\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nexport function joinNeighborsR(acc: any[], x: any) {\n  if (isString(tail(acc)) && isString(x))\n    return acc.slice(0, -1).concat(tail(acc) + x);\n  return pushR(acc, x);\n}\n\n",
    "/**\n * @coreapi\n * @module params\n */\n/** */\nimport { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypeDefinition } from './interface';\n\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n */\nexport class ParamTypes {\n  /**\n   * Built-in parameter type: `string`\n   *\n   * This parameter type coerces values to strings.\n   * It matches anything (`new RegExp(\".*\")`) in the URL\n   */\n  static string: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `path`\n   *\n   * This parameter type is the default type for path parameters.\n   * A path parameter is any parameter declared in the path portion of a url\n   *\n   * - `/foo/:param1/:param2`: two path parameters\n   *\n   * This parameter type behaves exactly like the [[string]] type with one exception.\n   * When matching parameter values in the URL, the `path` type does not match forward slashes `/`.\n   *\n   * #### Angular 1 note:\n   * In ng1, this type is overridden with one that pre-encodes slashes as `~2F` instead of `%2F`.\n   * For more details about this angular 1 behavior, see: https://github.com/angular-ui/ui-router/issues/2598\n   */\n  static path: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `query`\n   *\n   * This parameter type is the default type for query/search parameters.\n   * It behaves the same as the [[string]] parameter type.\n   *\n   * A query parameter is any parameter declared in the query/search portion of a url\n   *\n   * - `/bar?param2`: a query parameter\n   */\n  static query: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `hash`\n   *\n   * This parameter type is used for the `#` parameter (the hash)\n   * It behaves the same as the [[string]] parameter type.\n   * @coreapi\n   */\n  static hash: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `int`\n   *\n   * This parameter type serializes javascript integers (`number`s which represent an integer) to the URL.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'user',\n   *   url: '/user/{id:int}'\n   * });\n   * ```\n   * ```js\n   * $state.go('user', { id: 1298547 });\n   * ```\n   *\n   * The URL will serialize to: `/user/1298547`.\n   *\n   * When the parameter value is read, it will be the `number` `1298547`, not the string `\"1298547\"`.\n   */\n  static int: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `bool`\n   *\n   * This parameter type serializes `true`/`false` as `1`/`0`\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'inbox',\n   *   url: '/inbox?{unread:bool}'\n   * });\n   * ```\n   * ```js\n   * $state.go('inbox', { unread: true });\n   * ```\n   *\n   * The URL will serialize to: `/inbox?unread=1`.\n   *\n   * Conversely, if the url is `/inbox?unread=0`, the value of the `unread` parameter will be a `false`.\n   */\n  static bool: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `date`\n   *\n   * This parameter type can be used to serialize Javascript dates as parameter values.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'search',\n   *   url: '/search?{start:date}'\n   * });\n   * ```\n   * ```js\n   * $state.go('search', { start: new Date(2000, 0, 1) });\n   * ```\n   *\n   * The URL will serialize to: `/search?start=2000-01-01`.\n   *\n   * Conversely, if the url is `/search?start=2016-12-25`, the value of the `start` parameter will be a `Date` object where:\n   *\n   * - `date.getFullYear() === 2016`\n   * - `date.getMonth() === 11` (month is 0-based)\n   * - `date.getDate() === 25`\n   */\n  static date: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `json`\n   *\n   * This parameter type can be used to serialize javascript objects into the URL using JSON serialization.\n   *\n   * #### Example:\n   * This example serializes an plain javascript object to the URL\n   * ```js\n   * .state({\n   *   name: 'map',\n   *   url: '/map/{coords:json}'\n   * });\n   * ```\n   * ```js\n   * $state.go('map', { coords: { x: 10399.2, y: 49071 });\n   * ```\n   *\n   * The URL will serialize to: `/map/%7B%22x%22%3A10399.2%2C%22y%22%3A49071%7D`\n   */\n  static json: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `any`\n   *\n   * This parameter type is used by default for url-less parameters (parameters that do not appear in the URL).\n   * This type does not encode or decode.\n   * It is compared using a deep `equals` comparison.\n   *\n   * #### Example:\n   * This example defines a non-url parameter on a [[StateDeclaration]].\n   * ```js\n   * .state({\n   *   name: 'new',\n   *   url: '/new',\n   *   params: {\n   *     inrepyto: null\n   *   }\n   * });\n   * ```\n   * ```js\n   * $state.go('new', { inreplyto: currentMessage });\n   * ```\n   */\n  static any: ParamTypeDefinition;\n\n\n  /** @hidden */\n  types: any;\n  /** @hidden */\n  enqueue = true;\n  /** @hidden */\n  typeQueue: any[] = [];\n\n  /** @internalapi */\n  private defaultTypes: any = pick(ParamTypes.prototype, ['hash', 'string', 'query', 'path', 'int', 'bool', 'date', 'json', 'any']);\n\n  /** @internalapi */\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) =>\n        new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.types = {};\n  }\n\n  /**\n   * Registers a parameter type\n   *\n   * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  }\n\n  /** @internalapi */\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      const type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\n/** @hidden */\nfunction initDefaultTypes() {\n\n  const makeDefaultType = (def) => {\n    const valToString = (val: any) =>\n        val != null ? val.toString() : val;\n\n    const defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      // tslint:disable-next-line:triple-equals\n      equals: (a: any, b: any) => a == b, // allow coersion for null/undefined/\"\"\n    };\n\n    return extend({}, defaultTypeBase, def) as ParamTypeDefinition;\n  };\n\n  // Default Parameter Type Definitions\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n\n    path: makeDefaultType({\n      pattern: /[^/]*/,\n    }),\n\n    query: makeDefaultType({}),\n\n    hash: makeDefaultType({\n      inherit: false,\n    }),\n\n    int: makeDefaultType({\n      decode: (val: string) => parseInt(val, 10),\n      is: function(val: any) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/,\n    }),\n\n    bool: makeDefaultType({\n      encode: (val: any) => val && 1 || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/,\n    }),\n\n    date: makeDefaultType({\n      encode: function(val: any) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2),\n        ].join('-');\n      },\n      decode: function(val: string) {\n        if (this.is(val)) return <any> val as Date;\n        const match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true);\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/,\n    }),\n\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/,\n    }),\n\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: () => true,\n      equals: equals,\n    }),\n  });\n}\n\ninitDefaultTypes();\n\n",
    "/**\n * @coreapi\n * @module params\n */\n/** */\nimport { extend, ancestors, Obj } from '../common/common';\nimport { StateObject } from '../state/stateObject';\n\n/** @internalapi */\nexport class StateParams {\n  [key: string]: any;\n\n  constructor(params: Obj = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams: Obj, $current: StateObject, $to: StateObject) {\n    let parentParams: string[];\n    const parents = ancestors($current, $to),\n        inherited: Obj = {},\n        inheritList: string[] = [];\n\n    for (const i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (const j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  }\n}\n\n",
    "/** @module state */ /** for typedoc */\nimport { Obj, omit, noop, extend, inherit, values, applyPairs, tail, mapObj, identity } from '../common/common';\nimport { isDefined, isFunction, isString, isArray } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { prop, pattern, is, pipe, val } from '../common/hof';\nimport { StateDeclaration } from './interface';\n\nimport { StateObject } from './stateObject';\nimport { StateMatcher } from './stateMatcher';\nimport { Param } from '../params/param';\nimport { UrlMatcherFactory } from '../url/urlMatcherFactory';\nimport { UrlMatcher } from '../url/urlMatcher';\nimport { Resolvable } from '../resolve/resolvable';\nimport { services } from '../common/coreservices';\nimport { ResolvePolicy } from '../resolve/interface';\nimport { ParamFactory } from '../url/interface';\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  const root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: StateObject, parent?: BuilderFunction) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  name: BuilderFunction[];\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n\n\nfunction nameBuilder(state: StateObject) {\n  return state.name;\n}\n\nfunction selfBuilder(state: StateObject) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n\nfunction dataBuilder(state: StateObject) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst getUrlBuilder = ($urlMatcherFactoryProvider: UrlMatcherFactory, root: () => StateObject) =>\nfunction urlBuilder(state: StateObject) {\n  const stateDec: StateDeclaration = <any> state;\n\n  // For future states, i.e., states whose name ends with `.**`,\n  // match anything that starts with the url prefix\n  if (stateDec && stateDec.url && stateDec.name && stateDec.name.match(/\\.\\*\\*$/)) {\n    stateDec.url += '{remainder:any}'; // match any path (.*)\n  }\n\n  const parsed = parseUrl(stateDec.url), parent = state.parent;\n  const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n    params: state.params || {},\n    paramMap: function (paramConfig: any, isSearch: boolean) {\n      if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, { dynamic: true });\n      return paramConfig;\n    },\n  });\n\n  if (!url) return null;\n  if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n  return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher> url);\n};\n\nconst getNavigableBuilder = (isRoot: (state: StateObject) => boolean) =>\nfunction navigableBuilder(state: StateObject) {\n  return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n};\n\nconst getParamsBuilder = (paramFactory: ParamFactory) =>\nfunction paramsBuilder(state: StateObject): { [key: string]: Param } {\n  const makeConfigParam = (config: any, id: string) => paramFactory.fromConfig(id, null, config);\n  const urlParams: Param[] = (state.url && state.url.parameters({ inherit: false })) || [];\n  const nonUrlParams: Param[] = values(mapObj(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n  return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n};\n\nfunction pathBuilder(state: StateObject) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n\nfunction includesBuilder(state: StateObject) {\n  const includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state: StateObject): Resolvable[] {\n  interface Tuple { token: any, val: any, deps: any[], policy: ResolvePolicy }\n\n  /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n  const objects2Tuples    = (resolveObj: Obj, resolvePolicies: { [key: string]: ResolvePolicy }) =>\n      Object.keys(resolveObj || {}).map(token => ({ token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }));\n\n  /** fetch DI annotations from a function or ng1-style array */\n  const annotate          = (fn: Function)  => {\n    const $injector = services.$injector;\n    // ng1 doesn't have an $injector until runtime.\n    // If the $injector doesn't exist, use \"deferred\" literal as a\n    // marker indicating they should be annotated when runtime starts\n    return fn['$inject'] || ($injector && $injector.annotate(fn, $injector.strictDi)) || <any> 'deferred';\n  };\n\n  /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n  const isResolveLiteral  = (obj: any) => !!(obj.token && obj.resolveFn);\n\n  /** true if the object looks like a provide literal, or a ng2 Provider */\n  const isLikeNg2Provider = (obj: any) => !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n\n  /** true if the object looks like a tuple from obj2Tuples */\n  const isTupleFromObj    = (obj: any) => !!(obj && obj.val && (isString(obj.val) || isArray(obj.val)  || isFunction(obj.val)));\n\n  /** extracts the token from a Provider or provide literal */\n  const getToken          = (p: any) => p.provide || p.token;\n\n  /** Given a literal resolve or provider object, returns a Resolvable */\n  const literal2Resolvable = pattern([\n    [prop('resolveFn'),   p => new Resolvable(getToken(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'),  p => new Resolvable(getToken(p), p.useFactory, (p.deps || p.dependencies), p.policy)],\n    [prop('useClass'),    p => new Resolvable(getToken(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'),    p => new Resolvable(getToken(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), p => new Resolvable(getToken(p), identity, [p.useExisting], p.policy)],\n  ]);\n\n  const tuple2Resolvable = pattern([\n    [pipe(prop('val'), isString),   (tuple: Tuple) => new Resolvable(tuple.token, identity, [ tuple.val ], tuple.policy)],\n    [pipe(prop('val'), isArray),    (tuple: Tuple) => new Resolvable(tuple.token, tail(<any[]> tuple.val), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop('val'), isFunction), (tuple: Tuple) => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  const item2Resolvable = <(obj: any) => Resolvable> pattern([\n    [is(Resolvable),                (r: Resolvable) => r],\n    [isResolveLiteral,              literal2Resolvable],\n    [isLikeNg2Provider,             literal2Resolvable],\n    [isTupleFromObj,                tuple2Resolvable],\n    [val(true),                     (obj: any) => { throw new Error('Invalid resolve value: ' + stringify(obj)); }],\n  ]);\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  const decl = state.resolve;\n  const items: any[] = isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n  return items.map(item2Resolvable);\n}\n\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[StateObject]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[StateObject]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, urlMatcherFactory: UrlMatcherFactory) {\n    const self = this;\n\n    const root = () => matcher.find('');\n    const isRoot = (state: StateObject) => state.name === '';\n\n    function parentBuilder(state: StateObject) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      name: [ nameBuilder ],\n      self: [ selfBuilder ],\n      parent: [ parentBuilder ],\n      data: [ dataBuilder ],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [ getUrlBuilder(urlMatcherFactory, root) ],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [ getNavigableBuilder(isRoot) ],\n      params: [ getParamsBuilder(urlMatcherFactory.paramFactory) ],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [ pathBuilder ],\n      // Speed up $state.includes() as it's used a lot\n      includes: [ includesBuilder ],\n      resolvables: [ resolvablesBuilder ],\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n   *\n   * @param name The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(name: string, fn: BuilderFunction): (BuilderFunction|BuilderFunction[]|Function) {\n    const builders = this.builders;\n    const array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: StateObject): StateObject {\n    const { matcher, builders } = this;\n    const parent = this.parentName(state);\n\n    if (parent && !matcher.find(parent, undefined, false)) {\n      return null;\n    }\n\n    for (const key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      const chain = builders[key].reduce((parentFn: BuilderFunction, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state: StateObject) {\n    // name = 'foo.bar.baz.**'\n    const name = state.name || '';\n    // segments = ['foo', 'bar', 'baz', '.**']\n    const segments = name.split('.');\n    // segments = ['foo', 'bar', 'baz']\n    const lastSegment = segments.pop();\n    // segments = ['foo', 'bar'] (ignore .** segment for future states)\n    if (lastSegment === '**') segments.pop();\n\n    if (segments.length) {\n      if (state.parent) {\n        throw new Error(`States that specify the 'parent:' property should not have a '.' in their name (${name})`);\n      }\n\n      // 'foo.bar'\n      return segments.join('.');\n    }\n\n    if (!state.parent) return '';\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state: StateObject) {\n    const name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    const parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + '.' + name : name;\n  }\n}\n",
    "/** @module state */ /** for typedoc */\nimport { isString } from '../common/predicates';\nimport { StateOrName } from './interface';\nimport { StateObject } from './stateObject';\nimport { values } from '../common/common';\n\nexport class StateMatcher {\n  constructor (private _states: { [key: string]: StateObject }) { }\n\n  isRelative(stateName: string) {\n    stateName = stateName || '';\n    return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;\n  }\n\n\n  find(stateOrName: StateOrName, base?: StateOrName, matchGlob = true): StateObject {\n    if (!stateOrName && stateOrName !== '') return undefined;\n    const isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    const state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    } else if (isStr && matchGlob) {\n      const _states = values(this._states);\n      const matches = _states.filter(_state =>\n          _state.__stateObjectCache.nameGlob &&\n          _state.__stateObjectCache.nameGlob.matches(name),\n      );\n\n      if (matches.length > 1) {\n        // tslint:disable-next-line:no-console\n        console.log(`stateMatcher.find: Found multiple matches for ${name} using glob: `, matches.map(match => match.name));\n      }\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n\n    const baseState: StateObject = this.find(base);\n\n    const splitName = name.split('.');\n    const pathLength = splitName.length;\n    let i = 0, current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === '' && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === '^') {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    const relName = splitName.slice(i).join('.');\n    return current.name + (current.name && relName ? '.' : '') + relName;\n  }\n}\n",
    "/** @module state */ /** for typedoc */\nimport { inArray } from '../common/common';\nimport { isString } from '../common/predicates';\nimport { StateDeclaration, _StateDeclaration } from './interface';\nimport { StateObject } from './stateObject';\nimport { StateBuilder } from './stateBuilder';\nimport { StateRegistryListener, StateRegistry } from './stateRegistry';\nimport { Disposable } from '../interface';\nimport { UrlRouter } from '../url/urlRouter';\nimport { prop } from '../common/hof';\nimport { StateMatcher } from './stateMatcher';\n\n/** @internalapi */\nexport class StateQueueManager implements Disposable {\n  queue: StateObject[];\n  matcher: StateMatcher;\n\n  constructor(\n      private $registry: StateRegistry,\n      private $urlRouter: UrlRouter,\n      public states: { [key: string]: StateObject; },\n      public builder: StateBuilder,\n      public listeners: StateRegistryListener[]) {\n    this.queue = [];\n    this.matcher = $registry.matcher;\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.queue = [];\n  }\n\n  register(stateDecl: _StateDeclaration) {\n    const queue = this.queue;\n    const state = StateObject.create(stateDecl);\n    const name = state.name;\n\n    if (!isString(name)) throw new Error('State must have a valid name');\n    if (this.states.hasOwnProperty(name) || inArray(queue.map(prop('name')), name))\n      throw new Error(`State '${name}' is already defined`);\n\n    queue.push(state);\n    this.flush();\n\n    return state;\n  }\n\n  flush() {\n    const { queue, states, builder } = this;\n    const registered: StateObject[] = [], // states that got registered\n        orphans: StateObject[] = [], // states that don't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n    const getState = (name) =>\n        this.states.hasOwnProperty(name) && this.states[name];\n\n    while (queue.length > 0) {\n      const state: StateObject = queue.shift();\n      const name = state.name;\n      const result: StateObject = builder.build(state);\n      const orphanIdx: number = orphans.indexOf(state);\n\n      if (result) {\n        const existingState = getState(name);\n        if (existingState && existingState.name === name) {\n          throw new Error(`State '${name}' is already defined`);\n        }\n\n        const existingFutureState = getState(name + '.**');\n        if (existingFutureState) {\n          // Remove future state of the same name\n          this.$registry.deregister(existingFutureState);\n        }\n\n        states[name] = state;\n        this.attachRoute(state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        registered.push(state);\n        continue;\n      }\n\n      const prev = previousQueueLength[name];\n      previousQueueLength[name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${name}'`);\n        queue.push(state);\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n\n    if (registered.length) {\n      this.listeners.forEach(listener => listener('registered', registered.map(s => s.self)));\n    }\n\n    return states;\n  }\n\n  attachRoute(state: StateObject) {\n    if (state.abstract || !state.url) return;\n\n    this.$urlRouter.rule(this.$urlRouter.urlRuleFactory.create(state));\n  }\n}\n",
    "/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\nimport { StateObject } from './stateObject';\nimport { StateMatcher } from './stateMatcher';\nimport { StateBuilder } from './stateBuilder';\nimport { StateQueueManager } from './stateQueueManager';\nimport { StateDeclaration, _StateDeclaration } from './interface';\nimport { BuilderFunction } from './stateBuilder';\nimport { StateOrName } from './interface';\nimport { removeFrom } from '../common/common';\nimport { UIRouter } from '../router';\nimport { propEq } from '../common/hof';\n\n/**\n * The signature for the callback function provided to [[StateRegistry.onStatesChanged]].\n *\n * This callback receives two parameters:\n *\n * @param event a string; either \"registered\" or \"deregistered\"\n * @param states the list of [[StateDeclaration]]s that were registered (or deregistered).\n */\nexport type StateRegistryListener = (event: 'registered'|'deregistered', states: StateDeclaration[]) => void;\n\nexport class StateRegistry {\n  private _root: StateObject;\n  private states: { [key: string]: StateObject } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  listeners: StateRegistryListener[] = [];\n\n  /** @internalapi */\n  constructor(private _router: UIRouter) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, _router.urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this, _router.urlRouter, this.states, this.builder, this.listeners);\n    this._registerRoot();\n  }\n\n  /** @internalapi */\n  private _registerRoot() {\n    const rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true },\n      },\n      abstract: true,\n    };\n\n    const _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.stateQueue.dispose();\n    this.listeners = [];\n    this.get().forEach(state => this.get(state) && this.deregister(state));\n  }\n\n  /**\n   * Listen for a State Registry events\n   *\n   * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n   *\n   * #### Example:\n   * ```js\n   * let allStates = registry.get();\n   *\n   * // Later, invoke deregisterFn() to remove the listener\n   * let deregisterFn = registry.onStatesChanged((event, states) => {\n   *   switch(event) {\n   *     case: 'registered':\n   *       states.forEach(state => allStates.push(state));\n   *       break;\n   *     case: 'deregistered':\n   *       states.forEach(state => {\n   *         let idx = allStates.indexOf(state);\n   *         if (idx !== -1) allStates.splice(idx, 1);\n   *       });\n   *       break;\n   *   }\n   * });\n   * ```\n   *\n   * @param listener a callback function invoked when the registered states changes.\n   *        The function receives two parameters, `event` and `state`.\n   *        See [[StateRegistryListener]]\n   * @return a function that deregisters the listener\n   */\n  onStatesChanged(listener: StateRegistryListener): () => void {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  }\n\n  /**\n   * Gets the implicit root state\n   *\n   * Gets the root of the state tree.\n   * The root state is implicitly created by UI-Router.\n   * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n   *\n   * @return the root [[StateObject]]\n   */\n  root() {\n    return this._root;\n  }\n\n  /**\n   * Adds a state to the registry\n   *\n   * Registers a [[StateDeclaration]] or queues it for registration.\n   *\n   * Note: a state will be queued if the state's parent isn't yet registered.\n   *\n   * @param stateDefinition the definition of the state to register.\n   * @returns the internal [[StateObject]] object.\n   *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n   *          If the state was only queued, then the object is not fully built.\n   */\n  register(stateDefinition: _StateDeclaration): StateObject {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  /** @hidden */\n  private _deregisterTree(state: StateObject) {\n    const all = this.get().map(s => s.$$state());\n    const getChildren = (states: StateObject[]) => {\n      const _children = all.filter(s => states.indexOf(s.parent) !== -1);\n      return _children.length === 0 ? _children : _children.concat(getChildren(_children));\n    };\n\n    const children = getChildren([state]);\n    const deregistered: StateObject[] = [state].concat(children).reverse();\n\n    deregistered.forEach(_state => {\n      const $ur = this._router.urlRouter;\n      // Remove URL rule\n      $ur.rules().filter(propEq('state', _state)).forEach($ur.removeRule.bind($ur));\n      // Remove state from registry\n      delete this.states[_state.name];\n    });\n\n    return deregistered;\n  }\n\n  /**\n   * Removes a state from the registry\n   *\n   * This removes a state from the registry.\n   * If the state has children, they are are also removed from the registry.\n   *\n   * @param stateOrName the state's name or object representation\n   * @returns {StateObject[]} a list of removed states\n   */\n  deregister(stateOrName: StateOrName) {\n    const _state = this.get(stateOrName);\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n    const deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach(listener => listener('deregistered', deregisteredStates.map(s => s.self)));\n    return deregisteredStates;\n  }\n\n  /**\n   * Gets all registered states\n   *\n   * Calling this method with no arguments will return a list of all the states that are currently registered.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @return a list of [[StateDeclaration]]s\n   */\n  get(): StateDeclaration[];\n\n  /**\n   * Gets a registered state\n   *\n   * Given a state or a name, finds and returns the [[StateDeclaration]] from the registry.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @param stateOrName either the name of a state, or a state object.\n   * @param base the base state to use when stateOrName is relative.\n   * @return a registered [[StateDeclaration]] that matched the `stateOrName`, or null if the state isn't registered.\n   */\n  get(stateOrName: StateOrName, base?: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0)\n      return <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self);\n    const found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n",
    "/**\n * @coreapi\n * @module url\n */\n/** for typedoc */\nimport {\n  map, defaults, inherit, identity, unnest, tail, find, Obj, pairs, allTrueR, unnestR, arrayTuples,\n} from '../common/common';\nimport { prop, propEq } from '../common/hof';\nimport { isArray, isString, isDefined } from '../common/predicates';\nimport { Param, DefType } from '../params/param';\nimport { ParamTypes } from '../params/paramTypes';\nimport { RawParams } from '../params/interface';\nimport { ParamFactory } from './interface';\nimport { joinNeighborsR, splitOnDelim } from '../common/strings';\n\n/** @hidden */\nfunction quoteRegExp(str: any, param?: any) {\n  let surroundPattern = ['', ''], result = str.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, '\\\\$&');\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\n/** @hidden */\nconst memoizeTo = (obj: Obj, _prop: string, fn: Function) =>\n    obj[_prop] = obj[_prop] || fn();\n\n/** @hidden */\nconst splitOnSlash = splitOnDelim('/');\n\n/** @hidden */\ninterface UrlMatcherCache {\n  segments?: any[];\n  weights?: number[];\n  path?: UrlMatcher[];\n  parent?: UrlMatcher;\n  pattern?: RegExp;\n}\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @hidden */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @hidden */\n  private _cache: UrlMatcherCache = { path: [this] };\n  /** @hidden */\n  private _children: UrlMatcher[] = [];\n  /** @hidden */\n  private _params:   Param[]      = [];\n  /** @hidden */\n  private _segments: string[]     = [];\n  /** @hidden */\n  private _compiled: string[]     = [];\n\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /** @hidden */\n  static encodeDashes(str: string) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    const staticSegments = matcher._segments;\n    const pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined))\n      .reduce(unnestR, [])\n      .filter(x => x !== '' && isDefined(x));\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n\n  /**\n   * Compare two UrlMatchers\n   *\n   * This comparison function converts a UrlMatcher into static and dynamic path segments.\n   * Each static path segment is a static string between a path separator (slash character).\n   * Each dynamic segment is a path parameter.\n   *\n   * The comparison function sorts static segments before dynamic ones.\n   */\n  static compare(a: UrlMatcher, b: UrlMatcher): number {\n    /**\n     * Turn a UrlMatcher and all its parent matchers into an array\n     * of slash literals '/', string literals, and Param objects\n     *\n     * This example matcher matches strings like \"/foo/:param/tail\":\n     * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n     * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n     *\n     * Caches the result as `matcher._cache.segments`\n     */\n    const segments = (matcher: UrlMatcher) =>\n      matcher._cache.segments = matcher._cache.segments ||\n        matcher._cache.path.map(UrlMatcher.pathSegmentsAndParams)\n          .reduce(unnestR, [])\n          .reduce(joinNeighborsR, [])\n          .map(x => isString(x) ? splitOnSlash(x) : x)\n          .reduce(unnestR, []);\n\n    /**\n     * Gets the sort weight for each segment of a UrlMatcher\n     *\n     * Caches the result as `matcher._cache.weights`\n     */\n    const weights = (matcher: UrlMatcher) =>\n      matcher._cache.weights = matcher._cache.weights ||\n        segments(matcher).map(segment => {\n          // Sort slashes first, then static strings, the Params\n          if (segment === '/') return 1;\n          if (isString(segment)) return 2;\n          if (segment instanceof Param) return 3;\n        });\n\n    /**\n     * Pads shorter array in-place (mutates)\n     */\n    const padArrays = (l: any[], r: any[], padVal: any) => {\n      const len = Math.max(l.length, r.length);\n      while (l.length < len) l.push(padVal);\n      while (r.length < len) r.push(padVal);\n    };\n\n    const weightsA = weights(a), weightsB = weights(b);\n    padArrays(weightsA, weightsB, 0);\n\n    const _pairs = arrayTuples(weightsA, weightsB);\n    let cmp, i;\n\n    for (i = 0; i < _pairs.length; i++) {\n      cmp = _pairs[i][0] - _pairs[i][1];\n      if (cmp !== 0) return cmp;\n    }\n\n    return 0;\n  }\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param paramTypes The [[ParamTypes]] registry\n   * @param config  A configuration object\n   * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n   * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n   */\n  constructor(pattern: string, paramTypes: ParamTypes, paramFactory: ParamFactory, public config?: any) {\n    this.pattern = pattern;\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity,\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    const placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    const searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    const patterns: any[][] = [];\n    let last = 0, matchArray: RegExpExecArray;\n\n    const checkParamErrors = (id: string) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m: RegExpExecArray, isSearch: boolean) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      const id: string = m[2] || m[3];\n      const regexp: string = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\\\s\\\\S]*' : null);\n\n      const makeRegexpType = (str) => inherit(paramTypes.type(isSearch ? 'query' : 'path'), {\n        pattern: new RegExp(str, this.config.caseInsensitive ? 'i' : undefined),\n      });\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp),\n      };\n    };\n\n    let p: any, segment: string;\n\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((matchArray = placeholder.exec(pattern))) {\n      p = matchDetails(matchArray, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(paramFactory.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    const i = segment.indexOf('?');\n\n    if (i >= 0) {\n      const search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        // tslint:disable-next-line:no-conditional-assignment\n        while ((matchArray = searchPlaceholder.exec(search))) {\n          p = matchDetails(matchArray, true);\n          checkParamErrors(p.id);\n          this._params.push(paramFactory.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n    this._compiled = patterns.map(_pattern => quoteRegExp.apply(null, _pattern)).concat(quoteRegExp(segment));\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    url._cache = {\n      path: this._cache.path.concat(url),\n      parent: this,\n      pattern: null,\n    };\n    return url;\n  }\n\n  /** @hidden */\n  isRoot(): boolean {\n    return this._cache.path[0] === this;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    const match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$',\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    // options = defaults(options, { isolate: false });\n\n    const allParams:    Param[] = this.parameters(),\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()),\n        searchParams: Param[] = allParams.filter(param => param.isSearch()),\n        nPathSegments  = this._cache.path.map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n        values: RawParams = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(paramVal: string) {\n      const reverseString = (str: string) => str.split('').reverse().join('');\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, '-');\n\n      const split = reverseString(paramVal).split(/-(?!\\\\)/);\n      const allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      const param: Param = pathParams[i];\n      let value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    searchParams.forEach(param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values['#'] = hash;\n\n    return values;\n  }\n\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.map(matcher => matcher._params));\n  }\n\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const findParam = () => {\n      for (const param of this._params) {\n        if (param.id === id) return param;\n      }\n    };\n\n    const parent = this._cache.parent;\n    return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val: any) =>\n        !param || param.validates(val);\n\n    params = params || {};\n\n    // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n    const paramSchema = this.parameters().filter(paramDef => params.hasOwnProperty(paramDef.id));\n    return paramSchema.map(paramDef => validParamVal(paramDef, params[paramDef.id])).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values: RawParams = {}) {\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    const urlMatchers = this._cache.path;\n\n    // Extract all the static segments and Params (processed as ParamDetails)\n    // into an ordered array\n    const pathSegmentsAndParams: Array<string|ParamDetails> = urlMatchers.map(UrlMatcher.pathSegmentsAndParams)\n            .reduce(unnestR, [])\n            .map(x => isString(x) ? x : getDetails(x));\n\n    // Extract the query params into a separate array\n    const queryParams: Array<ParamDetails> = urlMatchers.map(UrlMatcher.queryParams)\n            .reduce(unnestR, [])\n            .map(getDetails);\n\n    const isInvalid = (param: ParamDetails) => param.isValid === false;\n    if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n      return null;\n    }\n\n    /**\n     * Given a Param, applies the parameter value, then returns detailed information about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      const value = param.value(values[param.id]);\n      const isValid = param.validates(value);\n      const isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      const squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      const encoded = param.type.encode(value);\n\n      return { param, value, isValid, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    const pathString = pathSegmentsAndParams.reduce((acc: string, x: string|ParamDetails) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a ParamDetails.\n      const { squash, encoded, param } = x;\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]> encoded, UrlMatcher.encodeDashes).join('-');\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string> encoded);\n    }, '');\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    const queryString = queryParams.map((paramDetails: ParamDetails) => {\n      let { param, squash, encoded, isDefaultValue } = paramDetails;\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [<string> encoded];\n      if (encoded.length === 0) return;\n      if (!param.raw) encoded = map(<string[]> encoded, encodeURIComponent);\n\n      return (<string[]> encoded).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join('&');\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : '') + (values['#'] ? '#' + values['#'] : '');\n  }\n}\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isValid: boolean;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n",
    "/**\n * @internalapi\n * @module url\n */ /** for typedoc */\nimport { forEach, extend } from '../common/common';\nimport { isObject, isDefined, isFunction, isString } from '../common/predicates';\nimport { UrlMatcher } from './urlMatcher';\nimport { Param, DefType } from '../params/param';\nimport { ParamTypes } from '../params/paramTypes';\nimport { ParamTypeDefinition } from '../params/interface';\nimport { Disposable } from '../interface';\nimport { ParamType } from '../params/paramType';\nimport { ParamFactory, UrlMatcherConfig } from './interface';\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactory` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory implements Disposable, UrlMatcherConfig {\n  /** @hidden */ paramTypes = new ParamTypes();\n  /** @hidden */ _isCaseInsensitive = false;\n  /** @hidden */ _isStrictMode = true;\n  /** @hidden */ _defaultSquashPolicy: (boolean|string) = false;\n\n  /** @internalapi Creates a new [[Param]] for a given location (DefType) */\n  paramFactory: ParamFactory = {\n    /** Creates a new [[Param]] from a CONFIG block */\n    fromConfig: (id: string, type: ParamType, config: any) =>\n      new Param(id, type, config, DefType.CONFIG, this),\n\n    /** Creates a new [[Param]] from a url PATH */\n    fromPath: (id: string, type: ParamType, config: any) =>\n      new Param(id, type, config, DefType.PATH, this),\n\n    /** Creates a new [[Param]] from a url SEARCH */\n    fromSearch: (id: string, type: ParamType, config: any) =>\n      new Param(id, type, config, DefType.SEARCH, this),\n  };\n\n  constructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n\n  /** @inheritdoc */\n  caseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n\n  /** @inheritdoc */\n  strictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n\n  /** @inheritdoc */\n  defaultSquashPolicy(value?: (boolean|string)) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n\n  /** @hidden */\n  private _getConfig = (config) =>\n      extend({ strict: this._isStrictMode, caseInsensitive: this._isCaseInsensitive }, config);\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, this.paramTypes, this.paramFactory, this._getConfig(config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any): boolean {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  }\n\n  /**\n   * Creates and registers a custom [[ParamType]] object\n   *\n   * A [[ParamType]] can be used to generate URLs with typed parameters.\n   *\n   * @param name  The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app runtime starts.\n   *        The result of this function should be a [[ParamTypeDefinition]].\n   *        The result is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns - if a type was registered: the [[UrlMatcherFactory]]\n   *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   *\n   * Note: Register custom types *before using them* in a state definition.\n   *\n   * See [[ParamTypeDefinition]] for examples\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    const type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  }\n\n  /** @hidden */\n  $get() {\n    this.paramTypes.enqueue = false;\n    this.paramTypes._flushTypeQueue();\n    return this;\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.paramTypes.dispose();\n  }\n}\n",
    "/**\n * @coreapi\n * @module url\n */ /** */\nimport { UrlMatcher } from './urlMatcher';\nimport { isString, isDefined, isFunction, isState } from '../common/predicates';\nimport { UIRouter } from '../router';\nimport { identity, extend } from '../common/common';\nimport { is, pattern } from '../common/hof';\nimport { StateObject } from '../state/stateObject';\nimport { RawParams } from '../params/interface';\nimport {\n    UrlRule, UrlRuleMatchFn, UrlRuleHandlerFn, UrlRuleType, UrlParts, MatcherUrlRule, StateRule, RegExpRule,\n} from './interface';\n\n/**\n * Creates a [[UrlRule]]\n *\n * Creates a [[UrlRule]] from a:\n *\n * - `string`\n * - [[UrlMatcher]]\n * - `RegExp`\n * - [[StateObject]]\n * @internalapi\n */\nexport class UrlRuleFactory {\n  static isUrlRule = obj =>\n    obj && ['type', 'match', 'handler'].every(key => isDefined(obj[key]));\n\n  constructor(public router: UIRouter) { }\n\n  compile(str: string) {\n    return this.router.urlMatcherFactory.compile(str);\n  }\n\n  create(what: string|UrlMatcher|StateObject|RegExp|UrlRuleMatchFn, handler?: string|UrlRuleHandlerFn): UrlRule {\n    const makeRule = pattern([\n      [isString,       (_what: string)         => makeRule(this.compile(_what))],\n      [is(UrlMatcher), (_what: UrlMatcher)     => this.fromUrlMatcher(_what, handler)],\n      [isState,        (_what: StateObject)    => this.fromState(_what, this.router)],\n      [is(RegExp),     (_what: RegExp)         => this.fromRegExp(_what, handler)],\n      [isFunction,     (_what: UrlRuleMatchFn) => new BaseUrlRule(_what, handler as UrlRuleHandlerFn)],\n    ]);\n\n    const rule = makeRule(what);\n    if (!rule) throw new Error(\"invalid 'what' in when()\");\n    return rule;\n  }\n\n  /**\n   * A UrlRule which matches based on a UrlMatcher\n   *\n   * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n   *\n   * ## Handler as a function\n   *\n   * If `handler` is a function, the function is invoked with:\n   *\n   * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n   * - url: the current Url ([[UrlParts]])\n   * - router: the router object ([[UIRouter]])\n   *\n   * #### Example:\n   * ```js\n   * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n   * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match); // '/home/123/456'\n   * ```\n   *\n   * ## Handler as UrlMatcher\n   *\n   * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n   * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n   * The url is replaced with the result.\n   *\n   * #### Example:\n   * ```js\n   * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n   * var handler = $umf.compile(\"/home/:fooId/:barId\");\n   * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match); // '/home/123/456'\n   * ```\n   */\n  fromUrlMatcher(urlMatcher: UrlMatcher, handler: string|UrlMatcher|UrlRuleHandlerFn): MatcherUrlRule {\n    let _handler: UrlRuleHandlerFn = handler as any;\n    if (isString(handler)) handler = this.router.urlMatcherFactory.compile(handler);\n    if (is(UrlMatcher)(handler)) _handler = (match: RawParams) => (handler as UrlMatcher).format(match);\n\n    function matchUrlParamters(url: UrlParts): RawParams {\n      const params = urlMatcher.exec(url.path, url.search, url.hash);\n      return urlMatcher.validates(params) && params;\n    }\n\n    // Prioritize URLs, lowest to highest:\n    // - Some optional URL parameters, but none matched\n    // - No optional parameters in URL\n    // - Some optional parameters, some matched\n    // - Some optional parameters, all matched\n    function matchPriority(params: RawParams): number {\n      const optional = urlMatcher.parameters().filter(param => param.isOptional);\n      if (!optional.length) return 0.000001;\n      const matched = optional.filter(param => params[param.id]);\n      return matched.length / optional.length;\n    }\n\n    const details = { urlMatcher, matchPriority, type: 'URLMATCHER' };\n    return extend(new BaseUrlRule(matchUrlParamters, _handler), details) as MatcherUrlRule;\n  }\n\n\n  /**\n   * A UrlRule which matches a state by its url\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromState($state.get('foo'), router);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match);\n   * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n   * ```\n   */\n  fromState(state: StateObject, router: UIRouter): StateRule {\n    /**\n     * Handles match by transitioning to matched state\n     *\n     * First checks if the router should start a new transition.\n     * A new transition is not required if the current state's URL\n     * and the new URL are already identical\n     */\n    const handler = (match: RawParams) => {\n      const $state = router.stateService;\n      const globals = router.globals;\n      if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {\n        $state.transitionTo(state, match, { inherit: true, source: 'url' });\n      }\n    };\n\n    const details = { state, type: 'STATE' };\n    return extend(this.fromUrlMatcher(state.url, handler), details) as StateRule;\n  }\n\n  /**\n   * A UrlRule which matches based on a regular expression\n   *\n   * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n   *\n   * ## Handler as a function\n   *\n   * If `handler` is a function, the function is invoked with:\n   *\n   * - regexp match array (from `regexp`)\n   * - url: the current Url ([[UrlParts]])\n   * - router: the router object ([[UIRouter]])\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n   * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n   * var result = rule.handler(match); // '/home/bar'\n   * ```\n   *\n   * ## Handler as string\n   *\n   * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n   * The string is first interpolated using `string.replace()` style pattern.\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n   * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n   * var result = rule.handler(match); // '/home/bar'\n   * ```\n   */\n  fromRegExp(regexp: RegExp, handler: string|UrlRuleHandlerFn): RegExpRule {\n    if (regexp.global || regexp.sticky) throw new Error('Rule RegExp must not be global or sticky');\n\n    /**\n     * If handler is a string, the url will be replaced by the string.\n     * If the string has any String.replace() style variables in it (like `$2`),\n     * they will be replaced by the captures from [[match]]\n     */\n    const redirectUrlTo = (match: RegExpExecArray) =>\n        // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n        (handler as string).replace(/\\$(\\$|\\d{1,2})/, (m, what) =>\n            match[what === '$' ? 0 : Number(what)]);\n\n    const _handler = isString(handler) ? redirectUrlTo : handler;\n\n    const matchParamsFromRegexp = (url: UrlParts): RegExpExecArray =>\n        regexp.exec(url.path);\n\n    const details = { regexp, type: 'REGEXP' };\n    return extend(new BaseUrlRule(matchParamsFromRegexp, _handler), details) as RegExpRule;\n  }\n}\n\n/**\n * A base rule which calls `match`\n *\n * The value from the `match` function is passed through to the `handler`.\n * @internalapi\n */\nexport class BaseUrlRule implements UrlRule {\n  $id: number;\n  priority: number;\n  type: UrlRuleType = 'RAW';\n  handler: UrlRuleHandlerFn;\n  matchPriority = (match) => 0 - this.$id;\n\n  constructor(public match: UrlRuleMatchFn, handler?: UrlRuleHandlerFn) {\n    this.handler = handler || identity;\n  }\n}\n",
    "/**\n * @internalapi\n * @module url\n */\n/** for typedoc */\nimport { createProxyFunctions, extend, removeFrom } from '../common/common';\nimport { isDefined, isFunction, isString } from '../common/predicates';\nimport { UrlMatcher } from './urlMatcher';\nimport { RawParams } from '../params/interface';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { is, pattern, val } from '../common/hof';\nimport { UrlRuleFactory } from './urlRule';\nimport { TargetState } from '../state/targetState';\nimport { MatcherUrlRule, MatchResult, UrlParts, UrlRule, UrlRuleHandlerFn, UrlRuleMatchFn, UrlRulesApi, UrlSyncApi } from './interface';\nimport { TargetStateDef } from '../state/interface';\nimport { stripLastPathElement } from '../common';\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean, baseHref: string): string {\n  if (baseHref === '/') return url;\n  if (isHtml5) return stripLastPathElement(baseHref) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n/** @hidden */\nconst prioritySort = (a: UrlRule, b: UrlRule) =>\n  (b.priority || 0) - (a.priority || 0);\n\n/** @hidden */\nconst typeSort = (a: UrlRule, b: UrlRule) => {\n  const weights = { 'STATE': 4, 'URLMATCHER': 4, 'REGEXP': 3, 'RAW': 2, 'OTHER': 1 };\n  return (weights[a.type] || 0) - (weights[b.type] || 0);\n};\n\n/** @hidden */\nconst urlMatcherSort = (a: MatcherUrlRule, b: MatcherUrlRule) =>\n  !a.urlMatcher || !b.urlMatcher ? 0 : UrlMatcher.compare(a.urlMatcher, b.urlMatcher);\n\n/** @hidden */\nconst idSort = (a: UrlRule, b: UrlRule) => {\n  // Identically sorted STATE and URLMATCHER best rule will be chosen by `matchPriority` after each rule matches the URL\n  const useMatchPriority = { STATE: true, URLMATCHER: true };\n  const equal = useMatchPriority[a.type] && useMatchPriority[b.type];\n  return equal ? 0 : (a.$id || 0) - (b.$id || 0);\n};\n\n/**\n * Default rule priority sorting function.\n *\n * Sorts rules by:\n *\n * - Explicit priority (set rule priority using [[UrlRulesApi.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Rule registration order (for rule types other than STATE and URLMATCHER)\n *   - Equally sorted State and UrlMatcher rules will each match the URL.\n *     Then, the *best* match is chosen based on how many parameter values were matched.\n *\n * @coreapi\n */\nlet defaultRuleSortFn: (a: UrlRule, b: UrlRule) => number;\ndefaultRuleSortFn = (a, b) => {\n  let cmp = prioritySort(a, b);\n  if (cmp !== 0) return cmp;\n\n  cmp = typeSort(a, b);\n  if (cmp !== 0) return cmp;\n\n  cmp = urlMatcherSort(a as MatcherUrlRule, b as MatcherUrlRule);\n  if (cmp !== 0) return cmp;\n\n  return idSort(a, b);\n};\n\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n *\n * This class updates the URL when the state changes.\n * It also responds to changes in the URL.\n */\nexport class UrlRouter implements UrlRulesApi, UrlSyncApi, Disposable {\n  /** used to create [[UrlRule]] objects for common cases */\n  public urlRuleFactory: UrlRuleFactory;\n\n  /** @hidden */ private _router: UIRouter;\n  /** @hidden */ private location: string;\n  /** @hidden */ private _sortFn = defaultRuleSortFn;\n  /** @hidden */ private _stopFn: Function;\n  /** @hidden */ _rules: UrlRule[] = [];\n  /** @hidden */ private _otherwiseFn: UrlRule;\n  /** @hidden */ interceptDeferred = false;\n  /** @hidden */ private _id = 0;\n  /** @hidden */ private _sorted = false;\n\n  /** @hidden */\n  constructor(router: UIRouter) {\n    this._router = router;\n    this.urlRuleFactory = new UrlRuleFactory(router);\n    createProxyFunctions(val(UrlRouter.prototype), this, val(this));\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.listen(false);\n    this._rules = [];\n    delete this._otherwiseFn;\n  }\n\n  /** @inheritdoc */\n  sort(compareFn?: (a: UrlRule, b: UrlRule) => number) {\n    this._rules = this.stableSort(this._rules, this._sortFn = compareFn || this._sortFn);\n    this._sorted = true;\n  }\n\n  private ensureSorted() {\n    this._sorted || this.sort();\n  }\n\n  private stableSort(arr, compareFn) {\n    const arrOfWrapper = arr.map((elem, idx) => ({ elem, idx }));\n\n    arrOfWrapper.sort((wrapperA, wrapperB) => {\n      const cmpDiff = compareFn(wrapperA.elem, wrapperB.elem);\n      return cmpDiff === 0\n        ? wrapperA.idx - wrapperB.idx\n        : cmpDiff;\n    });\n\n    return arrOfWrapper.map(wrapper => wrapper.elem);\n  }\n\n  /**\n   * Given a URL, check all rules and return the best [[MatchResult]]\n   * @param url\n   * @returns {MatchResult}\n   */\n  match(url: UrlParts): MatchResult {\n    this.ensureSorted();\n\n    url = extend({ path: '', search: {}, hash: '' }, url);\n    const rules = this.rules();\n    if (this._otherwiseFn) rules.push(this._otherwiseFn);\n\n    // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n\n    const checkRule = (rule: UrlRule): MatchResult => {\n      const match = rule.match(url, this._router);\n      return match && { match, rule, weight: rule.matchPriority(match) };\n    };\n\n    // The rules are pre-sorted.\n    // - Find the first matching rule.\n    // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n    // - Choose the rule with the highest match weight.\n    let best: MatchResult;\n    for (let i = 0; i < rules.length; i++) {\n      // Stop when there is a 'best' rule and the next rule sorts differently than it.\n      if (best && this._sortFn(rules[i], best.rule) !== 0) break;\n\n      const current = checkRule(rules[i]);\n      // Pick the best MatchResult\n      best = (!best || current && current.weight > best.weight) ? current : best;\n    }\n\n    return best;\n  }\n\n  /** @inheritdoc */\n  sync(evt?) {\n    if (evt && evt.defaultPrevented) return;\n\n    const router = this._router,\n        $url = router.urlService,\n        $state = router.stateService;\n\n    const url: UrlParts = {\n      path: $url.path(), search: $url.search(), hash: $url.hash(),\n    };\n\n    const best = this.match(url);\n\n    const applyResult = pattern([\n      [isString, (newurl: string) => $url.url(newurl, true)],\n      [TargetState.isDef, (def: TargetStateDef) => $state.go(def.state, def.params, def.options)],\n      [is(TargetState), (target: TargetState) => $state.go(target.state(), target.params(), target.options())],\n    ]);\n\n    applyResult(best && best.rule.handler(best.match, url, router));\n  }\n\n  /** @inheritdoc */\n  listen(enabled?: boolean): Function {\n    if (enabled === false) {\n      this._stopFn && this._stopFn();\n      delete this._stopFn;\n    } else {\n      return this._stopFn = this._stopFn || this._router.urlService.onChange(evt => this.sync(evt));\n    }\n  }\n\n  /**\n   * Internal API.\n   * @internalapi\n   */\n  update(read?: boolean) {\n    const $url = this._router.locationService;\n    if (read) {\n      this.location = $url.url();\n      return;\n    }\n    if ($url.url() === this.location) return;\n\n    $url.url(this.location, true);\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @internalapi\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params?: RawParams, options?: { replace?: (string|boolean) }) {\n    const replace = options && !!options.replace;\n    this._router.urlService.url(urlMatcher.format(params || {}), replace);\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * #### Example:\n   * ```js\n   * matcher = $umf.compile(\"/about/:person\");\n   * params = { person: \"bob\" };\n   * $bob = $urlRouter.href(matcher, params);\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params?: any, options?: { absolute: boolean }): string {\n    let url = urlMatcher.format(params);\n    if (url == null) return null;\n\n    options = options || { absolute: false };\n\n    const cfg = this._router.urlService.config;\n    const isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = '#' + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    const slash = (!isHtml5 && url ? '/' : '');\n    const cfgPort = cfg.port();\n    const port = <any> (cfgPort === 80 || cfgPort === 443 ? '' : ':' + cfgPort);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n\n\n  /**\n   * Manually adds a URL Rule.\n   *\n   * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n   * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n   * Rules can be created using [[UrlRouter.urlRuleFactory]], or create manually as simple objects.\n   *\n   * A rule should have a `match` function which returns truthy if the rule matched.\n   * It should also have a `handler` function which is invoked if the rule is the best match.\n   *\n   * @return a function that deregisters the rule\n   */\n  rule(rule: UrlRule): Function {\n    if (!UrlRuleFactory.isUrlRule(rule)) throw new Error('invalid rule');\n    rule.$id = this._id++;\n    rule.priority = rule.priority || 0;\n\n    this._rules.push(rule);\n    this._sorted = false;\n\n    return () => this.removeRule(rule);\n  }\n\n  /** @inheritdoc */\n  removeRule(rule): void {\n    removeFrom(this._rules, rule);\n  }\n\n  /** @inheritdoc */\n  rules(): UrlRule[] {\n    this.ensureSorted();\n    return this._rules.slice();\n  }\n\n  /** @inheritdoc */\n  otherwise(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef) {\n    const handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    this._otherwiseFn = this.urlRuleFactory.create(val(true), handlerFn);\n    this._sorted = false;\n  }\n\n  /** @inheritdoc */\n  initial(handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef) {\n    const handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    const matchFn: UrlRuleMatchFn = (urlParts, router) =>\n        router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n\n    this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n  }\n\n  /** @inheritdoc */\n  when(matcher: (RegExp|UrlMatcher|string), handler: string|UrlRuleHandlerFn, options?: { priority: number }): UrlRule {\n    const rule = this.urlRuleFactory.create(matcher, handler);\n    if (isDefined(options && options.priority)) rule.priority = options.priority;\n    this.rule(rule);\n    return rule;\n  }\n\n  /** @inheritdoc */\n  deferIntercept(defer?: boolean) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  }\n}\n\nfunction getHandlerFn(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef): UrlRuleHandlerFn {\n  if (!isFunction(handler) && !isString(handler) && !is(TargetState)(handler) && !TargetState.isDef(handler)) {\n    throw new Error(\"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\");\n  }\n  return isFunction(handler) ? handler as UrlRuleHandlerFn : val(handler);\n}\n",
    "/**\n * @coreapi\n * @module view\n */ /** for typedoc */\nimport { equals, applyPairs, removeFrom, TypedMap, inArray } from '../common/common';\nimport { curry, prop } from '../common/hof';\nimport { isString, isArray } from '../common/predicates';\nimport { trace } from '../common/trace';\nimport { PathNode } from '../path/pathNode';\nimport { ActiveUIView, ViewContext, ViewConfig } from './interface';\nimport { _ViewDeclaration } from '../state/interface';\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig|ViewConfig[];\n\nexport interface ViewServicePluginAPI {\n  _rootViewContext(context?: ViewContext): ViewContext;\n  _viewConfigFactory(viewType: string, factory: ViewConfigFactory);\n  _registeredUIViews(): ActiveUIView[];\n  _activeViewConfigs(): ViewConfig[];\n  _onSync(listener: ViewSyncListener): Function;\n}\n\n// A uiView and its matching viewConfig\nexport interface ViewTuple {\n  uiView: ActiveUIView;\n  viewConfig: ViewConfig;\n}\n\nexport interface ViewSyncListener {\n  (viewTuples: ViewTuple[]): void;\n}\n\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nexport class ViewService {\n  private _uiViews: ActiveUIView[] = [];\n  private _viewConfigs: ViewConfig[] = [];\n  private _rootContext: ViewContext;\n  private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n  private _listeners: ViewSyncListener[] = [];\n\n  public _pluginapi: ViewServicePluginAPI = {\n    _rootViewContext: this._rootViewContext.bind(this),\n    _viewConfigFactory: this._viewConfigFactory.bind(this),\n    _registeredUIViews: () => this._uiViews,\n    _activeViewConfigs: () => this._viewConfigs,\n    _onSync: (listener: ViewSyncListener) => {\n      this._listeners.push(listener);\n      return () => removeFrom(this._listeners, listener);\n    },\n  };\n\n  /**\n   * Given a ui-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n   * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n   *\n   * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n   * - the ui-view's name matches the ViewConfig's target name\n   * - the ui-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n   * - There exists a parent ui-view where:\n   *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ui-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ui-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ui-view>\n   *     </ui-view>\n   *   </ui-view>\n   * </ui-view>\n   *\n   * uiViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n   * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ui-view's fqn \"default.bar\"\n   *\n   * @internalapi\n   */\n  static matches = (uiViewsByFqn: TypedMap<ActiveUIView>, uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n    // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n    if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n    // Split names apart from both viewConfig and uiView into segments\n    const vc = viewConfig.viewDecl;\n    const vcSegments = vc.$uiViewName.split('.');\n    const uivSegments = uiView.fqn.split('.');\n\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n      return false;\n\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n    const negOffset = (1 - vcSegments.length) || undefined;\n    const fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');\n    const uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n  }\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * This should be used by a framework implementation to calculate the values for\n   * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = '') {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    const viewAtContext: string[] = rawViewName.split('@');\n    let uiViewName = viewAtContext[0] || '$default';  // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : '^';    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    const relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = ''; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    const relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      const anchorState = uiViewContextAnchor.split('.')\n        .reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchorState.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return { uiViewName, uiViewContextAnchor };\n  }\n\n  constructor() { }\n\n  private _rootViewContext(context?: ViewContext): ViewContext {\n    return this._rootContext = context || this._rootContext;\n  }\n\n  private _viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    const cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error('ViewService: No view config factory registered for type ' + decl.$type);\n    const cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n\n  /**\n   * Deactivates a ViewConfig.\n   *\n   * This function deactivates a `ViewConfig`.\n   * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('<- Removing', viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  }\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('-> Registering', <any> viewConfig);\n    this._viewConfigs.push(viewConfig);\n  }\n\n\n  sync() {\n    const uiViewsByFqn: TypedMap<ActiveUIView> =\n        this._uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any> {});\n\n    // Return a weighted depth value for a uiView.\n    // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n    // plus the depth of the state that is populating the uiView\n    function uiViewDepth(uiView: ActiveUIView) {\n      const stateDepth = (context: ViewContext) =>\n          context && context.parent ? stateDepth(context.parent) + 1 : 1;\n      return (uiView.fqn.split('.').length * 10000) + stateDepth(uiView.creationContext);\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context, count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = (uiView: ActiveUIView): ViewTuple => {\n      const matchingConfigs = this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n      return { uiView, viewConfig: matchingConfigs[0] };\n    };\n\n    const configureUIView = (tuple: ViewTuple) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this._uiViews.indexOf(tuple.uiView) !== -1)\n        tuple.uiView.configUpdated(tuple.viewConfig);\n    };\n\n    // Sort views by FQN and state depth. Process uiviews nearest the root first.\n    const uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n    const matchedViewConfigs = uiViewTuples.map(tuple => tuple.viewConfig);\n    const unmatchedConfigTuples = this._viewConfigs\n      .filter(config => !inArray(matchedViewConfigs, config))\n      .map(viewConfig => ({ uiView: undefined, viewConfig }));\n\n    uiViewTuples.forEach(configureUIView);\n\n    const allTuples: ViewTuple[] = uiViewTuples.concat(unmatchedConfigTuples);\n    this._listeners.forEach(cb => cb(allTuples));\n    trace.traceViewSync(allTuples);\n  }\n\n  /**\n   * Registers a `ui-view` component\n   *\n   * When a `ui-view` component is created, it uses this method to register itself.\n   * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n   *\n   * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n   * and what the view's state context is.\n   *\n   * Note: There is no corresponding `deregisterUIView`.\n   *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n   *\n   * @param uiView The metadata for a UIView\n   * @return a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent('-> Registering', uiView);\n    const uiViews = this._uiViews;\n    const fqnAndTypeMatches = (uiv: ActiveUIView) => uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    if (uiViews.filter(fqnAndTypeMatches).length)\n      trace.traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      const idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent('<- Deregistering', uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  }\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this._uiViews.map(prop('fqn'));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this._uiViews.filter(prop('$config')).map(prop('name'));\n  }\n\n}\n",
    "/**\n * @coreapi\n * @module core\n */ /** */\nimport { StateParams } from './params/stateParams';\nimport { StateDeclaration } from './state/interface';\nimport { StateObject } from './state/stateObject';\nimport { Transition } from './transition/transition';\nimport { Queue } from './common/queue';\nimport { Disposable } from './interface';\n\n/**\n * Global router state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport class UIRouterGlobals implements Disposable {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams = new StateParams();\n\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n\n  /**\n   * Current state (internal object)\n   *\n   * The to-state from the latest successful transition\n   * @internalapi\n   */\n  $current: StateObject;\n\n  /**\n   * The current started/running transition.\n   * This transition has reached at least the onStart phase, but is not yet complete\n   */\n  transition: Transition;\n\n  /** @internalapi */\n  lastStartedTransitionId = -1;\n\n  /** @internalapi */\n  transitionHistory = new Queue<Transition>([], 1);\n\n  /** @internalapi */\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  dispose() {\n    this.transitionHistory.clear();\n    this.successfulTransitions.clear();\n    this.transition = null;\n  }\n}\n",
    "/**\n * @coreapi\n * @module url\n */ /** */\n\nimport { UIRouter } from '../router';\nimport { LocationServices, notImplemented, LocationConfig } from '../common/coreservices';\nimport { noop, createProxyFunctions } from '../common/common';\nimport { UrlConfigApi, UrlSyncApi, UrlRulesApi, UrlParts, MatchResult } from './interface';\n\n/** @hidden */\nconst makeStub = (keys: string[]): any =>\n    keys.reduce((acc, key) => (acc[key] = notImplemented(key), acc), { dispose: noop });\n\n/* tslint:disable:align */\n/** @hidden */ const locationServicesFns = ['url', 'path', 'search', 'hash', 'onChange'];\n/** @hidden */ const locationConfigFns = ['port', 'protocol', 'host', 'baseHref', 'html5Mode', 'hashPrefix'];\n/** @hidden */ const umfFns = ['type', 'caseInsensitive', 'strictMode', 'defaultSquashPolicy'];\n/** @hidden */ const rulesFns = ['sort', 'when', 'initial', 'otherwise', 'rules', 'rule', 'removeRule'];\n/** @hidden */ const syncFns = ['deferIntercept', 'listen', 'sync', 'match'];\n/* tslint:enable:align */\n\n/**\n * API for URL management\n */\nexport class UrlService implements LocationServices, UrlSyncApi {\n  /** @hidden */\n  static locationServiceStub: LocationServices = makeStub(locationServicesFns);\n  /** @hidden */\n  static locationConfigStub: LocationConfig = makeStub(locationConfigFns);\n\n  /**\n   * A nested API for managing URL rules and rewrites\n   *\n   * See: [[UrlRulesApi]] for details\n   */\n  rules: UrlRulesApi;\n\n  /**\n   * A nested API to configure the URL and retrieve URL information\n   *\n   * See: [[UrlConfigApi]] for details\n   */\n  config: UrlConfigApi;\n\n  /** @hidden */\n  private router: UIRouter;\n\n  /** @hidden */\n  constructor(router: UIRouter, lateBind = true) {\n    this.router = router;\n    this.rules = {} as any;\n    this.config = {} as any;\n\n    // proxy function calls from UrlService to the LocationService/LocationConfig\n    const locationServices = () => router.locationService;\n    createProxyFunctions(locationServices, this, locationServices, locationServicesFns, lateBind);\n\n    const locationConfig = () => router.locationConfig;\n    createProxyFunctions(locationConfig, this.config, locationConfig, locationConfigFns, lateBind);\n\n    const umf = () => router.urlMatcherFactory;\n    createProxyFunctions(umf, this.config, umf, umfFns);\n\n    const urlRouter = () => router.urlRouter;\n    createProxyFunctions(urlRouter, this.rules, urlRouter, rulesFns);\n    createProxyFunctions(urlRouter, this, urlRouter, syncFns);\n  }\n\n  /** @inheritdoc */\n  url(): string;\n  /** @inheritdoc */\n  url(newurl: string, replace?: boolean, state?): void;\n  url(newurl?, replace?, state?): any { return; }\n  /** @inheritdoc */\n  path(): string { return; }\n  /** @inheritdoc */\n  search(): { [key: string]: any } { return; }\n  /** @inheritdoc */\n  hash(): string { return; }\n  /** @inheritdoc */\n  onChange(callback: Function): Function { return; }\n\n\n  /**\n   * Returns the current URL parts\n   *\n   * This method returns the current URL components as a [[UrlParts]] object.\n   *\n   * @returns the current url parts\n   */\n  parts(): UrlParts {\n    return { path: this.path(), search: this.search(), hash: this.hash() };\n  }\n\n  dispose() { }\n\n  /** @inheritdoc */\n  sync(evt?) { return; }\n  /** @inheritdoc */\n  listen(enabled?: boolean): Function { return; }\n  /** @inheritdoc */\n  deferIntercept(defer?: boolean) { return; }\n  /** @inheritdoc */\n  match(urlParts: UrlParts): MatchResult { return; }\n\n}\n",
    "/**\n * @coreapi\n * @module core\n */ /** */\nimport { UrlMatcherFactory } from './url/urlMatcherFactory';\nimport { UrlRouter } from './url/urlRouter';\nimport { TransitionService } from './transition/transitionService';\nimport { ViewService } from './view/view';\nimport { StateRegistry } from './state/stateRegistry';\nimport { StateService } from './state/stateService';\nimport { UIRouterGlobals } from './globals';\nimport { UIRouterPlugin, Disposable } from './interface';\nimport { values, removeFrom } from './common/common';\nimport { isFunction } from './common/predicates';\nimport { UrlService } from './url/urlService';\nimport { LocationServices, LocationConfig } from './common/coreservices';\nimport { Trace, trace } from './common/trace';\n\n/** @hidden */\nlet _routerInstance = 0;\n\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * UI-Router (for each specific framework) will create an instance of this class during bootstrap.\n * This class instantiates and wires the UI-Router services together.\n *\n * After a new instance of the UIRouter class is created, it should be configured for your app.\n * For instance, app states should be registered with the [[UIRouter.stateRegistry]].\n *\n * ---\n *\n * Normally the framework code will bootstrap UI-Router.\n * If you are bootstrapping UIRouter manually, tell it to monitor the URL by calling\n * [[UrlService.listen]] then [[UrlService.sync]].\n */\nexport class UIRouter {\n  /** @hidden */ $id = _routerInstance++;\n  /** @hidden */ _disposed = false;\n  /** @hidden */ private _disposables: Disposable[] = [];\n\n  /** Provides trace information to the console */\n  trace: Trace = trace;\n\n  /** Provides services related to ui-view synchronization */\n  viewService = new ViewService();\n\n  /** Global router state */\n  globals: UIRouterGlobals = new UIRouterGlobals();\n\n  /** Provides services related to Transitions */\n  transitionService: TransitionService = new TransitionService(this);\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlRouter: UrlRouter = new UrlRouter(this);\n\n  /** Provides a registry for states, and related registration services */\n  stateRegistry: StateRegistry = new StateRegistry(this);\n\n  /** Provides services related to states */\n  stateService = new StateService(this);\n\n  /** Provides services related to the URL */\n  urlService: UrlService = new UrlService(this);\n\n  /** @hidden plugin instances are registered here */\n  private _plugins: { [key: string]: UIRouterPlugin } = {};\n\n\n  /** Registers an object to be notified when the router is disposed */\n  disposable(disposable: Disposable) {\n    this._disposables.push(disposable);\n  }\n\n  /**\n   * Disposes this router instance\n   *\n   * When called, clears resources retained by the router by calling `dispose(this)` on all\n   * registered [[disposable]] objects.\n   *\n   * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n   *\n   * @param disposable (optional) the disposable to dispose\n   */\n  dispose(disposable?: any): void {\n    if (disposable && isFunction(disposable.dispose)) {\n      disposable.dispose(this);\n      return undefined;\n    }\n\n    this._disposed = true;\n    this._disposables.slice().forEach(d => {\n      try {\n        typeof d.dispose === 'function' && d.dispose(this);\n        removeFrom(this._disposables, d);\n      } catch (ignored) {}\n    });\n  }\n\n  /**\n   * Creates a new `UIRouter` object\n   *\n   * @param locationService a [[LocationServices]] implementation\n   * @param locationConfig a [[LocationConfig]] implementation\n   * @internalapi\n   */\n  constructor(\n      public locationService: LocationServices = UrlService.locationServiceStub,\n      public locationConfig: LocationConfig = UrlService.locationConfigStub,\n  ) {\n\n    this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n\n    this.disposable(this.globals);\n    this.disposable(this.stateService);\n    this.disposable(this.stateRegistry);\n    this.disposable(this.transitionService);\n    this.disposable(this.urlRouter);\n    this.disposable(locationService);\n    this.disposable(locationConfig);\n  }\n\n  /** Add plugin (as ES6 class) */\n  plugin<T extends UIRouterPlugin>(plugin: { new(router: UIRouter, options?: any): T }, options?: any): T;\n  /** Add plugin (as javascript constructor function) */\n  plugin<T extends UIRouterPlugin>(plugin: { (router: UIRouter, options?: any): void }, options?: any): T;\n  /** Add plugin (as javascript factory function) */\n  plugin<T extends UIRouterPlugin>(plugin: PluginFactory<T>, options?: any): T;\n  /**\n   * Adds a plugin to UI-Router\n   *\n   * This method adds a UI-Router Plugin.\n   * A plugin can enhance or change UI-Router behavior using any public API.\n   *\n   * #### Example:\n   * ```js\n   * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n   *\n   * var plugin = router.addPlugin(MyCoolPlugin);\n   * ```\n   *\n   * ### Plugin authoring\n   *\n   * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n   *\n   * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n   * For example, it may configure router options or add a Transition Hook.\n   *\n   * The plugin can then be published as a separate module.\n   *\n   * #### Example:\n   * ```js\n   * export class MyAuthPlugin implements UIRouterPlugin {\n   *   constructor(router: UIRouter, options: any) {\n   *     this.name = \"MyAuthPlugin\";\n   *     let $transitions = router.transitionService;\n   *     let $state = router.stateService;\n   *\n   *     let authCriteria = {\n   *       to: (state) => state.data && state.data.requiresAuth\n   *     };\n   *\n   *     function authHook(transition: Transition) {\n   *       let authService = transition.injector().get('AuthService');\n   *       if (!authService.isAuthenticated()) {\n   *         return $state.target('login');\n   *       }\n   *     }\n   *\n   *     $transitions.onStart(authCriteria, authHook);\n   *   }\n   * }\n   * ```\n   *\n   * @param plugin one of:\n   *        - a plugin class which implements [[UIRouterPlugin]]\n   *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n   *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n   * @param options options to pass to the plugin class/factory\n   * @returns the registered plugin instance\n   */\n  plugin<T extends UIRouterPlugin>(plugin: any, options: any = {}): T {\n    const pluginInstance = new plugin(this, options);\n    if (!pluginInstance.name) throw new Error('Required property `name` missing on plugin: ' + pluginInstance);\n    this._disposables.push(pluginInstance);\n    return this._plugins[pluginInstance.name] = pluginInstance;\n  }\n\n  /**\n   * Returns registered plugins\n   *\n   * Returns the registered plugin of the given `pluginName`.\n   * If no `pluginName` is given, returns all registered plugins\n   *\n   * @param pluginName (optional) the name of the plugin to get\n   * @return the named plugin (undefined if not found), or all plugins (if `pluginName` is omitted)\n   */\n  getPlugin(pluginName: string): UIRouterPlugin;\n  getPlugin(): UIRouterPlugin[];\n  getPlugin(pluginName?: string): UIRouterPlugin|UIRouterPlugin[] {\n    return pluginName ? this._plugins[pluginName] : values(this._plugins);\n  }\n}\n\n/** @internalapi */\nexport type PluginFactory<T> = (router: UIRouter, options?: any) => T;\n",
    "/** @module hooks */ /** */\nimport { Transition } from '../transition/transition';\nimport { UIRouter } from '../router';\nimport { TransitionService } from '../transition/transitionService';\nimport { Resolvable } from '../resolve';\nimport { extend, inArray, map, mapObj, uniqR, unnestR, values } from '../common';\nimport { PathNode } from '../path';\nimport { TreeChanges } from \"../transition\";\n\nfunction addCoreResolvables(trans: Transition) {\n  trans.addResolvable(Resolvable.fromData(UIRouter, trans.router), '');\n  trans.addResolvable(Resolvable.fromData(Transition, trans), '');\n  trans.addResolvable(Resolvable.fromData('$transition$', trans), '');\n  trans.addResolvable(Resolvable.fromData('$stateParams', trans.params()), '');\n\n  trans.entering().forEach(state => {\n    trans.addResolvable(Resolvable.fromData('$state$', state), state);\n  });\n}\n\nexport const registerAddCoreResolvables = (transitionService: TransitionService) =>\n    transitionService.onCreate({}, addCoreResolvables);\n\nconst TRANSITION_TOKENS = ['$transition$', Transition];\nconst isTransition = inArray(TRANSITION_TOKENS);\n\n// References to Transition in the treeChanges pathnodes makes all\n// previous Transitions reachable in memory, causing a memory leak\n// This function removes resolves for '$transition$' and `Transition` from the treeChanges.\n// Do not use this on current transitions, only on old ones.\nexport const treeChangesCleanup = (trans: Transition) => {\n  const nodes = values(trans.treeChanges()).reduce(unnestR, []).reduce(uniqR, []);\n\n  // If the resolvable is a Transition, return a new resolvable with null data\n  const replaceTransitionWithNull = (r: Resolvable): Resolvable => {\n    return isTransition(r.token) ? Resolvable.fromData(r.token, null) : r;\n  };\n\n  nodes.forEach((node: PathNode) => {\n    node.resolvables = node.resolvables.map(replaceTransitionWithNull);\n  });\n};\n",
    "/** @module hooks */ /** */\nimport { isString, isFunction } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { services } from '../common/coreservices';\nimport { TargetState } from '../state/targetState';\nimport { TransitionService } from '../transition/transitionService';\nimport { TransitionHookFn } from '../transition/interface';\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  const redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  const $state = trans.router.stateService;\n\n  function handleResult(result: any) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any> result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const registerRedirectToHook = (transitionService: TransitionService) =>\n    transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectToHook);\n",
    "/** @module hooks */\n/** for typedoc */\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { StateDeclaration } from '../state/interface';\nimport { StateObject } from '../state/stateObject';\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: StateDeclaration) => {\n    const _state: StateObject = state.$$state();\n    const hookFn: TransitionStateHookFn = _state[hookName];\n    return hookFn(transition, state);\n  };\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const registerOnExitHook = (transitionService: TransitionService) =>\n    transitionService.onExit({ exiting: state => !!state.onExit }, onExitHook);\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const registerOnRetainHook = (transitionService: TransitionService) =>\n    transitionService.onRetain({ retained: state => !!state.onRetain }, onRetainHook);\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const registerOnEnterHook = (transitionService: TransitionService) =>\n    transitionService.onEnter({ entering: state => !!state.onEnter }, onEnterHook);\n\n",
    "/** @module hooks */\n/** for typedoc */\nimport { noop } from '../common/common';\nimport { Transition } from '../transition/transition';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { TransitionStateHookFn, TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\nimport { val } from '../common/hof';\nimport { StateDeclaration } from '../state/interface';\n\nexport const RESOLVE_HOOK_PRIORITY = 1000;\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath, { priority: 1000 });`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n    new ResolveContext(trans.treeChanges().to)\n        .resolvePath('EAGER', trans)\n        .then(noop);\n\nexport const registerEagerResolvePath = (transitionService: TransitionService) =>\n    transitionService.onStart({}, eagerResolvePath, { priority: RESOLVE_HOOK_PRIORITY });\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState, { priority: 1000 });`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst lazyResolveState: TransitionStateHookFn = (trans: Transition, state: StateDeclaration) =>\n    new ResolveContext(trans.treeChanges().to)\n        .subContext(state.$$state())\n        .resolvePath('LAZY', trans)\n        .then(noop);\n\nexport const registerLazyResolveState = (transitionService: TransitionService) =>\n    transitionService.onEnter({ entering: val(true) }, lazyResolveState, { priority: RESOLVE_HOOK_PRIORITY });\n\n\n/**\n * A [[TransitionHookFn]] which resolves any dynamically added (LAZY or EAGER) Resolvables.\n *\n * Registered using `transitionService.onFinish({}, eagerResolvePath, { priority: 1000 });`\n *\n * After all entering states have been entered, this hook resolves any remaining Resolvables.\n * These are typically dynamic resolves which were added by some Transition Hook using [[Transition.addResolvable]].\n *\n * See [[StateDeclaration.resolve]]\n */\nconst resolveRemaining: TransitionHookFn = (trans: Transition) =>\n  new ResolveContext(trans.treeChanges().to)\n    .resolvePath('LAZY', trans)\n    .then(noop);\n\nexport const registerResolveRemaining = (transitionService: TransitionService) =>\n  transitionService.onFinish({}, resolveRemaining, { priority: RESOLVE_HOOK_PRIORITY });\n",
    "/** @module hooks */ /** for typedoc */\nimport { noop } from '../common/common';\nimport { services } from '../common/coreservices';\nimport { Transition } from '../transition/transition';\nimport { ViewService } from '../view/view';\nimport { ViewConfig } from '../view/interface';\nimport { TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\n\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nconst loadEnteringViews: TransitionHookFn = (transition: Transition) => {\n  const $q = services.$q;\n  const enteringViews = transition.views('entering');\n  if (!enteringViews.length) return;\n  return $q.all(enteringViews.map(view => $q.when(view.load()))).then(noop);\n};\n\nexport const registerLoadEnteringViews = (transitionService: TransitionService) =>\n    transitionService.onFinish({}, loadEnteringViews);\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nconst activateViews: TransitionHookFn = (transition: Transition) => {\n  const enteringViews = transition.views('entering');\n  const exitingViews = transition.views('exiting');\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  const $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n};\n\nexport const registerActivateViews = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, activateViews);\n",
    "/** @module hooks */\n/** for typedoc */\nimport { Transition } from '../transition/transition';\nimport { copy } from '../common/common';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which updates global UI-Router state\n *\n * Registered using `transitionService.onBefore({}, updateGlobalState);`\n *\n * Before a [[Transition]] starts, updates the global value of \"the current transition\" ([[Globals.transition]]).\n * After a successful [[Transition]], updates the global values of \"the current state\"\n * ([[Globals.current]] and [[Globals.$current]]) and \"the current param values\" ([[Globals.params]]).\n *\n * See also the deprecated properties:\n * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n */\nconst updateGlobalState = (trans: Transition) => {\n  const globals = trans.router.globals;\n\n  const transitionSuccessful = () => {\n    globals.successfulTransitions.enqueue(trans);\n    globals.$current = trans.$to();\n    globals.current = globals.$current.self;\n\n    copy(trans.params(), globals.params);\n  };\n\n  const clearCurrentTransition = () => {\n    // Do not clear globals.transition if a different transition has started in the meantime\n    if (globals.transition === trans) globals.transition = null;\n  };\n\n  trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n  trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n};\n\nexport const registerUpdateGlobalState = (transitionService: TransitionService) =>\n    transitionService.onCreate({}, updateGlobalState);\n",
    "/** @module hooks */ /** */\nimport { UrlRouter } from '../url/urlRouter';\nimport { StateService } from '../state/stateService';\nimport { Transition } from '../transition/transition';\nimport { TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nconst updateUrl: TransitionHookFn = (transition: Transition) => {\n  const options = transition.options();\n  const $state: StateService = transition.router.stateService;\n  const $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    const urlOptions = { replace: options.location === 'replace' };\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport const registerUpdateUrl = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n",
    "/** @module hooks */ /** */\nimport { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { TransitionHookFn } from '../transition/interface';\nimport { StateDeclaration, LazyLoadResult } from '../state/interface';\nimport { services } from '../common/coreservices';\nimport { StateRule } from '../url/interface';\n\n/**\n * A [[TransitionHookFn]] that performs lazy loading\n *\n * When entering a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function (unless it is already in process)\n *   - Flag the hook function as \"in process\"\n *   - The function should return a promise (that resolves when lazy loading is complete)\n * - Wait for the promise to settle\n *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n *   - Flag the hook function as \"not in process\"\n * - If the hook was successful\n *   - Remove the `lazyLoad` function from the state declaration\n * - If all the hooks were successful\n *   - Retry the transition (by returning a TargetState)\n *\n * ```\n * .state('abc', {\n *   component: 'fooComponent',\n *   lazyLoad: () => System.import('./fooComponent')\n *   });\n * ```\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nconst lazyLoadHook: TransitionHookFn = (transition: Transition) => {\n  const router = transition.router;\n\n  function retryTransition() {\n    if (transition.originalTransition().options().source !== 'url') {\n      // The original transition was not triggered via url sync\n      // The lazy state should be loaded now, so re-try the original transition\n      const orig = transition.targetState();\n      return router.stateService.target(orig.identifier(), orig.params(), orig.options());\n    }\n\n    // The original transition was triggered via url sync\n    // Run the URL rules and find the best match\n    const $url = router.urlService;\n    const result = $url.match($url.parts());\n    const rule = result && result.rule;\n\n    // If the best match is a state, redirect the transition (instead\n    // of calling sync() which supersedes the current transition)\n    if (rule && rule.type === 'STATE') {\n      const state = (rule as StateRule).state;\n      const params = result.match;\n      return router.stateService.target(state, params, transition.options());\n    }\n\n    // No matching state found, so let .sync() choose the best non-state match/otherwise\n    router.urlService.sync();\n  }\n\n  const promises = transition.entering()\n      .filter(state => !!state.$$state().lazyLoad)\n      .map(state => lazyLoadState(transition, state));\n\n  return services.$q.all(promises).then(retryTransition);\n};\n\nexport const registerLazyLoadHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({ entering: (state) => !!state.lazyLoad }, lazyLoadHook);\n\n\n/**\n * Invokes a state's lazy load function\n *\n * @param transition a Transition context\n * @param state the state to lazy load\n * @returns A promise for the lazy load result\n */\nexport function lazyLoadState(transition: Transition, state: StateDeclaration): Promise<LazyLoadResult> {\n  const lazyLoadFn = state.$$state().lazyLoad;\n\n  // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n  let promise = lazyLoadFn['_promise'];\n  if (!promise) {\n    const success = (result) => {\n      delete state.lazyLoad;\n      delete state.$$state().lazyLoad;\n      delete lazyLoadFn['_promise'];\n      return result;\n    };\n\n    const error = (err) => {\n      delete lazyLoadFn['_promise'];\n      return services.$q.reject(err);\n    };\n\n    promise = lazyLoadFn['_promise'] =\n        services.$q.when(lazyLoadFn(transition, state))\n            .then(updateStateRegistry)\n            .then(success, error);\n  }\n\n  /** Register any lazy loaded state definitions */\n  function updateStateRegistry(result: LazyLoadResult) {\n    if (result && Array.isArray(result.states)) {\n      result.states.forEach(_state => transition.router.stateRegistry.register(_state));\n    }\n    return result;\n  }\n\n  return promise;\n}\n",
    "/** @module transition */ /** */\nimport { TransitionHookPhase, PathType } from './interface';\nimport { GetErrorHandler, GetResultHandler, TransitionHook } from './transitionHook';\n/**\n * This class defines a type of hook, such as `onBefore` or `onEnter`.\n * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n *\n * @interalapi\n */\nexport class TransitionEventType {\n  /* tslint:disable:no-inferrable-types */\n  constructor(public name:               string,\n              public hookPhase:          TransitionHookPhase,\n              public hookOrder:          number,\n              public criteriaMatchPath:  PathType,\n              public reverseSort:        boolean = false,\n              public getResultHandler:   GetResultHandler = TransitionHook.HANDLE_RESULT,\n              public getErrorHandler:    GetErrorHandler = TransitionHook.REJECT_ERROR,\n              public synchronous:        boolean = false,\n  ) { }\n}\n",
    "/** @module hooks */ /** */\n\nimport { trace } from '../common/trace';\nimport { Rejection } from '../transition/rejectFactory';\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\nfunction ignoredHook(trans: Transition) {\n  const ignoredReason = trans._ignoredReason();\n  if (!ignoredReason) return;\n\n  trace.traceTransitionIgnored(trans);\n\n  const pending = trans.router.globals.transition;\n\n  // The user clicked a link going back to the *current state* ('A')\n  // However, there is also a pending transition in flight (to 'B')\n  // Abort the transition to 'B' because the user now wants to be back at 'A'.\n  if (ignoredReason === 'SameAsCurrent' && pending) {\n    pending.abort();\n  }\n\n  return Rejection.ignored().toPromise();\n}\n\nexport const registerIgnoredTransitionHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n",
    "/** @module hooks */ /** */\n\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans: Transition) {\n  if (!trans.valid()) {\n    throw new Error(trans.error());\n  }\n}\n\nexport const registerInvalidTransitionHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n",
    "/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nimport {\n  IHookRegistry, TransitionOptions, TransitionHookScope, TransitionHookPhase, TransitionCreateHookFn, HookMatchCriteria,\n  HookRegOptions, PathTypes, PathType, RegisteredHooks, TransitionHookFn, TransitionStateHookFn,\n} from './interface';\nimport { Transition } from './transition';\nimport { makeEvent, RegisteredHook } from './hookRegistry';\nimport { TargetState } from '../state/targetState';\nimport { PathNode } from '../path/pathNode';\nimport { ViewService } from '../view/view';\nimport { UIRouter } from '../router';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { Disposable } from '../interface'; // has or is using\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null,\n  source      : 'unknown',\n};\n\n\n/**\n * Plugin API for Transition Service\n * @internalapi\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort?: boolean,\n               getResultHandler?: GetResultHandler,\n               getErrorHandler?: GetErrorHandler,\n               rejectIfSuperseded?: boolean);\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n  /** @hidden */\n  _transitionCount = 0;\n\n  /** @hidden */\n  public $view: ViewService;\n\n  /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n  private _eventTypes: TransitionEventType[] = [];\n  /** @hidden The registered transition hooks */\n  _registeredHooks = { } as RegisteredHooks;\n  /** @hidden The  paths on a criteria object */\n  private _criteriaPaths = { } as PathTypes;\n  /** @hidden */\n  private _router: UIRouter;\n\n  /** @internalapi */\n  _pluginapi: TransitionServicePluginAPI;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    resolveAll: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  /** @hidden */\n  constructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any> {};\n    this._pluginapi = <TransitionServicePluginAPI> createProxyFunctions(val(this), {}, val(this), [\n      '_definePathType',\n      '_defineEvent',\n      '_getPathTypes',\n      '_getEvents',\n      'getHooks',\n    ]);\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n    _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n  }\n\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internalapi\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n  onCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n\n  /**\n   * dispose\n   * @internalapi\n   */\n  dispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) => hooksArray.forEach(hook => {\n      hook._deregistered = true;\n      removeFrom(hooksArray, hook);\n    }));\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n\n  /** @hidden */\n  private _defineCoreEvents() {\n    const Phase = TransitionHookPhase;\n    const TH = TransitionHook;\n    const paths = this._criteriaPaths;\n    const NORMAL_SORT = false, REVERSE_SORT = true;\n    const SYNCHRONOUS = true;\n\n    this._defineEvent('onCreate',  Phase.CREATE,  0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n\n    this._defineEvent('onBefore',  Phase.BEFORE,  0,   paths.to);\n\n    this._defineEvent('onStart',   Phase.RUN,     0,   paths.to);\n    this._defineEvent('onExit',    Phase.RUN,     100, paths.exiting, REVERSE_SORT);\n    this._defineEvent('onRetain',  Phase.RUN,     200, paths.retained);\n    this._defineEvent('onEnter',   Phase.RUN,     300, paths.entering);\n    this._defineEvent('onFinish',  Phase.RUN,     400, paths.to);\n\n    this._defineEvent('onSuccess', Phase.SUCCESS, 0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n    this._defineEvent('onError',   Phase.ERROR,   0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n  }\n\n  /** @hidden */\n  private _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType('to', TRANSITION);\n    this._definePathType('from', TRANSITION);\n    this._definePathType('exiting', STATE);\n    this._definePathType('retained', STATE);\n    this._definePathType('entering', STATE);\n  }\n\n  /** @hidden */\n  _defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort = false,\n               getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n               getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n               synchronous = false) {\n    const eventType = new TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  }\n\n  /** @hidden */ // tslint:disable-next-line\n  private _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    const transitionHookTypes = isDefined(phase) ?\n        this._eventTypes.filter(type => type.hookPhase === phase) :\n        this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      const cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    });\n  }\n\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @hidden\n   */\n  private _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n\n  /** * @hidden */ // tslint:disable-next-line\n  private _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n\n  /** @hidden */\n  public getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /** @hidden */\n  private _registerCoreTransitionHooks() {\n    const fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored         = registerIgnoredTransitionHook(this);\n    fns.invalid         = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo      = registerRedirectToHook(this);\n\n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit          = registerOnExitHook(this);\n    fns.onRetain        = registerOnRetainHook(this);\n    fns.onEnter         = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve    = registerEagerResolvePath(this);\n    fns.lazyResolve     = registerLazyResolveState(this);\n    fns.resolveAll      = registerResolveRemaining(this);\n\n    // Wire up the View management hooks\n    fns.loadViews       = registerLoadEnteringViews(this);\n    fns.activateViews   = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals   = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl       = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad        = registerLazyLoadHook(this);\n  }\n}\n",
    "/**\n * @coreapi\n * @module state\n */\n/** */\nimport { createProxyFunctions, defaults, extend, inArray, noop, removeFrom, silenceUncaughtInPromise, silentRejection } from '../common/common';\nimport { isDefined, isObject, isString } from '../common/predicates';\nimport { Queue } from '../common/queue';\nimport { services } from '../common/coreservices';\n\nimport { PathUtils } from '../path/pathUtils';\nimport { PathNode } from '../path/pathNode';\n\nimport { HookResult, TransitionOptions } from '../transition/interface';\nimport { defaultTransOpts } from '../transition/transitionService';\nimport { Rejection, RejectType } from '../transition/rejectFactory';\nimport { Transition } from '../transition/transition';\n\nimport { HrefOptions, LazyLoadResult, StateDeclaration, StateOrName, TransitionPromise } from './interface';\nimport { StateObject } from './stateObject';\nimport { TargetState } from './targetState';\n\nimport { RawParams } from '../params/interface';\nimport { Param } from '../params/param';\nimport { Glob } from '../common/glob';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { lazyLoadState } from '../hooks/lazyLoad';\nimport { not, val } from '../common/hof';\nimport { StateParams } from '../params/stateParams';\n\nexport type OnInvalidCallback =\n    (toState?: TargetState, fromState?: TargetState, injector?: UIInjector) => HookResult;\n\n/**\n * Provides state related service functions\n *\n * This class provides services related to ui-router states.\n * An instance of this class is located on the global [[UIRouter]] object.\n */\nexport class StateService {\n  /** @internalapi */\n  invalidCallbacks: OnInvalidCallback[] = [];\n\n  /**\n   * The [[Transition]] currently in progress (or null)\n   *\n   * This is a passthrough through to [[UIRouterGlobals.transition]]\n   */\n  get transition() { return this.router.globals.transition; }\n  /**\n   * The latest successful state parameters\n   *\n   * This is a passthrough through to [[UIRouterGlobals.params]]\n   */\n  get params(): StateParams { return this.router.globals.params; }\n  /**\n   * The current [[StateDeclaration]]\n   *\n   * This is a passthrough through to [[UIRouterGlobals.current]]\n   */\n  get current() { return this.router.globals.current; }\n  /**\n   * The current [[StateObject]]\n   *\n   * This is a passthrough through to [[UIRouterGlobals.$current]]\n   */\n  get $current() { return this.router.globals.$current; }\n\n  /** @internalapi */\n  constructor(private router: UIRouter) {\n    const getters = ['current', '$current', 'params', 'transition'];\n    const boundFns = Object.keys(StateService.prototype).filter(not(inArray(getters)));\n    createProxyFunctions(val(StateService.prototype), this, val(this), boundFns);\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.defaultErrorHandler(noop);\n    this.invalidCallbacks = [];\n  }\n\n  /**\n   * Handler for when [[transitionTo]] is called with an invalid state.\n   *\n   * Invokes the [[onInvalid]] callbacks, in natural order.\n   * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n   * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n   *\n   * @internalapi\n   */\n  private _handleInvalidTargetState(fromPath: PathNode[], toState: TargetState) {\n    const fromState = PathUtils.makeTargetState(this.router.stateRegistry, fromPath);\n    const globals = this.router.globals;\n    const latestThing = () => globals.transitionHistory.peekTail();\n    const latest = latestThing();\n    const callbackQueue = new Queue<OnInvalidCallback>(this.invalidCallbacks.slice());\n    const injector = new ResolveContext(fromPath).injector();\n\n    const checkForRedirect = (result: HookResult) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n\n      let target = <TargetState> result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) {\n        return Rejection.invalid(target.error()).toPromise();\n      }\n\n      if (latestThing() !== latest) {\n        return Rejection.superseded().toPromise();\n      }\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      const nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid(toState.error()).toPromise();\n\n      const callbackResult = services.$q.when(nextCallback(toState, fromState, injector));\n      return callbackResult.then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * Registers an Invalid State handler\n   *\n   * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n   * has been called with an invalid state reference parameter\n   *\n   * Example:\n   * ```js\n   * stateService.onInvalid(function(to, from, injector) {\n   *   if (to.name() === 'foo') {\n   *     let lazyLoader = injector.get('LazyLoadService');\n   *     return lazyLoader.load('foo')\n   *         .then(() => stateService.target('foo'));\n   *   }\n   * });\n   * ```\n   *\n   * @param {function} callback invoked when the toState is invalid\n   *   This function receives the (invalid) toState, the fromState, and an injector.\n   *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n   *   If one is returned, it is treated as a redirect.\n   *\n   * @returns a function which deregisters the callback\n   */\n  onInvalid(callback: OnInvalidCallback): Function {\n    this.invalidCallbacks.push(callback);\n    return function deregisterListener() {\n      removeFrom(this.invalidCallbacks)(callback);\n    }.bind(this);\n  }\n\n\n  /**\n   * Reloads the current state\n   *\n   * A method that force reloads the current state, or a partial state hierarchy.\n   * All resolves are re-resolved, and components reinstantiated.\n   *\n   * #### Example:\n   * ```js\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * ```\n   *\n   * Note: `reload()` is just an alias for:\n   *\n   * ```js\n   * $state.transitionTo($state.current, $state.params, {\n   *   reload: true, inherit: false\n   * });\n   * ```\n   *\n   * @param reloadState A state name or a state object.\n   *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n   *\n   * #### Example:\n   * ```js\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * ```\n   *\n   * @returns A promise representing the state of the new transition. See [[StateService.go]]\n   */\n  reload(reloadState?: StateOrName): Promise<StateObject> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false,\n    });\n  }\n\n  /**\n   * Transition to a different state and/or parameters\n   *\n   * Convenience method for transitioning to a new state.\n   *\n   * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n   * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n   * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n   * inherit from the current parameter values (because of `inherit: true`).\n   *\n   * #### Example:\n   * ```js\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * ```\n   *\n   * @param to Absolute state name, state object, or relative state path (relative to current state).\n   *\n   * Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to the parent state\n   * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n   * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n   *\n   * @param params A map of the parameters that will be sent to the state, will populate $stateParams.\n   *\n   *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n   *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n   *\n   * @param options Transition options\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   */\n  go(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    const defautGoOpts = { relative: this.$current, inherit: true };\n    const transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  }\n\n  /**\n   * Creates a [[TargetState]]\n   *\n   * This is a factory method for creating a TargetState\n   *\n   * This may be returned from a Transition Hook to redirect a transition, for example.\n   */\n  target(identifier: StateOrName, params?: RawParams, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name)\n      throw new Error('Invalid reload state object');\n    const reg = this.router.stateRegistry;\n    options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(<any> options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : (<any>options.reload).name)}'`);\n\n    return new TargetState(this.router.stateRegistry, identifier, params, options);\n  }\n\n  private getCurrentPath(): PathNode[] {\n    const globals = this.router.globals;\n    const latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const rootPath = () => [ new PathNode(this.router.stateRegistry.root()) ];\n    return latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n  }\n\n  /**\n   * Low-level method for transitioning to a new state.\n   *\n   * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n   *\n   * #### Example:\n   * ```js\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * ```\n   *\n   * @param to State name or state object.\n   * @param toParams A map of the parameters that will be sent to the state,\n   *      will populate $stateParams.\n   * @param options Transition options\n   *\n   * @returns A promise representing the state of the new transition. See [[go]]\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    const router = this.router;\n    const globals = router.globals;\n    options = defaults(options, defaultTransOpts);\n    const getCurrent = () =>\n        globals.transition;\n    options = extend(options, { current: getCurrent });\n\n    const ref: TargetState = this.target(to, toParams, options);\n    const currentPath = this.getCurrentPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid())\n      return <TransitionPromise> silentRejection(ref.error());\n\n    /**\n     * Special handling for Ignored, Aborted, and Redirected transitions\n     *\n     * The semantics for the transition.run() promise and the StateService.transitionTo()\n     * promise differ. For instance, the run() promise may be rejected because it was\n     * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n     * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n     * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n     */\n    const rejectedTransitionHandler = (trans: Transition) => (error: any): Promise<any> => {\n      if (error instanceof Rejection) {\n        const isLatest = router.globals.lastStartedTransitionId === trans.$id;\n\n        if (error.type === RejectType.IGNORED) {\n          isLatest && router.urlRouter.update();\n          // Consider ignored `Transition.run()` as a successful `transitionTo`\n          return services.$q.when(globals.current);\n        }\n\n        const detail: any = error.detail;\n        if (error.type === RejectType.SUPERSEDED && error.redirected && detail instanceof TargetState) {\n          // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n          // by returning the promise for the new (redirect) `Transition.run()`.\n          const redirect: Transition = trans.redirect(detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          isLatest && router.urlRouter.update();\n          return services.$q.reject(error);\n        }\n      }\n\n      const errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    const transition = this.router.transitionService.create(currentPath, ref);\n    const transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  }\n\n  /**\n   * Checks if the current state *is* the provided state\n   *\n   * Similar to [[includes]] but only checks for the full state name.\n   * If params is supplied then it will be tested for strict equality against the current\n   * active params object, so all params must match with none missing and no extras.\n   *\n   * #### Example:\n   * ```js\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   * ```\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * ```html\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * ```\n   *\n   * @param stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param options An options object. The options are:\n   *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   *     test relative to `options.relative` state (or name).\n   *\n   * @returns Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: { relative?: StateOrName }): boolean {\n    options = defaults(options, { relative: this.$current });\n    const state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    if (!params) return true;\n\n    const schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  }\n\n  /**\n   * Checks if the current state *includes* the provided state\n   *\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * #### Example when `$state.$current.name === 'contacts.details.item'`\n   * ```js\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   * ```\n   *\n   * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n   * ```js\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * ```\n   *\n   * @param stateOrName A partial name, relative name, glob pattern,\n   *   or state object to be searched for within the current state name.\n   * @param params A param object, e.g. `{sectionId: section.id}`,\n   *   that you'd like to test against the current active state.\n   * @param options An options object. The options are:\n   *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   *     test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    const glob = isString(stateOrName) && Glob.fromString(<string> stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    const state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    if (!params) return true;\n\n    const schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  }\n\n\n  /**\n   * Generates a URL for a state and parameters\n   *\n   * Returns the url for the given state populated with the given params.\n   *\n   * #### Example:\n   * ```js\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * ```\n   *\n   * @param stateOrName The state name or state object you'd like to generate a url from.\n   * @param params An object of parameter values to fill the state's required parameters.\n   * @param options Options object. The options are:\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params: RawParams, options?: HrefOptions): string {\n    const defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current,\n    };\n    options = defaults(options, defaultHrefOpts);\n    params = params || {};\n\n    const state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any> this.params.$inherit(params, this.$current, state);\n\n    const nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.router.urlRouter.href(nav.url, params, {\n      absolute: options.absolute,\n    });\n  }\n\n  /** @hidden */\n  private _defaultErrorHandler: ((_error: any) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$);\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$.toString());\n      if ($error$.detail && $error$.detail.stack)\n        console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n\n  /**\n   * Sets or gets the default [[transitionTo]] error handler.\n   *\n   * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n   * This includes errors caused by resolves and transition hooks.\n   *\n   * Note:\n   * This handler does not receive certain Transition rejections.\n   * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n   *\n   * The built-in default error handler logs the error to the console.\n   *\n   * You can provide your own custom handler.\n   *\n   * #### Example:\n   * ```js\n   * stateService.defaultErrorHandler(function() {\n   *   // Do not log transitionTo errors\n   * });\n   * ```\n   *\n   * @param handler a global error handler function\n   * @returns the current global error handler\n   */\n  defaultErrorHandler(handler?: (error: any) => void): (error: any) => void {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * Gets a registered [[StateDeclaration]] object\n   *\n   * Returns the state declaration object for any specific state, or for all registered states.\n   *\n   * @param stateOrName (absolute or relative) If provided, will only get the declaration object for the requested state.\n   * If not provided, returns an array of ALL states.\n   * @param base When `stateOrName` is a relative state reference (such as `.bar.baz`), the state will be retrieved relative to this state.\n   *\n   * @returns a [[StateDeclaration]] object (or array of all registered [[StateDeclaration]] objects.)\n   */\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(): StateDeclaration[];\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    const reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n\n  /**\n   * Lazy loads a state\n   *\n   * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n   *\n   * @param stateOrName the state that should be lazy loaded\n   * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n   * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n   * This noop transition is not actually run.\n   *\n   * @returns a promise to lazy load\n   */\n  lazyLoad(stateOrName: StateOrName, transition?: Transition): Promise<LazyLoadResult> {\n    const state: StateDeclaration = this.get(stateOrName);\n    if (!state || !state.lazyLoad) throw new Error('Can not lazy load ' + stateOrName);\n\n    const currentPath = this.getCurrentPath();\n    const target = PathUtils.makeTargetState(this.router.stateRegistry, currentPath);\n    transition = transition || this.router.transitionService.create(currentPath, target);\n\n    return lazyLoadState(transition, state);\n  }\n}\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { isArray, isObject, $QLike } from '../common/index';\n\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexport const $q = {\n  /** Normalizes a value as a promise */\n  when: (val) => new Promise((resolve, reject) => resolve(val)),\n\n  /** Normalizes a value as a promise rejection */\n  reject: (val) => new Promise((resolve, reject) => { reject(val); }),\n\n  /** @returns a deferred object, which has `resolve` and `reject` functions */\n  defer: () => {\n    const deferred: any = {};\n    deferred.promise = new Promise((resolve, reject) => {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n\n  /** Like Promise.all(), but also supports object key/promise notation like $q */\n  all: (promises: { [key: string]: Promise<any> } | Promise<any>[]) => {\n    if (isArray(promises)) {\n      return Promise.all(promises);\n    }\n\n    if (isObject(promises)) {\n      // Convert promises map to promises array.\n      // When each promise resolves, map it to a tuple { key: key, val: val }\n      const chain = Object.keys(promises)\n          .map(key => promises[key].then(val => ({ key, val })));\n\n      // Then wait for all promises to resolve, and convert them back to an object\n      return $q.all(chain).then(values =>\n        values.reduce((acc, tuple) => { acc[tuple.key] = tuple.val; return acc; }, {}));\n    }\n  },\n} as $QLike;\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport {\n  extend, assertPredicate, isFunction, isArray, isInjectable, $InjectorLike, IInjectable,\n} from '../common/index';\n\n// globally available injectables\nconst globals = {};\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexport const $injector = {\n  /** Gets an object from DI based on a string token */\n  get: name => globals[name],\n\n  /** Returns true if an object named `name` exists in global DI */\n  has: (name) => $injector.get(name) != null,\n\n  /**\n   * Injects a function\n   *\n   * @param fn the function to inject\n   * @param context the function's `this` binding\n   * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n   */\n  invoke: (fn: IInjectable, context?, locals?) => {\n    const all = extend({}, globals, locals || {});\n    const params = $injector.annotate(fn);\n    const ensureExist = assertPredicate((key: string) => all.hasOwnProperty(key), key => `DI can't find injectable: '${key}'`);\n    const args = params.filter(ensureExist).map(x => all[x]);\n    if (isFunction(fn)) return fn.apply(context, args);\n    else return (fn as any[]).slice(-1)[0].apply(context, args);\n  },\n\n  /**\n   * Returns a function's dependencies\n   *\n   * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n   * @return an array of `string`s\n   */\n  annotate: (fn: IInjectable): any[] => {\n    if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n    if (fn && (fn as any).$inject) return (fn as any).$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    const fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    const result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  },\n} as $InjectorLike;\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport {\n  LocationConfig, LocationServices, identity, unnestR, isArray, splitEqual, splitHash, splitQuery,\n} from '../common';\nimport { UIRouter } from '../router';\n\nexport const keyValsToObjectR = (accum, [key, val]) => {\n  if (!accum.hasOwnProperty(key)) {\n    accum[key] = val;\n  } else if (isArray(accum[key])) {\n    accum[key].push(val);\n  } else {\n    accum[key] = [accum[key], val];\n  }\n  return accum;\n};\n\nexport const getParams = (queryString: string): any =>\n    queryString.split('&').filter(identity).map(splitEqual).reduce(keyValsToObjectR, {});\n\nexport function parseUrl(url: string) {\n  const orEmptyString = x => x || '';\n  const [beforehash, hash] = splitHash(url).map(orEmptyString);\n  const [path, search] = splitQuery(beforehash).map(orEmptyString);\n\n  return { path, search, hash, url };\n}\n\nexport const buildUrl = (loc: LocationServices) => {\n  const path = loc.path();\n  const searchObject = loc.search();\n  const hash = loc.hash();\n\n  const search = Object.keys(searchObject).map(key => {\n    const param = searchObject[key];\n    const vals = isArray(param) ? param : [param];\n    return vals.map(val => key + '=' + val);\n  }).reduce(unnestR, []).join('&');\n\n  return path + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n};\n\nexport function locationPluginFactory(\n    name: string,\n    isHtml5: boolean,\n    serviceClass: { new(uiRouter?: UIRouter): LocationServices },\n    configurationClass: { new(uiRouter?: UIRouter, isHtml5?: boolean): LocationConfig },\n) {\n  return function(uiRouter: UIRouter) {\n    const service       = uiRouter.locationService = new serviceClass(uiRouter);\n    const configuration = uiRouter.locationConfig  = new configurationClass(uiRouter, isHtml5);\n\n    function dispose(router: UIRouter) {\n      router.dispose(service);\n      router.dispose(configuration);\n    }\n\n    return { name, service, configuration, dispose };\n  };\n}\n",
    "/**\n * @internalapi\n * @module vanilla\n */ /** */\n\nimport { deregAll, isDefined, LocationServices, removeFrom, root } from '../common';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { HistoryLike, LocationLike } from './interface';\nimport { buildUrl, getParams, parseUrl } from './utils';\n\n/** A base `LocationServices` */\nexport abstract class BaseLocationServices implements LocationServices, Disposable {\n  private _listeners: Function[] = [];\n  _location: LocationLike;\n  _history: HistoryLike;\n\n  _listener = evt => this._listeners.forEach(cb => cb(evt));\n\n  constructor(router: UIRouter, public fireAfterUpdate: boolean) {\n    this._location = root.location;\n    this._history = root.history;\n  }\n\n  /**\n   * This should return the current internal URL representation.\n   *\n   * The internal URL includes only the portion that UI-Router matches.\n   * It does not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   */\n  protected abstract _get(): string;\n\n  /**\n   * This should set the current URL.\n   *\n   * The `url` param should include only the portion that UI-Router matches on.\n   * It should not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   *\n   * However, after this function completes, the browser URL should reflect the entire (fully qualified)\n   * HREF including those data.\n   */\n  protected abstract _set(state: any, title: string, url: string, replace: boolean);\n\n  hash   = () => parseUrl(this._get()).hash;\n  path   = () => parseUrl(this._get()).path;\n  search = () => getParams(parseUrl(this._get()).search);\n\n  url(url?: string, replace = true): string {\n    if (isDefined(url) && url !== this._get()) {\n      this._set(null, null, url, replace);\n\n      if (this.fireAfterUpdate) {\n        this._listeners.forEach(cb => cb({ url }));\n      }\n    }\n\n    return buildUrl(this);\n  }\n\n  onChange(cb: EventListener) {\n    this._listeners.push(cb);\n    return () => removeFrom(this._listeners, cb);\n  }\n\n  dispose(router: UIRouter) {\n    deregAll(this._listeners);\n  }\n}\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { root, trimHashVal } from '../common';\nimport { UIRouter } from '../router';\nimport { BaseLocationServices } from './baseLocationService';\n\n/** A `LocationServices` that uses the browser hash \"#\" to get/set the current location */\nexport class HashLocationService extends BaseLocationServices {\n  constructor(router: UIRouter) {\n    super(router, false);\n    root.addEventListener('hashchange', this._listener, false);\n  }\n\n  _get() {\n    return trimHashVal(this._location.hash);\n  }\n  _set(state: any, title: string, url: string, replace: boolean) {\n    this._location.hash = url;\n  }\n\n  dispose (router: UIRouter) {\n    super.dispose(router);\n    root.removeEventListener('hashchange', this._listener);\n  }\n}\n\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { BaseLocationServices } from './baseLocationService';\nimport { UIRouter } from '../router';\n\n/** A `LocationServices` that gets/sets the current location from an in-memory object */\nexport class MemoryLocationService extends BaseLocationServices {\n  _url: string;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n  }\n\n  _get() {\n    return this._url;\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean) {\n    this._url = url;\n  }\n}\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { UIRouter } from '../router';\nimport { BaseLocationServices } from './baseLocationService';\nimport { LocationConfig, root, splitHash, splitQuery, stripLastPathElement } from '../common';\n\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nexport class PushStateLocationService extends BaseLocationServices {\n  _config: LocationConfig;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n    this._config = router.urlService.config;\n    root.addEventListener('popstate', this._listener, false);\n  }\n\n  /**\n   * Gets the base prefix without:\n   * - trailing slash\n   * - trailing filename\n   * - protocol and hostname\n   *\n   * If <base href='/base/'>, this returns '/base'.\n   * If <base href='/foo/base/'>, this returns '/foo/base'.\n   * If <base href='/base/index.html'>, this returns '/base'.\n   * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.\n   * If <base href='/base'>, this returns ''.\n   * If <base href='http://localhost:8080'>, this returns ''.\n   * If <base href='http://localhost:8080/'>, this returns ''.\n   *\n   * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element\n   */\n  private _getBasePrefix() {\n    return stripLastPathElement(this._config.baseHref());\n  }\n\n  protected _get() {\n    let { pathname, hash, search } = this._location;\n    search = splitQuery(search)[1]; // strip ? if found\n    hash = splitHash(hash)[1]; // strip # if found\n\n    const basePrefix = this._getBasePrefix();\n    const exactBaseHrefMatch = pathname === this._config.baseHref();\n    const startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;\n    pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;\n\n    return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n  }\n\n  protected _set(state: any, title: string, url: string, replace: boolean) {\n    const basePrefix = this._getBasePrefix();\n    const slash = url && url[0] !== '/' ? '/' : '';\n    const fullUrl = (url === '' || url === '/') ? this._config.baseHref() : basePrefix + slash + url;\n\n    if (replace) {\n      this._history.replaceState(state, title, fullUrl);\n    } else {\n      this._history.pushState(state, title, fullUrl);\n    }\n  }\n\n  public dispose(router: UIRouter) {\n    super.dispose(router);\n    root.removeEventListener('popstate', this._listener);\n  }\n}\n\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { LocationConfig } from '../common/coreservices';\nimport { isDefined } from '../common/predicates';\nimport { noop } from '../common/common';\n\n/** A `LocationConfig` mock that gets/sets all config from an in-memory object */\nexport class MemoryLocationConfig implements LocationConfig {\n  dispose = noop;\n\n  _baseHref = '';\n  _port = 80;\n  _protocol = 'http';\n  _host = 'localhost';\n  _hashPrefix = '';\n\n  port = () => this._port;\n  protocol = () => this._protocol;\n  host = () => this._host;\n  baseHref = () => this._baseHref;\n  html5Mode = () => false;\n  hashPrefix = (newval?) => isDefined(newval) ? this._hashPrefix = newval : this._hashPrefix;\n}\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { isDefined } from '../common/predicates';\nimport { LocationConfig } from '../common/coreservices';\n\n/** A `LocationConfig` that delegates to the browser's `location` object */\nexport class BrowserLocationConfig implements LocationConfig {\n  private _baseHref = undefined;\n  private _hashPrefix = '';\n\n  constructor(router?, private _isHtml5 = false) { }\n\n  port(): number {\n    if (location.port) {\n      return Number(location.port);\n    }\n\n    return this.protocol() === 'https' ? 443 : 80;\n  }\n\n  protocol(): string {\n    return location.protocol.replace(/:/g, '');\n  }\n\n  host(): string {\n    return location.hostname;\n  }\n\n  html5Mode(): boolean {\n    return this._isHtml5;\n  }\n\n  hashPrefix(): string;\n  hashPrefix(newprefix?: string): string {\n    return isDefined(newprefix) ? this._hashPrefix = newprefix : this._hashPrefix;\n  }\n\n  baseHref(href?: string): string {\n    return isDefined(href) ? this._baseHref = href :\n      isDefined(this._baseHref) ? this._baseHref : this.applyDocumentBaseHref();\n  }\n\n  applyDocumentBaseHref() {\n    const baseTag: HTMLBaseElement = document.getElementsByTagName('base')[0];\n    return this._baseHref = baseTag ? baseTag.href.substr(location.origin.length) : location.pathname || '/';\n  }\n\n  dispose() {}\n}\n",
    "/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { BrowserLocationConfig } from './browserLocationConfig';\nimport { HashLocationService } from './hashLocationService';\nimport { locationPluginFactory } from './utils';\nimport { LocationPlugin, ServicesPlugin } from './interface';\nimport { UIRouter } from '../router';\nimport { PushStateLocationService } from './pushStateLocationService';\nimport { MemoryLocationService } from './memoryLocationService';\nimport { MemoryLocationConfig } from './memoryLocationConfig';\nimport { $injector } from './injector';\nimport { $q } from './q';\nimport { services } from '../common/coreservices';\n\nexport function servicesPlugin(router: UIRouter): ServicesPlugin {\n  services.$injector = $injector;\n  services.$q = $q;\n\n  return { name: 'vanilla.services', $q, $injector, dispose: () => null };\n}\n\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexport const hashLocationPlugin: (router: UIRouter) => LocationPlugin =\n    locationPluginFactory('vanilla.hashBangLocation', false, HashLocationService, BrowserLocationConfig);\n\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\nexport const pushStateLocationPlugin: (router: UIRouter) => LocationPlugin =\n    locationPluginFactory('vanilla.pushStateLocation', true, PushStateLocationService, BrowserLocationConfig);\n\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexport const memoryLocationPlugin: (router: UIRouter) => LocationPlugin =\n    locationPluginFactory('vanilla.memoryLocation', false, MemoryLocationService, MemoryLocationConfig);\n",
    "/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @coreapi\n * @preferred\n * @module core\n */ /** for typedoc */\n\n// Need to import or export at least one concrete something\nimport { noop } from './common/common';\nimport { UIRouter } from './router';\n\n/**\n * An interface for getting values from dependency injection.\n *\n * This is primarily used to get resolve values for a given token.\n * An instance of the `UIInjector` can be retrieved from the current transition using [[Transition.injector]].\n *\n * ---\n *\n * If no resolve is found for a token, then it will delegate to the native injector.\n * The native injector may be Angular 1 `$injector`, Angular 2 `Injector`, or a simple polyfill.\n *\n * In Angular 2, the native injector might be the root Injector,\n * or it might be a lazy loaded `NgModule` injector scoped to a lazy load state tree.\n */\nexport interface UIInjector {\n  /**\n   * Gets a value from the injector.\n   *\n   * For a given token, returns the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this throws an error.\n   *\n   * #### Example:\n   * ```js\n   * var myResolve = injector.get('myResolve');\n   * ```\n   *\n   * #### ng1 Example:\n   * ```js\n   * // Fetch StateService\n   * injector.get('$state').go('home');\n   * ```\n   *\n   * #### ng2 Example:\n   * ```js\n   * import {StateService} from \"ui-router-ng2\";\n   * // Fetch StateService\n   * injector.get(StateService).go('home');\n   * ```\n   *\n   * #### Typescript Example:\n   * ```js\n   * var stringArray = injector.get<string[]>('myStringArray');\n   * ```\n   *\n   * ### `NOWAIT` policy\n   *\n   * When using [[ResolvePolicy.async]] === `NOWAIT`, the value returned from `get()` is a promise for the result.\n   * The promise is not automatically unwrapped.\n   *\n   * @param token the key for the value to get.  May be a string, a class, or any arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  get(token: any): any;\n  /** Gets a value as type `T` (generics parameter) */\n  get<T>(token: any): T;\n\n  /**\n   * Asynchronously gets a value from the injector\n   *\n   * For a given token, returns a promise for the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this triggers the resolve to load.\n   *\n   * #### Example:\n   * ```js\n   * return injector.getAsync('myResolve').then(value => {\n   *   if (value === 'declined') return false;\n   * });\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return a Promise for the Dependency Injection value that matches the token\n   */\n  getAsync(token: any): Promise<any>;\n  /** Asynchronously gets a value as type `T` (generics parameter) */\n  getAsync<T>(token: any): Promise<T>;\n\n  /**\n   * Gets a value from the native injector\n   *\n   * Returns a value from the native injector, bypassing anything in the [[ResolveContext]].\n   *\n   * Example:\n   * ```js\n   * let someThing = injector.getNative(SomeToken);\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  getNative(token: any): any;\n  getNative<T>(token: any): T;\n}\n\n/** @internalapi */\nexport interface UIRouterPlugin extends Disposable {\n  name: string;\n}\n\n/** @internalapi */\nexport abstract class UIRouterPluginBase implements UIRouterPlugin, Disposable {\n  abstract name: string;\n  dispose(router: UIRouter) { }\n}\n\n/** @internalapi */\nexport interface Disposable {\n  /** Instructs the Disposable to clean up any resources */\n  dispose(router?: UIRouter);\n}\n"
  ],
  "names": [
    "fn",
    "initial_args",
    "slice",
    "apply",
    "arguments",
    "func_args_length",
    "length",
    "args",
    "curried",
    "concat",
    "start",
    "i",
    "result",
    "this",
    "call",
    "_i",
    "funcs",
    "compose",
    "reverse",
    "prop",
    "name",
    "obj",
    "propEq",
    "curry",
    "_val",
    "parse",
    "pipe",
    "split",
    "map",
    "not",
    "fn1",
    "fn2",
    "all",
    "arr",
    "reduce",
    "b",
    "x",
    "any",
    "is",
    "ctor",
    "constructor",
    "val",
    "v",
    "fnName",
    "struct",
    "text",
    "glob",
    "regexpString",
    "seg",
    "join",
    "regexp",
    "RegExp",
    "Glob",
    "exec",
    "test",
    "config",
    "StateObject",
    "create",
    "stateDecl",
    "isStateClass",
    "state",
    "inherit",
    "prototype",
    "$$state",
    "self",
    "__stateObjectCache",
    "nameGlob",
    "fromString",
    "ref",
    "fqn",
    "parent",
    "root",
    "opts",
    "defaults",
    "matchingKeys",
    "parameters",
    "values",
    "params",
    "filter",
    "param",
    "hasOwnProperty",
    "id",
    "url",
    "parameter",
    "find",
    "isFunction",
    "isObject",
    "toStr",
    "Object",
    "toString",
    "tis",
    "t",
    "isUndefined",
    "isDefined",
    "isNull",
    "o",
    "isNullOrUndefined",
    "or",
    "isNumber",
    "isString",
    "isArray",
    "Array",
    "isDate",
    "isRegExp",
    "isState",
    "head",
    "tail",
    "isPromise",
    "and",
    "notImplemented",
    "fnname",
    "Error",
    "services",
    "$q",
    "undefined",
    "$injector",
    "global",
    "angular",
    "fromJson",
    "JSON",
    "bind",
    "toJson",
    "stringify",
    "forEach",
    "cb",
    "_this",
    "keys",
    "key",
    "extend",
    "assign",
    "_extend",
    "equals",
    "_equals",
    "source",
    "target",
    "fnNames",
    "latebind",
    "bindFunction",
    "acc",
    "extra",
    "inArray",
    "_inArray",
    "array",
    "indexOf",
    "removeFrom",
    "_removeFrom",
    "idx",
    "splice",
    "pushTo",
    "_pushTo",
    "push",
    "deregAll",
    "functions",
    "defaultsList",
    "_defaultsList",
    "defaultVals",
    "pick",
    "mergeR",
    "memo",
    "item",
    "first",
    "second",
    "path",
    "n",
    "propNames",
    "objCopy",
    "_prop",
    "collection",
    "callback",
    "accept",
    "mapObj",
    "allTrueR",
    "elem",
    "anyTrueR",
    "unnestR",
    "flattenR",
    "pushR",
    "uniqR",
    "token",
    "unnest",
    "assertPredicate",
    "assertFn",
    "assertMap",
    "predicateOrMap",
    "errMsg",
    "maxArrayLen",
    "min",
    "Math",
    "keyValTuple",
    "value",
    "src",
    "dest",
    "toObj",
    "j",
    "o1",
    "o2",
    "t1",
    "a1",
    "a2",
    "tup",
    "arrayTuples",
    "getTime",
    "RejectType",
    "silenceUncaughtInPromise",
    "promise",
    "catch",
    "e",
    "silentRejection",
    "error",
    "reject",
    "_items",
    "_limit",
    "_evictListeners",
    "Queue",
    "items",
    "evict",
    "shift",
    "size",
    "current",
    "type",
    "message",
    "detail",
    "Rejection",
    "then",
    "_transitionRejection",
    "options",
    "rejection",
    "SUPERSEDED",
    "redirected",
    "superseded",
    "INVALID",
    "IGNORED",
    "ABORTED",
    "ERROR",
    "errored",
    "d",
    "uiview",
    "creationContext",
    "$type",
    "input",
    "Category",
    "consoleLog",
    "Function",
    "console",
    "log",
    "consoletable",
    "table",
    "TransitionHookPhase",
    "TransitionHookScope",
    "_tid",
    "_rid",
    "transLbl",
    "trans",
    "approximateDigests",
    "Trace",
    "enabled",
    "categories",
    "k",
    "parseInt",
    "isNaN",
    "normalizedCat",
    "category",
    "_enabled",
    "_set",
    "TRANSITION",
    "step",
    "HOOK",
    "event",
    "context",
    "functionToString",
    "registeredHook",
    "maxLength",
    "hookResult",
    "transitionOptions",
    "when",
    "RESOLVE",
    "resolvable",
    "data",
    "reason",
    "finalState",
    "viewData",
    "UIVIEW",
    "padString",
    "uiViewString",
    "traceUIViewEvent",
    "html",
    "pairs",
    "VIEWCONFIG",
    "uivheader",
    "mapping",
    "_a",
    "uiView",
    "viewConfig",
    "uiv",
    "cfg",
    "viewDecl",
    "$context",
    "$name",
    "_b",
    "sort",
    "a",
    "localeCompare",
    "view",
    "$id",
    "$uiViewName",
    "$uiViewContextAnchor",
    "viewConfigString",
    "trace",
    "_stateRegistry",
    "_identifier",
    "_params",
    "_options",
    "_definition",
    "matcher",
    "relative",
    "TargetState",
    "base",
    "stateName",
    "replace",
    "newParams",
    "newOpts",
    "defaultOptions",
    "noop",
    "transition",
    "traceData",
    "stateContext",
    "hookPhase",
    "RUN",
    "isActive",
    "eventType",
    "TransitionHook",
    "hooks",
    "waitFor",
    "prev",
    "nextHook",
    "invokeHook",
    "doneCallback",
    "remainingHooks",
    "chain",
    "hook",
    "err",
    "router",
    "stateService",
    "defaultErrorHandler",
    "_deregistered",
    "notCurrent",
    "getNotCurrentRejection",
    "traceHookInvocation",
    "handleError",
    "getErrorHandler",
    "handleResult",
    "getResultHandler",
    "synchronous",
    "normalize",
    "toPromise",
    "invokeLimit",
    "invokeCount",
    "deregister",
    "handleHookResult",
    "traceHookResult",
    "aborted",
    "isTargetState",
    "_disposed",
    "_aborted",
    "isSuperseded",
    "fnToString",
    "logError",
    "criterion",
    "toMatch",
    "_state",
    "globStrings",
    "matches",
    "tranSvc",
    "matchCriteria",
    "removeHookFromRegistry",
    "priority",
    "RegisteredHook",
    "nodes",
    "matching",
    "node",
    "matchState",
    "_pluginapi",
    "_getPathTypes",
    "treeChanges",
    "criteria",
    "_getDefaultMatchCriteria",
    "mn",
    "pathtype",
    "isStateHook",
    "scope",
    "STATE",
    "_matchingNodes",
    "_getMatchingNodes",
    "every",
    "identity",
    "registry",
    "transitionService",
    "_registeredHooks",
    "removeHookFn",
    "matchObject",
    "hookRegistrationFn",
    "HookBuilder",
    "phase",
    "_getEvents",
    "buildHooks",
    "hookType",
    "matchingHooks",
    "getMatchingHooks",
    "baseHookOptions",
    "criteriaMatchPath",
    "transitionHook",
    "reverseDepthSort",
    "l",
    "r",
    "factor",
    "depthDelta",
    "tupleSort",
    "reverseSort",
    "tuple",
    "isCreate",
    "CREATE",
    "$transitions",
    "reg",
    "getHooks",
    "def",
    "ParamType",
    "sub",
    "pattern",
    "substr",
    "decode",
    "mode",
    "isSearch",
    "allTruthyMode",
    "arrayWrap",
    "arrayUnwrap",
    "val1",
    "val2",
    "left",
    "right",
    "paramTypeFn",
    "wrapperFn",
    "arrayEqualsHandler",
    "arrayHandler",
    "dynamic",
    "$arrayMode",
    "DefType",
    "hasOwn",
    "isShorthand",
    "location",
    "urlMatcherFactory",
    "urlType",
    "paramTypes",
    "CONFIG",
    "PATH",
    "SEARCH",
    "getType",
    "getStaticDefaultValue",
    "$$fn",
    "isInjectable",
    "unwrapShorthand",
    "arrayDefaults",
    "arrayParamNomenclature",
    "arrayMode",
    "match",
    "$asArray",
    "isOptional",
    "raw",
    "squash",
    "defaultPolicy",
    "getSquashPolicy",
    "defaultSquashPolicy",
    "from",
    "to",
    "configuredKeys",
    "getReplace",
    "Param",
    "paramValues",
    "params_1",
    "values1",
    "values2",
    "changed",
    "validates",
    "replaceSpecialValues",
    "_defaultValueCache",
    "defaultValue",
    "invoke",
    "getDefaultValue",
    "$normalize",
    "normalized",
    "encoded",
    "encode",
    "stateOrNode",
    "PathNode",
    "paramSchema",
    "resolvables",
    "views",
    "res",
    "clone",
    "pDef",
    "applyPairs",
    "paramDef",
    "paramsFn",
    "diff",
    "PathUtils",
    "targetState",
    "toParams",
    "$state",
    "applyRawParams",
    "fromPath",
    "toPath",
    "buildPath",
    "inheritParams",
    "$view",
    "states",
    "viewDecls",
    "subPath",
    "viewConfigs",
    "createViewConfig",
    "toKeys",
    "noInherit",
    "toNode",
    "toParamVals",
    "incomingParamVals",
    "omit",
    "fromParamVals",
    "ownParamVals",
    "reloadState",
    "node1",
    "node2",
    "retained",
    "exiting",
    "entering",
    "max",
    "keep",
    "nonDynamicParams",
    "retainedWithToParams",
    "retainedNode",
    "cloned",
    "pathA",
    "pathB",
    "done",
    "nodeA",
    "nodeB",
    "predicate",
    "elementIdx",
    "defaultResolvePolicy",
    "async",
    "arg1",
    "resolveFn",
    "deps",
    "policy",
    "Resolvable",
    "resolved",
    "literal",
    "thisPolicy",
    "statePolicy",
    "resolvePolicy",
    "resolveContext",
    "findNode",
    "maybeWaitForRx",
    "getPolicy",
    "observable$",
    "cached",
    "cache",
    "take",
    "getDependencies",
    "get",
    "resolvedDeps",
    "resolvedValue",
    "traceResolvableResolved",
    "resolve",
    "resolvePolicies",
    "LAZY",
    "EAGER",
    "WAIT",
    "NOWAIT",
    "RXWAIT",
    "whens",
    "ALL_WHENS",
    "EAGER_WHENS",
    "NATIVE_INJECTOR_TOKEN",
    "_path",
    "ResolveContext",
    "newResolvables",
    "matchedWhens",
    "traceResolvePath",
    "matchesPolicy",
    "acceptedVals",
    "whenOrAsync",
    "promises",
    "nodeResolvables",
    "nowait",
    "wait",
    "subContext",
    "getResult",
    "_injector",
    "UIInjectorImpl",
    "availableResolvables",
    "_node",
    "fromInjector",
    "injector",
    "getNative",
    "native",
    "getResolvable",
    "stateSelf",
    "defer",
    "_deferred",
    "globals",
    "_targetState",
    "valid",
    "_transitionCount",
    "buildToPath",
    "_treeChanges",
    "createTransitionHookRegFns",
    "onCreateHooks",
    "_hookBuilder",
    "buildHooksForPhase",
    "invokeHooks",
    "applyViewConfigs",
    "Transition",
    "makeEvent",
    "hookName",
    "enteringStates",
    "$from",
    "$to",
    "compare",
    "pathname",
    "freeze",
    "pathName",
    "getTokens",
    "topath",
    "targetNode",
    "addResolvables",
    "redirectedFrom",
    "rf",
    "originalTransition",
    "redirects",
    "redirectOpts",
    "newOptions",
    "withOptions",
    "newTransition",
    "originalEnteringNodes",
    "redirectEnteringNodes",
    "includes",
    "tc",
    "reload",
    "nodeSchemas",
    "schema",
    "toVals",
    "fromVals",
    "changes",
    "_changedParams",
    "_ignoredReason",
    "pending",
    "same",
    "newTC",
    "pendTC",
    "runAllHooks",
    "getHooksFor",
    "allBeforeHooks",
    "BEFORE",
    "lastStartedTransitionId",
    "transitionHistory",
    "enqueue",
    "traceTransitionStart",
    "allRunHooks",
    "traceSuccess",
    "success",
    "SUCCESS",
    "traceError",
    "_error",
    "abstract",
    "paramDefs",
    "invalidParams",
    "fromStateOrName",
    "toStateOrName",
    "avoidEmptyHash",
    "str",
    "fnStr",
    "namedFunctionMatch",
    "_fn",
    "stringifyPatternFn",
    "stringifyPattern",
    "isRejection",
    "isRejectionPromise",
    "seen",
    "format",
    "beforeAfterSubstr",
    "char",
    "hostRegex",
    "stripLastPathElement",
    "splitHash",
    "splitQuery",
    "splitEqual",
    "trimHashVal",
    "delim",
    "re",
    "makeDefaultType",
    "ParamTypes",
    "types",
    "defaultTypes",
    "definition",
    "definitionFn",
    "typeQueue",
    "_flushTypeQueue",
    "valToString",
    "defaultTypeBase",
    "String",
    "string",
    "query",
    "hash",
    "int",
    "bool",
    "Boolean",
    "date",
    "getFullYear",
    "getMonth",
    "getDate",
    "capture",
    "Date",
    "valueOf",
    "json",
    "StateParams",
    "$current",
    "parentParams",
    "parents",
    "ancestors",
    "inherited",
    "inheritList",
    "getUrlBuilder",
    "$urlMatcherFactoryProvider",
    "stateDec",
    "parsed",
    "charAt",
    "substring",
    "parseUrl",
    "compile",
    "paramMap",
    "paramConfig",
    "reloadOnSearch",
    "isMatcher",
    "navigable",
    "append",
    "getNavigableBuilder",
    "isRoot",
    "getParamsBuilder",
    "paramFactory",
    "urlParams",
    "nonUrlParams",
    "fromConfig",
    "p",
    "resolveObj",
    "getToken",
    "provide",
    "literal2Resolvable",
    "useFactory",
    "dependencies",
    "useClass",
    "useValue",
    "useExisting",
    "tuple2Resolvable",
    "annotate",
    "strictDi",
    "item2Resolvable",
    "decl",
    "builders",
    "nameBuilder",
    "selfBuilder",
    "parentName",
    "dataBuilder",
    "pathBuilder",
    "includesBuilder",
    "resolvablesBuilder",
    "StateBuilder",
    "parentFn",
    "segments",
    "pop",
    "_states",
    "StateMatcher",
    "stateOrName",
    "matchGlob",
    "isStr",
    "isRelative",
    "resolvePath",
    "baseState",
    "splitName",
    "pathLength",
    "relName",
    "$registry",
    "$urlRouter",
    "builder",
    "listeners",
    "queue",
    "StateQueueManager",
    "flush",
    "registered",
    "orphans",
    "previousQueueLength",
    "getState",
    "name_1",
    "build",
    "orphanIdx",
    "existingState",
    "existingFutureState",
    "attachRoute",
    "listener",
    "s",
    "rule",
    "urlRuleFactory",
    "_router",
    "stateQueue",
    "urlRouter",
    "_registerRoot",
    "StateRegistry",
    "_root",
    "register",
    "#",
    "dispose",
    "stateDefinition",
    "getChildren",
    "_children",
    "children",
    "deregistered",
    "$ur",
    "rules",
    "removeRule",
    "deregisteredStates",
    "_deregisterTree",
    "found",
    "func",
    "surroundPattern",
    "splitOnSlash",
    "splitOnDelim",
    "strict",
    "caseInsensitive",
    "matchArray",
    "segment",
    "placeholder",
    "searchPlaceholder",
    "patterns",
    "last",
    "checkParamErrors",
    "UrlMatcher",
    "nameValidator",
    "matchDetails",
    "m",
    "index",
    "_segments",
    "lastIndex",
    "search",
    "fromSearch",
    "_compiled",
    "_pattern",
    "quoteRegExp",
    "encodeURIComponent",
    "c",
    "charCodeAt",
    "toUpperCase",
    "weights",
    "_cache",
    "pathSegmentsAndParams",
    "joinNeighborsR",
    "weightsA",
    "weightsB",
    "padVal",
    "len",
    "padArrays",
    "cmp",
    "_pairs",
    "reverseString",
    "allParams",
    "pathParams",
    "searchParams",
    "nPathSegments",
    "urlm",
    "findParam",
    "urlMatchers",
    "getDetails",
    "queryParams",
    "isValid",
    "isDefaultValue",
    "pathString",
    "encodeDashes",
    "queryString",
    "paramDetails",
    "_isStrictMode",
    "_isCaseInsensitive",
    "UrlMatcherFactory",
    "_defaultSquashPolicy",
    "_getConfig",
    "object",
    "UrlRuleFactory",
    "what",
    "handler",
    "makeRule",
    "_what",
    "fromUrlMatcher",
    "fromState",
    "fromRegExp",
    "BaseUrlRule",
    "urlMatcher",
    "_handler",
    "details",
    "matchPriority",
    "optional",
    "href",
    "transitionTo",
    "sticky",
    "Number",
    "defaultRuleSortFn",
    "prioritySort",
    "URLMATCHER",
    "REGEXP",
    "RAW",
    "OTHER",
    "typeSort",
    "urlMatcherSort",
    "useMatchPriority",
    "idSort",
    "createProxyFunctions",
    "UrlRouter",
    "listen",
    "_rules",
    "_otherwiseFn",
    "compareFn",
    "stableSort",
    "_sortFn",
    "_sorted",
    "arrOfWrapper",
    "wrapperA",
    "wrapperB",
    "cmpDiff",
    "wrapper",
    "ensureSorted",
    "best",
    "weight",
    "evt",
    "defaultPrevented",
    "$url",
    "urlService",
    "newurl",
    "isDef",
    "go",
    "applyResult",
    "_stopFn",
    "onChange",
    "sync",
    "read",
    "locationService",
    "absolute",
    "isHtml5",
    "html5Mode",
    "hashPrefix",
    "baseHref",
    "appendBasePath",
    "slash",
    "cfgPort",
    "port",
    "protocol",
    "host",
    "isUrlRule",
    "_id",
    "handlerFn",
    "getHandlerFn",
    "urlParts",
    "interceptDeferred",
    "_rootViewContext",
    "_viewConfigFactory",
    "_registeredUIViews",
    "_uiViews",
    "_activeViewConfigs",
    "_viewConfigs",
    "_onSync",
    "_listeners",
    "ViewService",
    "rawViewName",
    "viewAtContext",
    "uiViewName",
    "uiViewContextAnchor",
    "relativeViewNameSugar",
    "anchor",
    "_rootContext",
    "viewType",
    "factory",
    "_viewConfigFactories",
    "cfgFactory",
    "cfgs",
    "traceViewServiceEvent",
    "uiViewsByFqn",
    "count",
    "depthCompare",
    "depthFn",
    "posNeg",
    "uiViewTuples",
    "stateDepth",
    "matchingConfigs",
    "viewConfigDepth",
    "matchedViewConfigs",
    "unmatchedConfigTuples",
    "configUpdated",
    "allTuples",
    "traceViewSync",
    "traceViewServiceUIViewEvent",
    "uiViews",
    "vc",
    "vcSegments",
    "uivSegments",
    "negOffset",
    "fqnToFirstSegment",
    "uiViewContext",
    "UIRouterGlobals",
    "clear",
    "successfulTransitions",
    "makeStub",
    "locationServicesFns",
    "locationConfigFns",
    "umfFns",
    "rulesFns",
    "syncFns",
    "lateBind",
    "locationServices",
    "locationConfig",
    "umf",
    "UrlService",
    "_routerInstance",
    "locationServiceStub",
    "locationConfigStub",
    "TransitionService",
    "StateService",
    "viewService",
    "stateRegistry",
    "disposable",
    "UIRouter",
    "_disposables",
    "ignored",
    "plugin",
    "pluginInstance",
    "_plugins",
    "pluginName",
    "addResolvable",
    "fromData",
    "isTransition",
    "treeChangesCleanup",
    "replaceTransitionWithNull",
    "redirectToHook",
    "redirect",
    "redirectTo",
    "hookFn",
    "onExitHook",
    "makeEnterExitRetainHook",
    "onRetainHook",
    "onEnterHook",
    "eagerResolvePath",
    "lazyResolveState",
    "resolveRemaining",
    "loadEnteringViews",
    "enteringViews",
    "load",
    "activateViews",
    "exitingViews",
    "deactivateViewConfig",
    "activateViewConfig",
    "updateGlobalState",
    "clearCurrentTransition",
    "onSuccess",
    "copy",
    "updateUrl",
    "urlOptions",
    "update",
    "lazyLoadHook",
    "lazyLoad",
    "lazyLoadState",
    "orig",
    "identifier",
    "parts",
    "lazyLoadFn",
    "hookOrder",
    "HANDLE_RESULT",
    "REJECT_ERROR",
    "ignoredReason",
    "traceTransitionIgnored",
    "abort",
    "defaultTransOpts",
    "notify",
    "custom",
    "_deregisterHookFns",
    "_defineCorePaths",
    "_defineCoreEvents",
    "_registerCoreTransitionHooks",
    "onEvict",
    "hooksArray",
    "Phase",
    "TH",
    "paths",
    "_criteriaPaths",
    "_defineEvent",
    "LOG_REJECTED_RESULT",
    "THROW_ERROR",
    "LOG_ERROR",
    "_definePathType",
    "TransitionEventType",
    "_eventTypes",
    "cmpByPhase",
    "hookScope",
    "fns",
    "addCoreResolves",
    "onCreate",
    "addCoreResolvables",
    "onBefore",
    "ignoredHook",
    "registerIgnoredTransitionHook",
    "invalid",
    "invalidTransitionHook",
    "registerInvalidTransitionHook",
    "onStart",
    "registerRedirectToHook",
    "onExit",
    "registerOnExitHook",
    "onRetain",
    "registerOnRetainHook",
    "onEnter",
    "registerOnEnterHook",
    "eagerResolve",
    "registerEagerResolvePath",
    "lazyResolve",
    "registerLazyResolveState",
    "resolveAll",
    "onFinish",
    "registerResolveRemaining",
    "loadViews",
    "registerLoadEnteringViews",
    "registerActivateViews",
    "updateGlobals",
    "registerUpdateGlobalState",
    "registerUpdateUrl",
    "registerLazyLoadHook",
    "$error$",
    "stack",
    "boundFns",
    "invalidCallbacks",
    "toState",
    "makeTargetState",
    "latestThing",
    "peekTail",
    "latest",
    "callbackQueue",
    "checkForRedirect",
    "nextCallback",
    "dequeue",
    "invokeNextCallback",
    "transOpts",
    "latestSuccess",
    "currentPath",
    "getCurrentPath",
    "exists",
    "_handleInvalidTargetState",
    "rejectedTransitionHandler",
    "isLatest",
    "run",
    "errorHandler",
    "transitionToPromise",
    "include",
    "lossy",
    "$inherit",
    "nav",
    "_defaultErrorHandler",
    "Promise",
    "deferred",
    "STRIP_COMMENTS",
    "ARGUMENT_NAMES",
    "has",
    "locals",
    "ensureExist",
    "$inject",
    "keyValsToObjectR",
    "accum",
    "getParams",
    "orEmptyString",
    "beforehash",
    "buildUrl",
    "loc",
    "searchObject",
    "serviceClass",
    "configurationClass",
    "uiRouter",
    "service",
    "configuration",
    "fireAfterUpdate",
    "_get",
    "_location",
    "_history",
    "history",
    "BaseLocationServices",
    "_super",
    "addEventListener",
    "_listener",
    "__extends",
    "HashLocationService",
    "title",
    "removeEventListener",
    "MemoryLocationService",
    "_url",
    "_config",
    "PushStateLocationService",
    "basePrefix",
    "_getBasePrefix",
    "exactBaseHrefMatch",
    "startsWithBase",
    "fullUrl",
    "replaceState",
    "pushState",
    "_port",
    "_protocol",
    "_host",
    "_baseHref",
    "newval",
    "_hashPrefix",
    "_isHtml5",
    "BrowserLocationConfig",
    "hostname",
    "newprefix",
    "applyDocumentBaseHref",
    "baseTag",
    "document",
    "getElementsByTagName",
    "origin",
    "hashLocationPlugin",
    "locationPluginFactory",
    "pushStateLocationPlugin",
    "memoryLocationPlugin",
    "MemoryLocationConfig",
    "UIRouterPluginBase",
    "propName",
    "other",
    "camelCase",
    "$1",
    "toLowerCase"
  ],
  "mappings": "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"
}