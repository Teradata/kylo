{
  "version": 3,
  "file": "ui-router-rx.min.js",
  "sources": [
    "@uirouter/rx/ui-router-rx.ts"
  ],
  "sourcesContent": [
    "/** @module rx */\n/** */\nimport \"rxjs/add/operator/mergeMap\";\nimport \"rxjs/add/operator/map\";\nimport { Observable } from \"rxjs/Observable\";\nimport { ReplaySubject } from \"rxjs/ReplaySubject\";\nimport { Transition, UIRouter, StateDeclaration, UIRouterPlugin } from \"@uirouter/core\";\n\nexport interface StatesChangedEvent {\n  currentStates: StateDeclaration[];\n  registered: StateDeclaration[];\n  deregistered: StateDeclaration[];\n}\n\ndeclare module '@uirouter/core/lib/globals' {\n  interface UIRouterGlobals {\n    states$?: Observable<StatesChangedEvent>;\n    start$?: Observable<Transition>;\n    success$?: Observable<Transition>;\n    params$?: Observable<{ [paramName: string]: any }>;\n  }\n}\n\n/** Augments UIRouterGlobals with observables for transition starts, successful transitions, and state parameters */\nexport class UIRouterRx implements UIRouterPlugin {\n  name = '@uirouter/rx';\n  private deregisterFns: Function[] = [];\n\n  constructor(router: UIRouter) {\n    let start$ = new ReplaySubject<Transition>(1);\n    let success$ = <Observable<Transition>> start$.mergeMap((t: Transition) => t.promise.then(() => t));\n    let params$ = success$.map((transition: Transition) => transition.params());\n\n    let states$ = new ReplaySubject<StatesChangedEvent>(1);\n\n    function onStatesChangedEvent(event: string, states: StateDeclaration[]) {\n      let changeEvent = {\n        currentStates: router.stateRegistry.get(),\n        registered: [],\n        deregistered: []\n      };\n\n      if (event) changeEvent[event] = states;\n      states$.next(changeEvent);\n    }\n\n    this.deregisterFns.push(router.transitionService.onStart({}, transition => start$.next(transition)));\n    this.deregisterFns.push(router.stateRegistry.onStatesChanged(onStatesChangedEvent));\n    onStatesChangedEvent(null, null);\n    Object.assign(router.globals, { start$, success$, params$, states$ });\n  }\n\n  dispose() {\n    this.deregisterFns.forEach(deregisterFn => deregisterFn());\n    this.deregisterFns = [];\n  }\n}\n\nexport const UIRouterRxPlugin = UIRouterRx;\n"
  ],
  "names": [
    "router",
    "event",
    "states",
    "changeEvent",
    "currentStates",
    "stateRegistry",
    "get",
    "registered",
    "deregistered",
    "states$",
    "next",
    "this",
    "start$",
    "ReplaySubject",
    "success$",
    "mergeMap",
    "t",
    "promise",
    "then",
    "params$",
    "map",
    "transition",
    "params",
    "deregisterFns",
    "push",
    "transitionService",
    "onStart",
    "onStatesChanged",
    "onStatesChangedEvent",
    "Object",
    "assign",
    "globals",
    "UIRouterRx",
    "forEach",
    "deregisterFn",
    "UIRouterRxPlugin"
  ],
  "mappings": ";;;;;;wZAwBA,kBAIE,WAAYA,GAOV,WAA8BC,EAAeC,GAC3C,GAAIC,IACFC,cAAeJ,EAAOK,cAAcC,MACpCC,cACAC,gBAGEP,KAAOE,EAAYF,GAASC,GAChCO,EAAQC,KAAKP,GAlBjBQ,UAAO,eACCA,qBAGN,IAAIC,GAAS,GAAIC,iBAA0B,GACvCC,EAAoCF,EAAOG,SAAS,SAACC,GAAkB,MAAAA,GAAEC,QAAQC,KAAK,WAAM,MAAAF,OAC5FG,EAAUL,EAASM,IAAI,SAACC,GAA2B,MAAAA,GAAWC,WAE9Db,EAAU,GAAII,iBAAkC,EAapDF,MAAKY,cAAcC,KAAKxB,EAAOyB,kBAAkBC,WAAY,SAAAL,GAAc,MAAAT,GAAOF,KAAKW,MACvFV,KAAKY,cAAcC,KAAKxB,EAAOK,cAAcsB,gBAAgBC,IAC7DA,EAAqB,KAAM,MAC3BC,OAAOC,OAAO9B,EAAO+B,SAAWnB,SAAQE,WAAUK,UAASV,YAO/D,MAJEuB,qBAAA,WACErB,KAAKY,cAAcU,QAAQ,SAAAC,GAAgB,MAAAA,OAC3CvB,KAAKY,uBAIIY,EAAmBH"
}