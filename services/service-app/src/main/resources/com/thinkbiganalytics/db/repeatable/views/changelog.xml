<?xml version="1.0" encoding="utf-8"?>
<!--
  #%L
  kylo-service-app
  %%
  Copyright (C) 2017 ThinkBig Analytics
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">

  <changeSet id="1" author="ru186002" runOnChange="true">
    <createView replaceIfExists="true" viewName="CHECK_DATA_TO_FEED_VW">
      <![CDATA[
        SELECT FEED_ID FEED_ID, f2.NAME as FEED_NAME, check_feeds.CHECK_DATA_FEED_ID as KYLO_FEED_ID, f.NAME as KYLO_FEED_NAME
         FROM FEED_CHECK_DATA_FEEDS check_feeds
         INNER JOIN FEED f on f.ID = check_feeds.CHECK_DATA_FEED_ID
         INNER JOIN FEED f2 on f2.ID = check_feeds.FEED_ID
         WHERE f.FEED_TYPE = 'CHECK'
        UNION ALL
        SELECT ID,NAME,id, NAME from FEED
        WHERE FEED_TYPE = 'FEED'
      ]]>
    </createView>
  </changeSet>

  <changeSet id="2" author="ru186002" runOnChange="true">
    <createView replaceIfExists="true" viewName="BATCH_FEED_SUMMARY_COUNTS_VW">
      <![CDATA[
        SELECT f.FEED_ID as FEED_ID,f.FEED_NAME as FEED_NAME,
               count(e2.JOB_EXECUTION_ID) as ALL_COUNT,
               count(case when e2.status <>'ABANDONED' AND (e2.status = 'FAILED' or e2.EXIT_CODE = 'FAILED') then 1 else null end) as FAILED_COUNT,
               count(case when e2.status <>'ABANDONED' AND (e2.EXIT_CODE = 'COMPLETED') then 1 else null end) as COMPLETED_COUNT,
               count(case when e2.status = 'ABANDONED'then 1 else null end) as ABANDONED_COUNT,
                count(case when e2.status IN('STARTING','STARTED')then 1 else null end) as RUNNING_COUNT
        FROM   BATCH_JOB_EXECUTION e2
        INNER JOIN BATCH_JOB_INSTANCE i on i.JOB_INSTANCE_ID = e2.JOB_INSTANCE_ID
        INNER JOIN CHECK_DATA_TO_FEED_VW f on f.KYLO_FEED_ID = i.FEED_ID
        group by f.feed_id, f.feed_name
      ]]>
    </createView>
  </changeSet>

  <changeSet id="3" author="ru186002" runOnChange="true">
    <createView replaceIfExists="true" viewName="LATEST_FEED_JOB_END_TIME_VW">
      <![CDATA[
        SELECT f.id as FEED_ID, MAX(e.END_TIME) END_TIME
        FROM
           BATCH_JOB_EXECUTION e
           INNER JOIN BATCH_JOB_INSTANCE i on i.JOB_INSTANCE_ID = e.JOB_INSTANCE_ID
           INNER JOIN FEED f on f.id = i.FEED_ID
           GROUP by f.id
      ]]>
    </createView>
  </changeSet>

  <changeSet id="4" author="ru186002" runOnChange="true">
    <createView replaceIfExists="true" viewName="LATEST_FEED_JOB_VW">
      <![CDATA[
        SELECT f.id as FEED_ID, MAX(e.JOB_EXECUTION_ID) JOB_EXECUTION_ID
        FROM
           BATCH_JOB_EXECUTION e
           INNER JOIN BATCH_JOB_INSTANCE i on i.JOB_INSTANCE_ID = e.JOB_INSTANCE_ID
           INNER JOIN FEED f on f.id = i.FEED_ID
           GROUP by f.id
      ]]>
    </createView>
  </changeSet>

  <changeSet id="5" author="ru186002" runOnChange="true">
    <createView replaceIfExists="true" viewName="LATEST_FINISHED_FEED_JOB_VW">
      <![CDATA[
        SELECT f.ID as FEED_ID,f.NAME as FEED_NAME,
               f.FEED_TYPE as FEED_TYPE,
               e.JOB_EXECUTION_ID as JOB_EXECUTION_ID,
               i.JOB_INSTANCE_ID as JOB_INSTANCE_ID,
               e.START_TIME,
               e.END_TIME,
               e.STATUS,
               e.EXIT_CODE,
               e.EXIT_MESSAGE
        FROM   BATCH_JOB_EXECUTION e
        INNER JOIN BATCH_JOB_INSTANCE i on i.JOB_INSTANCE_ID = e.JOB_INSTANCE_ID
        INNER JOIN FEED f on f.ID = i.FEED_ID
        inner JOIN LATEST_FEED_JOB_END_TIME_VW maxJobs
                                     on maxJobs.FEED_ID = f.ID
                                     and maxJobs.END_TIME =e.END_TIME
      ]]>
    </createView>
  </changeSet>

  <changeSet id="6" author="ru186002" runOnChange="true">
    <createView replaceIfExists="true" viewName="FEED_HEALTH_VW">
      <![CDATA[
        SELECT summary.FEED_ID as FEED_ID,
               summary.FEED_NAME as FEED_NAME,
               e.JOB_EXECUTION_ID as JOB_EXECUTION_ID,
               i.JOB_INSTANCE_ID as JOB_INSTANCE_ID,
               e.START_TIME,
               e.END_TIME,
               e.STATUS,
               e.EXIT_CODE,
               e.EXIT_MESSAGE,
               summary.FAILED_COUNT,
               summary.COMPLETED_COUNT,
               summary.ABANDONED_COUNT,
               summary.ALL_COUNT,
               summary.RUNNING_COUNT
        FROM   BATCH_JOB_EXECUTION e
        INNER JOIN BATCH_JOB_INSTANCE i on i.JOB_INSTANCE_ID = e.JOB_INSTANCE_ID
        inner join BATCH_FEED_SUMMARY_COUNTS_VW summary on summary.FEED_ID = i.FEED_ID
        inner JOIN LATEST_FEED_JOB_VW maxJobs
                                     on maxJobs.FEED_ID = summary.FEED_ID
                                     and maxJobs.JOB_EXECUTION_ID =e.JOB_EXECUTION_ID
      ]]>
    </createView>
  </changeSet>


</databaseChangeLog>
